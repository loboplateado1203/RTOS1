
examples_c/sapi/rtos_freertos/dynamic_mem/wire_bending_RTOS/out/wire_bending_RTOS.elf:     file format elf32-littlearm
examples_c/sapi/rtos_freertos/dynamic_mem/wire_bending_RTOS/out/wire_bending_RTOS.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000bbd

Program Header:
0x70000001 off    0x00015dd4 vaddr 0x1a005dd4 paddr 0x1a005dd4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00002c94 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005ddc memsz 0x00005ddc flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005ddc align 2**16
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005dd0  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f0  10000000  1a005ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200f0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200f0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200f0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200f0  2**2
                  CONTENTS
  6 .bss          00002ba4  100000f0  100000f0  000000f0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200f0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200f0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200f0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200f0  2**2
                  CONTENTS
 11 .init_array   00000004  1a005dd0  1a005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005dd4  1a005dd4  00015dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200f0  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200f0  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200f0  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200f0  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200f0  2**2
                  CONTENTS
 18 .noinit       00000000  10002c94  10002c94  000200f0  2**2
                  CONTENTS
 19 .debug_info   00029b33  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000053cd  00000000  00000000  00049c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000a1e1  00000000  00000000  0004eff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000ee8  00000000  00000000  000591d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001028  00000000  00000000  0005a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000fd36  00000000  00000000  0005b0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   000131c2  00000000  00000000  0006ae17  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002f9bd  00000000  00000000  0007dfd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000ad996  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000ada15  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002d78  00000000  00000000  000ada4c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000f0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a005dd0 l    d  .init_array	00000000 .init_array
1a005dd4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c94 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 MOTORS_WBM.c
100000fc l     O .bss	000000a0 inst
1000019c l     O .bss	00000001 nInst
00000000 l    df *ABS*	00000000 wire_bending_RTOS.c
00000000 l    df *ABS*	00000000 KEYBRD_5C.c
1000019d l     O .bss	00000001 GPIO00
1000019e l     O .bss	00000001 GPIO01
1000019f l     O .bss	00000001 GPIO02
100001a0 l     O .bss	00000001 GPIO03
100001a1 l     O .bss	00000001 GPIOINT
100001a8 l     O .bss	00000001 bGrabarYEjecutar
100001a9 l     O .bss	00000001 bOperacionSeteada
100001aa l     O .bss	00000001 bPrimerKeyPulsada
100001ab l     O .bss	00000001 bUsarDecimales
100001ac l     O .bss	00000001 nDeDecimales
100001ad l     O .bss	00000001 ultOperacion
10000000 l     O .data	00000001 KeyPulsada
10000001 l     O .data	00000001 nDeOperacion
10000002 l     O .data	00000001 ultimaKeyPulsada
00000000 l    df *ABS*	00000000 system.c
100001b0 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_1.c
100001b8 l     O .bss	00002000 ucHeap
100001b4 l     O .bss	00000004 pucAlignedHeap.11438
100021b8 l     O .bss	00000004 xNextFreeByte
00000000 l    df *ABS*	00000000 queue.c
1a000d96 l     F .text	00000012 prvGetDisinheritPriorityAfterTimeout
1a000da8 l     F .text	0000001e prvIsQueueFull
1a000dc6 l     F .text	0000001a prvIsQueueEmpty
1a000de0 l     F .text	00000076 prvCopyDataToQueue
1a000e56 l     F .text	00000024 prvCopyDataFromQueue
1a000e7a l     F .text	0000006e prvUnlockQueue
1a000f6c l     F .text	00000022 prvInitialiseNewQueue
1a0011e8 l     F .text	00000018 prvInitialiseMutex
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100021bc l     O .bss	00000168 uxIdleTaskStack.10728
10002324 l     O .bss	000005a0 uxTimerTaskStack.10735
100028c4 l     O .bss	00000060 xIdleTaskTCB.10727
10002924 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001770 l     F .text	0000002c prvResetNextTaskUnblockTime
1a00179c l     F .text	00000092 prvInitialiseNewTask
1a001830 l     F .text	00000068 prvInitialiseTaskLists
1a001898 l     F .text	000000ac prvAddNewTaskToReadyList
1a001944 l     F .text	00000038 prvDeleteTCB
1a00197c l     F .text	0000004c prvCheckTasksWaitingTermination
1a0019c8 l     F .text	00000028 prvIdleTask
1a0019f0 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002988 l     O .bss	00000004 pxDelayedTaskList
1000298c l     O .bss	00000004 pxOverflowDelayedTaskList
10002990 l     O .bss	0000008c pxReadyTasksLists
10002a1c l     O .bss	00000004 uxCurrentNumberOfTasks
10002a20 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002a24 l     O .bss	00000004 uxPendedTicks
10002a28 l     O .bss	00000004 uxSchedulerSuspended
10002a2c l     O .bss	00000004 uxTaskNumber
10002a30 l     O .bss	00000004 uxTopReadyPriority
10002a34 l     O .bss	00000014 xDelayedTaskList1
10002a48 l     O .bss	00000014 xDelayedTaskList2
10002a5c l     O .bss	00000004 xNextTaskUnblockTime
10002a60 l     O .bss	00000004 xNumOfOverflows
10002a64 l     O .bss	00000014 xPendingReadyList
10002a78 l     O .bss	00000004 xSchedulerRunning
10002a7c l     O .bss	00000014 xSuspendedTaskList
10002a90 l     O .bss	00000014 xTasksWaitingTermination
10002aa4 l     O .bss	00000004 xTickCount
10002aa8 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0023d0 l     F .text	00000020 prvGetNextExpireTime
1a0023f0 l     F .text	00000048 prvInsertTimerInActiveList
1a002438 l     F .text	00000070 prvCheckForValidListAndQueue
1a0024a8 l     F .text	00000040 prvInitialiseNewTimer
1a002878 l     F .text	00000016 prvTimerTask
1a002604 l     F .text	00000078 prvSwitchTimerLists
1a00267c l     F .text	0000002c prvSampleTimeNow
1a0026a8 l     F .text	00000060 prvProcessExpiredTimer
1a002708 l     F .text	00000074 prvProcessTimerOrBlockTask
1a00277c l     F .text	000000fc prvProcessReceivedCommands
10002aac l     O .bss	00000004 pxCurrentTimerList
10002ab0 l     O .bss	00000004 pxOverflowTimerList
10002ab4 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002b54 l     O .bss	00000014 xActiveTimerList1
10002b68 l     O .bss	00000014 xActiveTimerList2
10002b7c l     O .bss	00000004 xLastTime.11777
10002b80 l     O .bss	00000050 xStaticTimerQueue.11827
10002bd0 l     O .bss	00000004 xTimerQueue
10002bd4 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002890 l     F .text	00000040 prvTaskExitError
1a0028d0 l     F .text	00000022 prvPortStartFirstTask
1a0028f8 l     F .text	0000000e vPortEnableVFP
1a002960 l       .text	00000000 pxCurrentTCBConst2
1a002a40 l       .text	00000000 pxCurrentTCBConst
10002bd8 l     O .bss	00000001 ucMaxSysCallPriority
10002bdc l     O .bss	00000004 ulMaxPRIGROUPValue
10000004 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
1a002c14 l     F .text	00000044 Board_LED_Init
1a002c58 l     F .text	00000040 Board_TEC_Init
1a002c98 l     F .text	00000040 Board_GPIO_Init
1a002cd8 l     F .text	00000030 Board_ADC_Init
1a002d08 l     F .text	00000038 Board_SPI_Init
1a002d40 l     F .text	00000024 Board_I2C_Init
1a005a7c l     O .text	00000008 GpioButtons
1a005a84 l     O .text	0000000c GpioLeds
1a005a90 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a005aa8 l     O .text	00000004 InitClkStates
1a005aac l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002eb0 l     F .text	0000002c Chip_UART_GetIndex
1a005b20 l     O .text	00000008 UART_BClock
1a005b28 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003018 l     F .text	00000014 Chip_ADC_GetClockIndex
1a00302c l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0030f4 l     F .text	000000a4 pll_calc_divs
1a003198 l     F .text	0000010c pll_get_frac
1a0032a4 l     F .text	0000004c Chip_Clock_FindBaseClock
1a003518 l     F .text	00000022 Chip_Clock_GetDivRate
10002be0 l     O .bss	00000008 audio_usb_pll_freq
1a005b3c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005ba8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0037dc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0037f0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000008 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000040 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10002be8 l     O .bss	00000004 callBackFuncParams
10002bf0 l     O .bss	00000008 tickCounter
10002bf8 l     O .bss	00000004 tickHookFunction
10002bfc l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0039e0 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002c2c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003d64 l     F .text	00000010 clearInterrupt
1a003d74 l     F .text	0000005c serveInterrupt
10000044 l     O .data	00000048 ultrasonicSensors
1a005d34 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004ab0 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a0051f8 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000090 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005dd4 l       .init_array	00000000 __init_array_end
1a005dd0 l       .bss_RAM5	00000000 __preinit_array_end
1a005dd0 l       .init_array	00000000 __init_array_start
1a005dd0 l       .bss_RAM5	00000000 __preinit_array_start
1a004e34 g     F .text	00000028 putchar
1a00333c g     F .text	0000001c Chip_Clock_GetDividerSource
1a000c5c g     F .text	00000012 _isatty_r
1a004e5c g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000c6e g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
100000f8 g     O .bss	00000004 employee_signal_motorRotar
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0029a8 g     F .text	0000002c vPortExitCritical
1a00410c g     F .text	0000005a .hidden __floatdidf
10002c38 g     O .bss	00000004 poscGlobalMOTORES
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a004e04 g     F .text	00000030 printf
1a002df6 g     F .text	00000008 __stdio_init
1a004f7e g     F .text	00000024 __sseek
1a004b30 g     F .text	00000060 __sinit
1a004fac g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001658 g     F .text	00000052 vQueueWaitForMessageRestricted
1a004b04 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0030d2 g     F .text	0000000c Chip_ADC_SetResolution
1a0051f6 g     F .text	00000002 __malloc_unlock
100001a4 g     O .bss	00000004 acumulador
1a002a44 g     F .text	0000002c SysTick_Handler
1a000bb8  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002d9c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a0029e0 g     F .text	00000064 PendSV_Handler
1a001216 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005ddc g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
10002c3c g     O .bss	00000001 bServicioDeMotores_WBM
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
10002984 g     O .bss	00000004 pxCurrentTCB
1a000c52 g     F .text	0000000a _fstat_r
53ff6cd2 g       *ABS*	00000000 __valid_user_code_checksum
1a005ddc g       .ARM.exidx	00000000 _etext
10002c40 g     O .bss	00000004 Global_Queue_Handle
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0020c8 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0035ba g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002aa8 g     F .text	00000110 xPortStartScheduler
1a00048c g     F .text	00000028 cleanInstrucciones
1a004c8c g     F .text	00000016 memcpy
1a001fd4 g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a004af8 g     F .text	0000000c _cleanup_r
1a004094 g     F .text	00000022 .hidden __floatsidf
1a002a70  w    F .text	00000038 vPortSetupTimerInterrupt
1a00462c g     F .text	00000000 .hidden __aeabi_uldivmod
10002c94 g       .noinit	00000000 _noinit
1a004f14 g     F .text	00000010 puts
1a000d80 g     F .text	00000016 vPortFree
10002c8c g     O .bss	00000004 SystemCoreClock
1a002edc g     F .text	00000054 Chip_UART_Init
1a00143c g     F .text	0000019c xQueueSemaphoreTake
1a003960 g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002bb8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a003638 g     F .text	0000004c Chip_Clock_GetRate
1a0016c6 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002e38 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004074 g     F .text	0000001e .hidden __aeabi_ui2d
1a00465c g     F .text	000002cc .hidden __udivmoddi4
1a003df0 g     F .text	00000000 .hidden __aeabi_drsub
1a000cf0 g     F .text	00000020 _sbrk_r
1a005a78 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c78 g     F .text	0000004e _read_r
1a0016c0 g     F .text	00000006 vListInitialiseItem
1a003dda g     F .text	0000000a GPIO1_IRQHandler
1a0012e4 g     F .text	00000158 xQueueReceive
10002c4c g     O .bss	00000040 xQueueRegistry
1a004a8c g     F .text	00000024 fflush
1a0040b8 g     F .text	00000042 .hidden __extendsfdf2
1a0043bc g     F .text	000001d0 .hidden __aeabi_ddiv
1a001754 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a003dfc g     F .text	00000276 .hidden __adddf3
1a005dd4 g       .ARM.exidx	00000000 __exidx_start
1a004168 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a005d98 g     O .text	00000004 _global_impure_ptr
1a004c44 g     F .text	00000048 __libc_init_array
1a004074 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000d10 g     F .text	00000070 pvPortMalloc
1a002db8 g     F .text	0000002c Board_Init
1a000c46  w    F .text	00000002 _init
1a00162c g     F .text	0000002c vQueueDelete
1a0016aa g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00458c g     F .text	0000009e .hidden __aeabi_d2f
1a001c04 g     F .text	0000000c xTaskGetTickCount
1a00106c g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c94 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00070c g     F .text	00000078 setupKEYBRD_5C
1a000bbc g     F .text	00000088 Reset_Handler
1a003994 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a00044c g     F .text	00000040 motorGirar
1a0038d4 g     F .text	00000038 Chip_I2C_SetClockRate
1a002244 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0032f0 g     F .text	0000004c Chip_Clock_EnableCrystal
1a00040c g     F .text	00000040 motorRotar
1a005788 g     F .text	0000006c _putc_r
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00203c g     F .text	0000008c xTaskRemoveFromEventList
1a00176e g     F .text	00000002 vApplicationMallocFailedHook
10002c44 g     O .bss	00000004 gateKeeper
1a003dfc g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a0040fc g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a005d38 g     O .text	00000020 __sf_fake_stderr
1a0038b0 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0034ac g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a001600 g     F .text	0000002c vQueueUnregisterQueue
1a005bfc g     O .text	00000136 gpioPinsInit
1a0023b4 g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a003808 g     F .text	00000012 Chip_SSP_SetClockRate
1a005226 g     F .text	00000024 __sfputs_r
1a003de4 g     F .text	0000000a GPIO2_IRQHandler
1a005800 g     F .text	00000000 memchr
1a0020e0 g     F .text	00000080 xTaskCheckForTimeOut
1a004cb4 g     F .text	0000009c _free_r
1a003594 g     F .text	00000026 Chip_Clock_GetBaseClock
1a00218c g     F .text	000000b8 xTaskPriorityInherit
100000f0 g       .bss	00000000 _bss
1a0030a0 g     F .text	00000032 Chip_ADC_SetSampleRate
1a003df8 g     F .text	0000027a .hidden __aeabi_dsub
1a001bf4 g     F .text	00000010 vTaskSuspendAll
1a0040fc g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00381a g     F .text	0000003e Chip_SSP_SetBitRate
1a001712 g     F .text	00000028 uxListRemove
1a0037d8 g     F .text	00000002 Chip_GPIO_Init
1a005aa4 g     O .text	00000004 OscRateIn
1a001a88 g     F .text	00000072 xTaskCreateStatic
10002c94 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001f0c g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000f8e g     F .text	00000090 xQueueGenericCreateStatic
1a002004 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
10002c48 g     O .bss	00000001 bIniciando_WBM
1a000c48 g     F .text	0000000a _close_r
1a004094 g     F .text	00000022 .hidden __aeabi_i2d
1a003a14 g     F .text	00000194 gpioInit
1a00173c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a002598 g     F .text	0000006c xTimerGenericCommand
1a000598 g     F .text	00000020 pushInstMOTORS_WBM
1a005050 g     F .text	000000dc __swsetup_r
1a00176c g     F .text	00000002 vApplicationStackOverflowHook
1a004928  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0043bc g     F .text	000001d0 .hidden __divdf3
1a004b90 g     F .text	00000078 __sfp
1a004168 g     F .text	00000254 .hidden __muldf3
1a004f24 g     F .text	00000022 __sread
1a003c54 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0051f4 g     F .text	00000002 __malloc_lock
1a0004b4 g     F .text	000000e4 setupMOTORS_WBM
1a002d88 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a004a38 g     F .text	00000054 _fflush_r
1a005d58 g     O .text	00000020 __sf_fake_stdin
1a003358 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004ca2 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000644 g     F .text	00000080 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a0016de g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002940 g     F .text	00000024 SVC_Handler
1a004fa2 g     F .text	00000008 __sclose
1a0024e8 g     F .text	00000064 xTimerCreateTimerTask
1a00458c g     F .text	0000009e .hidden __truncdfsf2
1a004d50 g     F .text	000000b4 _malloc_r
1a00410c g     F .text	0000005a .hidden __aeabi_l2d
1a001e1c g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0035c8 g     F .text	0000003c Chip_Clock_EnableOpts
100000f0 g     O .bss	00000004 employee_signal_motorAvanzar
1a002dee g     F .text	00000008 __stdio_getchar
1a00101e g     F .text	0000004e xQueueGenericCreate
1a003374 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00342c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0006c4 g     F .text	0000002c _divisor
1a00390c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a003ba8 g     F .text	00000056 gpioWrite
1a000c44  w    F .text	00000002 _fini
1a004e04 g     F .text	00000030 iprintf
1a001d28 g     F .text	000000f4 xTaskResumeAll
1a000300 g     F .text	000000cc servicioDeMOTORES_WBM
1a001b60 g     F .text	00000094 vTaskStartScheduler
1a003060 g     F .text	00000040 Chip_ADC_Init
10002c90 g     O .bss	00000004 g_pUsbApi
1a002e00 g     F .text	00000038 Board_SetupMuxing
1a002f30 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a000cc6 g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a005478 g     F .text	000000ea _printf_common
1000008c g     O .data	00000004 _impure_ptr
1a00492c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a002160 g     F .text	0000000c vTaskMissedYield
10002c94 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003858 g     F .text	00000038 Chip_SSP_Init
1a0015d8 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
10002c49 g     O .bss	00000001 bParadaDeEmergencia
1a001c10 g     F .text	00000118 xTaskIncrementTick
1a000784 g     F .text	00000434 servicioDeKeyBrd
1a00512c g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a002d64 g     F .text	00000024 Board_Debug_Init
1a002de4 g     F .text	0000000a __stdio_putchar
1a000ee8 g     F .text	00000084 xQueueGenericReset
100000f0 g       .data	00000000 _edata
1a003890 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
100000f4 g     O .bss	00000004 employee_signal_motorGirar
1a001afa g     F .text	00000066 xTaskCreate
1a003684 g     F .text	00000154 Chip_SetupCoreClock
1a004f46 g     F .text	00000038 __swrite
1a003dd0 g     F .text	0000000a GPIO0_IRQHandler
1a00524c g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a004c08 g     F .text	0000003c _fwalk_reent
1a0030e0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001ec0 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a005d78 g     O .text	00000020 __sf_fake_stdout
1a00216c g     F .text	00000020 xTaskGetSchedulerState
1a0022f4 g     F .text	000000c0 vTaskPriorityDisinheritAfterTimeout
1a0005b8 g     F .text	0000008c taskParadaDedEmergencia
1a004928  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a005174 g     F .text	00000080 __smakebuf_r
1a00290c g     F .text	0000002c pxPortInitialiseStack
1a005564 g     F .text	00000224 _printf_i
1a003604 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002c34 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a00254c g     F .text	0000004c xTimerCreateStatic
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0003cc g     F .text	00000040 motorAvanzar
1a003bfe g     F .text	00000054 gpioRead
1a0040b8 g     F .text	00000042 .hidden __aeabi_f2d
1a003c70 g     F .text	000000f4 boardInit
1a002964 g     F .text	00000044 vPortEnterCritical
10002c30 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003df8 g     F .text	0000027a .hidden __subdf3
1a00524c g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001200 g     F .text	00000016 xQueueCreateMutex
1a00353c g     F .text	00000058 Chip_Clock_SetBaseClock
1a003944 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0006f0 g     F .text	0000001a _incChar1HexToDecAscii
1a002ea4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 bd 0b 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a d2 6c ff 53     }............l.S
	...
1a00002c:	41 29 00 1a 85 01 00 1a 00 00 00 00 e1 29 00 1a     A)...........)..
1a00003c:	45 2a 00 1a                                         E*..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	55 3c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     U<..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	d1 3d 00 1a db 3d 00 1a e5 3d 00 1a bb 01 00 1a     .=...=...=......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005ddc 	.word	0x1a005ddc
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000f0 	.word	0x000000f0
1a000120:	1a005ddc 	.word	0x1a005ddc
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005ddc 	.word	0x1a005ddc
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005ddc 	.word	0x1a005ddc
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005ddc 	.word	0x1a005ddc
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000f0 	.word	0x100000f0
1a000154:	00002ba4 	.word	0x00002ba4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <servicioDeMOTORES_WBM>:

	nInst++;
}

void servicioDeMOTORES_WBM( void *P )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	e03f      	b.n	1a000384 <servicioDeMOTORES_WBM+0x84>
	while (1)
	{
		if ( xQueueReceive(Global_Queue_Handle, &bServicioDeMotores_WBM, 1000 / portTICK_RATE_MS )){
			printf ( "\nGrabando y Ejecutando WBM\n\n");
1a000304:	4827      	ldr	r0, [pc, #156]	; (1a0003a4 <servicioDeMOTORES_WBM+0xa4>)
1a000306:	f004 fe05 	bl	1a004f14 <puts>
1a00030a:	e044      	b.n	1a000396 <servicioDeMOTORES_WBM+0x96>
				poscGlobalMOTORES = inst[ i ].valor;  //llevo la posición a cada motor

				switch (inst[ i ].movimiento )
				{
				case PARAR:
					 printf ( "Motores parados\n" );
1a00030c:	4826      	ldr	r0, [pc, #152]	; (1a0003a8 <servicioDeMOTORES_WBM+0xa8>)
1a00030e:	f004 fe01 	bl	1a004f14 <puts>
					 //motorAvanzar( 0 );
					 //motorRotar  ( 0 );
					 //motorGirar  ( 0 );
					 bServicioDeMotores_WBM = FALSE;
1a000312:	4b26      	ldr	r3, [pc, #152]	; (1a0003ac <servicioDeMOTORES_WBM+0xac>)
1a000314:	2200      	movs	r2, #0
1a000316:	701a      	strb	r2, [r3, #0]
			for ( int i = 0; i <= nInst ; i++ )
1a000318:	3401      	adds	r4, #1
1a00031a:	4b25      	ldr	r3, [pc, #148]	; (1a0003b0 <servicioDeMOTORES_WBM+0xb0>)
1a00031c:	781b      	ldrb	r3, [r3, #0]
1a00031e:	42a3      	cmp	r3, r4
1a000320:	db2c      	blt.n	1a00037c <servicioDeMOTORES_WBM+0x7c>
				poscGlobalMOTORES = inst[ i ].valor;  //llevo la posición a cada motor
1a000322:	4b24      	ldr	r3, [pc, #144]	; (1a0003b4 <servicioDeMOTORES_WBM+0xb4>)
1a000324:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
1a000328:	6851      	ldr	r1, [r2, #4]
1a00032a:	4a23      	ldr	r2, [pc, #140]	; (1a0003b8 <servicioDeMOTORES_WBM+0xb8>)
1a00032c:	6011      	str	r1, [r2, #0]
				switch (inst[ i ].movimiento )
1a00032e:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a000332:	2b03      	cmp	r3, #3
1a000334:	d8f0      	bhi.n	1a000318 <servicioDeMOTORES_WBM+0x18>
1a000336:	a201      	add	r2, pc, #4	; (adr r2, 1a00033c <servicioDeMOTORES_WBM+0x3c>)
1a000338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a00033c:	1a00030d 	.word	0x1a00030d
1a000340:	1a00034d 	.word	0x1a00034d
1a000344:	1a00035d 	.word	0x1a00035d
1a000348:	1a00036d 	.word	0x1a00036d
					 break;

				case AVANZAR:
					 xSemaphoreGive( employee_signal_motorAvanzar );
1a00034c:	2300      	movs	r3, #0
1a00034e:	461a      	mov	r2, r3
1a000350:	4619      	mov	r1, r3
1a000352:	481a      	ldr	r0, [pc, #104]	; (1a0003bc <servicioDeMOTORES_WBM+0xbc>)
1a000354:	6800      	ldr	r0, [r0, #0]
1a000356:	f000 fe89 	bl	1a00106c <xQueueGenericSend>
					 break;
1a00035a:	e7dd      	b.n	1a000318 <servicioDeMOTORES_WBM+0x18>

				case ROTAR:
					 xSemaphoreGive( employee_signal_motorRotar );
1a00035c:	2300      	movs	r3, #0
1a00035e:	461a      	mov	r2, r3
1a000360:	4619      	mov	r1, r3
1a000362:	4817      	ldr	r0, [pc, #92]	; (1a0003c0 <servicioDeMOTORES_WBM+0xc0>)
1a000364:	6800      	ldr	r0, [r0, #0]
1a000366:	f000 fe81 	bl	1a00106c <xQueueGenericSend>
					 break;
1a00036a:	e7d5      	b.n	1a000318 <servicioDeMOTORES_WBM+0x18>

				case GIRAR:
					 xSemaphoreGive( employee_signal_motorGirar );
1a00036c:	2300      	movs	r3, #0
1a00036e:	461a      	mov	r2, r3
1a000370:	4619      	mov	r1, r3
1a000372:	4814      	ldr	r0, [pc, #80]	; (1a0003c4 <servicioDeMOTORES_WBM+0xc4>)
1a000374:	6800      	ldr	r0, [r0, #0]
1a000376:	f000 fe79 	bl	1a00106c <xQueueGenericSend>
					 break;
1a00037a:	e7cd      	b.n	1a000318 <servicioDeMOTORES_WBM+0x18>
				}
			}
		}
		vTaskDelay( 1000 / portTICK_RATE_MS );
1a00037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000380:	f001 fd9e 	bl	1a001ec0 <vTaskDelay>
		if ( xQueueReceive(Global_Queue_Handle, &bServicioDeMotores_WBM, 1000 / portTICK_RATE_MS )){
1a000384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000388:	4908      	ldr	r1, [pc, #32]	; (1a0003ac <servicioDeMOTORES_WBM+0xac>)
1a00038a:	4b0f      	ldr	r3, [pc, #60]	; (1a0003c8 <servicioDeMOTORES_WBM+0xc8>)
1a00038c:	6818      	ldr	r0, [r3, #0]
1a00038e:	f000 ffa9 	bl	1a0012e4 <xQueueReceive>
1a000392:	2800      	cmp	r0, #0
1a000394:	d1b6      	bne.n	1a000304 <servicioDeMOTORES_WBM+0x4>
		if ( bServicioDeMotores_WBM )
1a000396:	4b05      	ldr	r3, [pc, #20]	; (1a0003ac <servicioDeMOTORES_WBM+0xac>)
1a000398:	781b      	ldrb	r3, [r3, #0]
1a00039a:	2b00      	cmp	r3, #0
1a00039c:	d0ee      	beq.n	1a00037c <servicioDeMOTORES_WBM+0x7c>
			for ( int i = 0; i <= nInst ; i++ )
1a00039e:	2400      	movs	r4, #0
1a0003a0:	e7bb      	b.n	1a00031a <servicioDeMOTORES_WBM+0x1a>
1a0003a2:	bf00      	nop
1a0003a4:	1a0058d0 	.word	0x1a0058d0
1a0003a8:	1a0058ec 	.word	0x1a0058ec
1a0003ac:	10002c3c 	.word	0x10002c3c
1a0003b0:	1000019c 	.word	0x1000019c
1a0003b4:	100000fc 	.word	0x100000fc
1a0003b8:	10002c38 	.word	0x10002c38
1a0003bc:	100000f0 	.word	0x100000f0
1a0003c0:	100000f8 	.word	0x100000f8
1a0003c4:	100000f4 	.word	0x100000f4
1a0003c8:	10002c40 	.word	0x10002c40

1a0003cc <motorAvanzar>:
	}
}


void motorAvanzar( void *p )  //(float parametro)
{
1a0003cc:	b508      	push	{r3, lr}
	while (1){
		if ( xSemaphoreTake( employee_signal_motorAvanzar, portMAX_DELAY ) ){
1a0003ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0003d2:	4b0a      	ldr	r3, [pc, #40]	; (1a0003fc <motorAvanzar+0x30>)
1a0003d4:	6818      	ldr	r0, [r3, #0]
1a0003d6:	f001 f831 	bl	1a00143c <xQueueSemaphoreTake>
1a0003da:	2800      	cmp	r0, #0
1a0003dc:	d0f7      	beq.n	1a0003ce <motorAvanzar+0x2>
//			if ( xSemaphoreTake( gateKeeper, 100 / portTICK_RATE_MS ) ){
//				printf( "motorAvanzar iniciando\n" );

					 if ( !bParadaDeEmergencia ) printf ( "Avanzando: %\n", poscGlobalMOTORES );
1a0003de:	4b08      	ldr	r3, [pc, #32]	; (1a000400 <motorAvanzar+0x34>)
1a0003e0:	781b      	ldrb	r3, [r3, #0]
1a0003e2:	2b00      	cmp	r3, #0
1a0003e4:	d1f3      	bne.n	1a0003ce <motorAvanzar+0x2>
1a0003e6:	4b07      	ldr	r3, [pc, #28]	; (1a000404 <motorAvanzar+0x38>)
1a0003e8:	6818      	ldr	r0, [r3, #0]
1a0003ea:	f003 fe65 	bl	1a0040b8 <__aeabi_f2d>
1a0003ee:	4602      	mov	r2, r0
1a0003f0:	460b      	mov	r3, r1
1a0003f2:	4805      	ldr	r0, [pc, #20]	; (1a000408 <motorAvanzar+0x3c>)
1a0003f4:	f004 fd06 	bl	1a004e04 <iprintf>
1a0003f8:	e7e9      	b.n	1a0003ce <motorAvanzar+0x2>
1a0003fa:	bf00      	nop
1a0003fc:	100000f0 	.word	0x100000f0
1a000400:	10002c49 	.word	0x10002c49
1a000404:	10002c38 	.word	0x10002c38
1a000408:	1a0058a0 	.word	0x1a0058a0

1a00040c <motorRotar>:
		}
	}
}

void motorRotar( void *p )  //(float parametro)
{
1a00040c:	b508      	push	{r3, lr}
	while (1){
		if ( xSemaphoreTake( employee_signal_motorRotar, portMAX_DELAY ) ){
1a00040e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000412:	4b0a      	ldr	r3, [pc, #40]	; (1a00043c <motorRotar+0x30>)
1a000414:	6818      	ldr	r0, [r3, #0]
1a000416:	f001 f811 	bl	1a00143c <xQueueSemaphoreTake>
1a00041a:	2800      	cmp	r0, #0
1a00041c:	d0f7      	beq.n	1a00040e <motorRotar+0x2>
//			if ( xSemaphoreTake( gateKeeper, 100 / portTICK_RATE_MS ) ){
//				printf( "motorRotar iniciando\n" );

				 	 if ( !bParadaDeEmergencia ) printf ( "Rotando: %f\n", poscGlobalMOTORES );
1a00041e:	4b08      	ldr	r3, [pc, #32]	; (1a000440 <motorRotar+0x34>)
1a000420:	781b      	ldrb	r3, [r3, #0]
1a000422:	2b00      	cmp	r3, #0
1a000424:	d1f3      	bne.n	1a00040e <motorRotar+0x2>
1a000426:	4b07      	ldr	r3, [pc, #28]	; (1a000444 <motorRotar+0x38>)
1a000428:	6818      	ldr	r0, [r3, #0]
1a00042a:	f003 fe45 	bl	1a0040b8 <__aeabi_f2d>
1a00042e:	4602      	mov	r2, r0
1a000430:	460b      	mov	r3, r1
1a000432:	4805      	ldr	r0, [pc, #20]	; (1a000448 <motorRotar+0x3c>)
1a000434:	f004 fce6 	bl	1a004e04 <iprintf>
1a000438:	e7e9      	b.n	1a00040e <motorRotar+0x2>
1a00043a:	bf00      	nop
1a00043c:	100000f8 	.word	0x100000f8
1a000440:	10002c49 	.word	0x10002c49
1a000444:	10002c38 	.word	0x10002c38
1a000448:	1a0058c0 	.word	0x1a0058c0

1a00044c <motorGirar>:
		}
	}
}

void motorGirar( void *p )  //(float parametro)
{
1a00044c:	b508      	push	{r3, lr}
	while (1){
		if ( xSemaphoreTake( employee_signal_motorGirar, portMAX_DELAY ) ){
1a00044e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000452:	4b0a      	ldr	r3, [pc, #40]	; (1a00047c <motorGirar+0x30>)
1a000454:	6818      	ldr	r0, [r3, #0]
1a000456:	f000 fff1 	bl	1a00143c <xQueueSemaphoreTake>
1a00045a:	2800      	cmp	r0, #0
1a00045c:	d0f7      	beq.n	1a00044e <motorGirar+0x2>
//			if ( xSemaphoreTake( gateKeeper, 100 / portTICK_RATE_MS ) ){
//				printf( "motorGirar iniciando\n" );

				 	 if ( !bParadaDeEmergencia ) printf ( "Girando: %e\n", poscGlobalMOTORES );
1a00045e:	4b08      	ldr	r3, [pc, #32]	; (1a000480 <motorGirar+0x34>)
1a000460:	781b      	ldrb	r3, [r3, #0]
1a000462:	2b00      	cmp	r3, #0
1a000464:	d1f3      	bne.n	1a00044e <motorGirar+0x2>
1a000466:	4b07      	ldr	r3, [pc, #28]	; (1a000484 <motorGirar+0x38>)
1a000468:	6818      	ldr	r0, [r3, #0]
1a00046a:	f003 fe25 	bl	1a0040b8 <__aeabi_f2d>
1a00046e:	4602      	mov	r2, r0
1a000470:	460b      	mov	r3, r1
1a000472:	4805      	ldr	r0, [pc, #20]	; (1a000488 <motorGirar+0x3c>)
1a000474:	f004 fcc6 	bl	1a004e04 <iprintf>
1a000478:	e7e9      	b.n	1a00044e <motorGirar+0x2>
1a00047a:	bf00      	nop
1a00047c:	100000f4 	.word	0x100000f4
1a000480:	10002c49 	.word	0x10002c49
1a000484:	10002c38 	.word	0x10002c38
1a000488:	1a0058b0 	.word	0x1a0058b0

1a00048c <cleanInstrucciones>:
	nInst = 0;
1a00048c:	2300      	movs	r3, #0
1a00048e:	4a07      	ldr	r2, [pc, #28]	; (1a0004ac <cleanInstrucciones+0x20>)
1a000490:	7013      	strb	r3, [r2, #0]
	for ( int i = 0; i < N_INST_MAX; i++ )
1a000492:	e008      	b.n	1a0004a6 <cleanInstrucciones+0x1a>
		inst [ i ].movimiento = PARAR;
1a000494:	4a06      	ldr	r2, [pc, #24]	; (1a0004b0 <cleanInstrucciones+0x24>)
1a000496:	2100      	movs	r1, #0
1a000498:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		inst [ i ].valor      = 0;
1a00049c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
1a0004a0:	2100      	movs	r1, #0
1a0004a2:	6051      	str	r1, [r2, #4]
	for ( int i = 0; i < N_INST_MAX; i++ )
1a0004a4:	3301      	adds	r3, #1
1a0004a6:	2b13      	cmp	r3, #19
1a0004a8:	ddf4      	ble.n	1a000494 <cleanInstrucciones+0x8>
}
1a0004aa:	4770      	bx	lr
1a0004ac:	1000019c 	.word	0x1000019c
1a0004b0:	100000fc 	.word	0x100000fc

1a0004b4 <setupMOTORS_WBM>:
{
1a0004b4:	b530      	push	{r4, r5, lr}
1a0004b6:	b083      	sub	sp, #12
	cleanInstrucciones();
1a0004b8:	f7ff ffe8 	bl	1a00048c <cleanInstrucciones>
	bServicioDeMotores_WBM = FALSE;
1a0004bc:	2400      	movs	r4, #0
1a0004be:	4b29      	ldr	r3, [pc, #164]	; (1a000564 <setupMOTORS_WBM+0xb0>)
1a0004c0:	701c      	strb	r4, [r3, #0]
	gateKeeper = xSemaphoreCreateMutex();
1a0004c2:	2001      	movs	r0, #1
1a0004c4:	f000 fe9c 	bl	1a001200 <xQueueCreateMutex>
1a0004c8:	4b27      	ldr	r3, [pc, #156]	; (1a000568 <setupMOTORS_WBM+0xb4>)
1a0004ca:	6018      	str	r0, [r3, #0]
	vSemaphoreCreateBinary( employee_signal_motorAvanzar );
1a0004cc:	2203      	movs	r2, #3
1a0004ce:	4621      	mov	r1, r4
1a0004d0:	2001      	movs	r0, #1
1a0004d2:	f000 fda4 	bl	1a00101e <xQueueGenericCreate>
1a0004d6:	4b25      	ldr	r3, [pc, #148]	; (1a00056c <setupMOTORS_WBM+0xb8>)
1a0004d8:	6018      	str	r0, [r3, #0]
1a0004da:	b120      	cbz	r0, 1a0004e6 <setupMOTORS_WBM+0x32>
1a0004dc:	4623      	mov	r3, r4
1a0004de:	4622      	mov	r2, r4
1a0004e0:	4621      	mov	r1, r4
1a0004e2:	f000 fdc3 	bl	1a00106c <xQueueGenericSend>
	vSemaphoreCreateBinary( employee_signal_motorRotar   );
1a0004e6:	2203      	movs	r2, #3
1a0004e8:	2100      	movs	r1, #0
1a0004ea:	2001      	movs	r0, #1
1a0004ec:	f000 fd97 	bl	1a00101e <xQueueGenericCreate>
1a0004f0:	4b1f      	ldr	r3, [pc, #124]	; (1a000570 <setupMOTORS_WBM+0xbc>)
1a0004f2:	6018      	str	r0, [r3, #0]
1a0004f4:	b120      	cbz	r0, 1a000500 <setupMOTORS_WBM+0x4c>
1a0004f6:	2300      	movs	r3, #0
1a0004f8:	461a      	mov	r2, r3
1a0004fa:	4619      	mov	r1, r3
1a0004fc:	f000 fdb6 	bl	1a00106c <xQueueGenericSend>
	vSemaphoreCreateBinary( employee_signal_motorGirar   );
1a000500:	2203      	movs	r2, #3
1a000502:	2100      	movs	r1, #0
1a000504:	2001      	movs	r0, #1
1a000506:	f000 fd8a 	bl	1a00101e <xQueueGenericCreate>
1a00050a:	4b1a      	ldr	r3, [pc, #104]	; (1a000574 <setupMOTORS_WBM+0xc0>)
1a00050c:	6018      	str	r0, [r3, #0]
1a00050e:	b120      	cbz	r0, 1a00051a <setupMOTORS_WBM+0x66>
1a000510:	2300      	movs	r3, #0
1a000512:	461a      	mov	r2, r3
1a000514:	4619      	mov	r1, r3
1a000516:	f000 fda9 	bl	1a00106c <xQueueGenericSend>
	xTaskCreate( servicioDeMOTORES_WBM, (const char *) "servicioDeMOTORES_WBM", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a00051a:	2400      	movs	r4, #0
1a00051c:	9401      	str	r4, [sp, #4]
1a00051e:	2301      	movs	r3, #1
1a000520:	9300      	str	r3, [sp, #0]
1a000522:	4623      	mov	r3, r4
1a000524:	22b4      	movs	r2, #180	; 0xb4
1a000526:	4914      	ldr	r1, [pc, #80]	; (1a000578 <setupMOTORS_WBM+0xc4>)
1a000528:	4814      	ldr	r0, [pc, #80]	; (1a00057c <setupMOTORS_WBM+0xc8>)
1a00052a:	f001 fae6 	bl	1a001afa <xTaskCreate>
	xTaskCreate( motorAvanzar, (const char *) "motorAvanzar", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+2, NULL );
1a00052e:	9401      	str	r4, [sp, #4]
1a000530:	2502      	movs	r5, #2
1a000532:	9500      	str	r5, [sp, #0]
1a000534:	4623      	mov	r3, r4
1a000536:	22b4      	movs	r2, #180	; 0xb4
1a000538:	4911      	ldr	r1, [pc, #68]	; (1a000580 <setupMOTORS_WBM+0xcc>)
1a00053a:	4812      	ldr	r0, [pc, #72]	; (1a000584 <setupMOTORS_WBM+0xd0>)
1a00053c:	f001 fadd 	bl	1a001afa <xTaskCreate>
	xTaskCreate( motorRotar,   (const char *) "motorRotar",   configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+2, NULL );
1a000540:	9401      	str	r4, [sp, #4]
1a000542:	9500      	str	r5, [sp, #0]
1a000544:	4623      	mov	r3, r4
1a000546:	22b4      	movs	r2, #180	; 0xb4
1a000548:	490f      	ldr	r1, [pc, #60]	; (1a000588 <setupMOTORS_WBM+0xd4>)
1a00054a:	4810      	ldr	r0, [pc, #64]	; (1a00058c <setupMOTORS_WBM+0xd8>)
1a00054c:	f001 fad5 	bl	1a001afa <xTaskCreate>
	xTaskCreate( motorGirar,   (const char *) "motorGirar",   configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+2, NULL );
1a000550:	9401      	str	r4, [sp, #4]
1a000552:	9500      	str	r5, [sp, #0]
1a000554:	4623      	mov	r3, r4
1a000556:	22b4      	movs	r2, #180	; 0xb4
1a000558:	490d      	ldr	r1, [pc, #52]	; (1a000590 <setupMOTORS_WBM+0xdc>)
1a00055a:	480e      	ldr	r0, [pc, #56]	; (1a000594 <setupMOTORS_WBM+0xe0>)
1a00055c:	f001 facd 	bl	1a001afa <xTaskCreate>
}
1a000560:	b003      	add	sp, #12
1a000562:	bd30      	pop	{r4, r5, pc}
1a000564:	10002c3c 	.word	0x10002c3c
1a000568:	10002c44 	.word	0x10002c44
1a00056c:	100000f0 	.word	0x100000f0
1a000570:	100000f8 	.word	0x100000f8
1a000574:	100000f4 	.word	0x100000f4
1a000578:	1a0058fc 	.word	0x1a0058fc
1a00057c:	1a000301 	.word	0x1a000301
1a000580:	1a005914 	.word	0x1a005914
1a000584:	1a0003cd 	.word	0x1a0003cd
1a000588:	1a005924 	.word	0x1a005924
1a00058c:	1a00040d 	.word	0x1a00040d
1a000590:	1a005930 	.word	0x1a005930
1a000594:	1a00044d 	.word	0x1a00044d

1a000598 <pushInstMOTORS_WBM>:
	inst [ nInst ].movimiento = mov;
1a000598:	4905      	ldr	r1, [pc, #20]	; (1a0005b0 <pushInstMOTORS_WBM+0x18>)
1a00059a:	780b      	ldrb	r3, [r1, #0]
1a00059c:	4a05      	ldr	r2, [pc, #20]	; (1a0005b4 <pushInstMOTORS_WBM+0x1c>)
1a00059e:	f802 0033 	strb.w	r0, [r2, r3, lsl #3]
	inst [ nInst ].valor      = valor;
1a0005a2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
1a0005a6:	ed82 0a01 	vstr	s0, [r2, #4]
	nInst++;
1a0005aa:	3301      	adds	r3, #1
1a0005ac:	700b      	strb	r3, [r1, #0]
}
1a0005ae:	4770      	bx	lr
1a0005b0:	1000019c 	.word	0x1000019c
1a0005b4:	100000fc 	.word	0x100000fc

1a0005b8 <taskParadaDedEmergencia>:
      por ningun S.O. */
   return 0 ;
}

void taskParadaDedEmergencia( void* taskParmPtr )
{
1a0005b8:	b510      	push	{r4, lr}
1a0005ba:	b082      	sub	sp, #8
   gpioWrite( LED1, ON );
1a0005bc:	2101      	movs	r1, #1
1a0005be:	202b      	movs	r0, #43	; 0x2b
1a0005c0:	f003 faf2 	bl	1a003ba8 <gpioWrite>
   // Envia la tarea al estado bloqueado durante 500 mSeg (delay)
   vTaskDelay( 500 / portTICK_RATE_MS );
1a0005c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a0005c8:	f001 fc7a 	bl	1a001ec0 <vTaskDelay>
   gpioWrite( LED1, OFF );
1a0005cc:	2100      	movs	r1, #0
1a0005ce:	202b      	movs	r0, #43	; 0x2b
1a0005d0:	f003 faea 	bl	1a003ba8 <gpioWrite>

   // Tarea periodica cada 100 ms
   portTickType xPeriodicity =  100 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a0005d4:	f001 fb16 	bl	1a001c04 <xTaskGetTickCount>
1a0005d8:	9001      	str	r0, [sp, #4]
1a0005da:	e003      	b.n	1a0005e4 <taskParadaDedEmergencia+0x2c>
			 vSemaphoreDelete( employee_signal_motorRotar   );
			 vSemaphoreDelete( employee_signal_motorGirar   );
		   }
	   }
	   //  Repetir por siempre, cada 100 mSeg
	   vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0005dc:	2164      	movs	r1, #100	; 0x64
1a0005de:	a801      	add	r0, sp, #4
1a0005e0:	f001 fc1c 	bl	1a001e1c <vTaskDelayUntil>
	   valorAnterior = !gpioRead(BOTON);
1a0005e4:	2024      	movs	r0, #36	; 0x24
1a0005e6:	f003 fb0a 	bl	1a003bfe <gpioRead>
1a0005ea:	fab0 f480 	clz	r4, r0
1a0005ee:	0964      	lsrs	r4, r4, #5
	   vTaskDelay( xTiempoAntiRebote );
1a0005f0:	2032      	movs	r0, #50	; 0x32
1a0005f2:	f001 fc65 	bl	1a001ec0 <vTaskDelay>
	   valorActual = !gpioRead(BOTON);
1a0005f6:	2024      	movs	r0, #36	; 0x24
1a0005f8:	f003 fb01 	bl	1a003bfe <gpioRead>
1a0005fc:	2800      	cmp	r0, #0
1a0005fe:	bf0c      	ite	eq
1a000600:	2301      	moveq	r3, #1
1a000602:	2300      	movne	r3, #0
	   if( valorActual ){
1a000604:	d1ea      	bne.n	1a0005dc <taskParadaDedEmergencia+0x24>
		  if(valorAnterior == valorActual){
1a000606:	429c      	cmp	r4, r3
1a000608:	d1e8      	bne.n	1a0005dc <taskParadaDedEmergencia+0x24>
			 bParadaDeEmergencia = TRUE;
1a00060a:	4b09      	ldr	r3, [pc, #36]	; (1a000630 <taskParadaDedEmergencia+0x78>)
1a00060c:	2201      	movs	r2, #1
1a00060e:	701a      	strb	r2, [r3, #0]
			 printf( "Parada de Emergencia!!\n" );
1a000610:	4808      	ldr	r0, [pc, #32]	; (1a000634 <taskParadaDedEmergencia+0x7c>)
1a000612:	f004 fc7f 	bl	1a004f14 <puts>
			 vSemaphoreDelete( employee_signal_motorAvanzar );
1a000616:	4b08      	ldr	r3, [pc, #32]	; (1a000638 <taskParadaDedEmergencia+0x80>)
1a000618:	6818      	ldr	r0, [r3, #0]
1a00061a:	f001 f807 	bl	1a00162c <vQueueDelete>
			 vSemaphoreDelete( employee_signal_motorRotar   );
1a00061e:	4b07      	ldr	r3, [pc, #28]	; (1a00063c <taskParadaDedEmergencia+0x84>)
1a000620:	6818      	ldr	r0, [r3, #0]
1a000622:	f001 f803 	bl	1a00162c <vQueueDelete>
			 vSemaphoreDelete( employee_signal_motorGirar   );
1a000626:	4b06      	ldr	r3, [pc, #24]	; (1a000640 <taskParadaDedEmergencia+0x88>)
1a000628:	6818      	ldr	r0, [r3, #0]
1a00062a:	f000 ffff 	bl	1a00162c <vQueueDelete>
1a00062e:	e7d5      	b.n	1a0005dc <taskParadaDedEmergencia+0x24>
1a000630:	10002c49 	.word	0x10002c49
1a000634:	1a0059c4 	.word	0x1a0059c4
1a000638:	100000f0 	.word	0x100000f0
1a00063c:	100000f8 	.word	0x100000f8
1a000640:	100000f4 	.word	0x100000f4

1a000644 <main>:
int main(void){
1a000644:	b500      	push	{lr}
1a000646:	b083      	sub	sp, #12
   boardConfig();
1a000648:	f003 fb12 	bl	1a003c70 <boardInit>
   bParadaDeEmergencia = FALSE;
1a00064c:	2400      	movs	r4, #0
1a00064e:	4b15      	ldr	r3, [pc, #84]	; (1a0006a4 <main+0x60>)
1a000650:	701c      	strb	r4, [r3, #0]
   bIniciando_WBM = TRUE;
1a000652:	4d15      	ldr	r5, [pc, #84]	; (1a0006a8 <main+0x64>)
1a000654:	2601      	movs	r6, #1
1a000656:	702e      	strb	r6, [r5, #0]
   setupKEYBRD_5C( GPIO0, GPIO1, GPIO2, GPIO3, GPIO4 );
1a000658:	231e      	movs	r3, #30
1a00065a:	9300      	str	r3, [sp, #0]
1a00065c:	230e      	movs	r3, #14
1a00065e:	221f      	movs	r2, #31
1a000660:	210f      	movs	r1, #15
1a000662:	2020      	movs	r0, #32
1a000664:	f000 f852 	bl	1a00070c <setupKEYBRD_5C>
   setupMOTORS_WBM();
1a000668:	f7ff ff24 	bl	1a0004b4 <setupMOTORS_WBM>
   printf("Inicializando wire bending interfaz i2c 5c\r\n" );
1a00066c:	480f      	ldr	r0, [pc, #60]	; (1a0006ac <main+0x68>)
1a00066e:	f004 fc51 	bl	1a004f14 <puts>
   printf("Lorena B. Zacharewicz CESE 8va Cohorte 2019\r\n" );
1a000672:	480f      	ldr	r0, [pc, #60]	; (1a0006b0 <main+0x6c>)
1a000674:	f004 fc4e 	bl	1a004f14 <puts>
   xTaskCreate( servicioDeKeyBrd, (const char *) "servicioDeKeyBrd", configMINIMAL_STACK_SIZE*2, NULL, tskIDLE_PRIORITY+1, NULL );
1a000678:	9401      	str	r4, [sp, #4]
1a00067a:	9600      	str	r6, [sp, #0]
1a00067c:	4623      	mov	r3, r4
1a00067e:	22b4      	movs	r2, #180	; 0xb4
1a000680:	490c      	ldr	r1, [pc, #48]	; (1a0006b4 <main+0x70>)
1a000682:	480d      	ldr	r0, [pc, #52]	; (1a0006b8 <main+0x74>)
1a000684:	f001 fa39 	bl	1a001afa <xTaskCreate>
   xTaskCreate( taskParadaDedEmergencia, (const char *)"taskParadaDedEmergencia", configMINIMAL_STACK_SIZE*2, 0, tskIDLE_PRIORITY+3, 0 );
1a000688:	9401      	str	r4, [sp, #4]
1a00068a:	2303      	movs	r3, #3
1a00068c:	9300      	str	r3, [sp, #0]
1a00068e:	4623      	mov	r3, r4
1a000690:	22b4      	movs	r2, #180	; 0xb4
1a000692:	490a      	ldr	r1, [pc, #40]	; (1a0006bc <main+0x78>)
1a000694:	480a      	ldr	r0, [pc, #40]	; (1a0006c0 <main+0x7c>)
1a000696:	f001 fa30 	bl	1a001afa <xTaskCreate>
   bIniciando_WBM = FALSE;
1a00069a:	702c      	strb	r4, [r5, #0]
    vTaskStartScheduler();
1a00069c:	f001 fa60 	bl	1a001b60 <vTaskStartScheduler>
1a0006a0:	e7fe      	b.n	1a0006a0 <main+0x5c>
1a0006a2:	bf00      	nop
1a0006a4:	10002c49 	.word	0x10002c49
1a0006a8:	10002c48 	.word	0x10002c48
1a0006ac:	1a00593c 	.word	0x1a00593c
1a0006b0:	1a005968 	.word	0x1a005968
1a0006b4:	1a005998 	.word	0x1a005998
1a0006b8:	1a000785 	.word	0x1a000785
1a0006bc:	1a0059ac 	.word	0x1a0059ac
1a0006c0:	1a0005b9 	.word	0x1a0005b9

1a0006c4 <_divisor>:
float  acumulador = 0;  // Compila bien y SI crea el .elf exitosamente VER ERROR DEL .h


//Divisor usado cuando se ingresan sucesivos decimales
double _divisor(uint8_t n)
{
1a0006c4:	b538      	push	{r3, r4, r5, lr}
1a0006c6:	4605      	mov	r5, r0
	double mult = 1;

	for (uint8_t i = 1; i <= n; i++ ){
1a0006c8:	2401      	movs	r4, #1
	double mult = 1;
1a0006ca:	2000      	movs	r0, #0
1a0006cc:	4906      	ldr	r1, [pc, #24]	; (1a0006e8 <_divisor+0x24>)
	for (uint8_t i = 1; i <= n; i++ ){
1a0006ce:	e005      	b.n	1a0006dc <_divisor+0x18>
		mult *= 10;
1a0006d0:	2200      	movs	r2, #0
1a0006d2:	4b06      	ldr	r3, [pc, #24]	; (1a0006ec <_divisor+0x28>)
1a0006d4:	f003 fd48 	bl	1a004168 <__aeabi_dmul>
	for (uint8_t i = 1; i <= n; i++ ){
1a0006d8:	3401      	adds	r4, #1
1a0006da:	b2e4      	uxtb	r4, r4
1a0006dc:	42ac      	cmp	r4, r5
1a0006de:	d9f7      	bls.n	1a0006d0 <_divisor+0xc>
	};

	return mult;
};
1a0006e0:	ec41 0b10 	vmov	d0, r0, r1
1a0006e4:	bd38      	pop	{r3, r4, r5, pc}
1a0006e6:	bf00      	nop
1a0006e8:	3ff00000 	.word	0x3ff00000
1a0006ec:	40240000 	.word	0x40240000

1a0006f0 <_incChar1HexToDecAscii>:

//Toma un HexDec lo incrementa en 1 y lo convierte en string
uint8_t _incChar1HexToDecAscii ( unsigned char x ){
	unsigned char y;

	y = x & 0b00001111;	//elimino el 2do nibble
1a0006f0:	f000 030f 	and.w	r3, r0, #15
	x =	x & 0b11110000;	//elimino el 1er nibble
	x = x / 16;			//desplazo  4 bits a la derecha
1a0006f4:	0900      	lsrs	r0, r0, #4

	if (y == 9){ x++; y = 0;} else { y++; }; //incremento en 1
1a0006f6:	2b09      	cmp	r3, #9
1a0006f8:	d004      	beq.n	1a000704 <_incChar1HexToDecAscii+0x14>
1a0006fa:	3301      	adds	r3, #1

	nDeOperacionAscii[0] = x + 48;  //convierto es ascii y guardo
	nDeOperacionAscii[1] = y + 48;

	//x = x * 16; 		//desplazo  4 bits a la izquierda
	return x*16 + y;    //reconvierto en HexDec
1a0006fc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	//return x*10 + y;	//reconvierto en entero
}
1a000700:	b2c0      	uxtb	r0, r0
1a000702:	4770      	bx	lr
	if (y == 9){ x++; y = 0;} else { y++; }; //incremento en 1
1a000704:	3001      	adds	r0, #1
1a000706:	2300      	movs	r3, #0
1a000708:	e7f8      	b.n	1a0006fc <_incChar1HexToDecAscii+0xc>
1a00070a:	Address 0x000000001a00070a is out of bounds.


1a00070c <setupKEYBRD_5C>:

void setupKEYBRD_5C( gpioMap_t KeyBit0, gpioMap_t KeyBit1, gpioMap_t KeyBit2, gpioMap_t KeyBit3, gpioMap_t KeyINT )
{
1a00070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000710:	4680      	mov	r8, r0
1a000712:	460e      	mov	r6, r1
1a000714:	4615      	mov	r5, r2
1a000716:	461c      	mov	r4, r3

	Global_Queue_Handle = xQueueCreate(1, sizeof(bool_t));
1a000718:	2200      	movs	r2, #0
1a00071a:	2101      	movs	r1, #1
1a00071c:	4608      	mov	r0, r1
1a00071e:	f000 fc7e 	bl	1a00101e <xQueueGenericCreate>
1a000722:	4b12      	ldr	r3, [pc, #72]	; (1a00076c <setupKEYBRD_5C+0x60>)
1a000724:	6018      	str	r0, [r3, #0]

	GPIO00  = KeyBit0;
1a000726:	4b12      	ldr	r3, [pc, #72]	; (1a000770 <setupKEYBRD_5C+0x64>)
1a000728:	f883 8000 	strb.w	r8, [r3]
	GPIO01  = KeyBit1;
1a00072c:	4f11      	ldr	r7, [pc, #68]	; (1a000774 <setupKEYBRD_5C+0x68>)
1a00072e:	703e      	strb	r6, [r7, #0]
	GPIO02  = KeyBit2;
1a000730:	4e11      	ldr	r6, [pc, #68]	; (1a000778 <setupKEYBRD_5C+0x6c>)
1a000732:	7035      	strb	r5, [r6, #0]
	GPIO03  = KeyBit3;
1a000734:	4d11      	ldr	r5, [pc, #68]	; (1a00077c <setupKEYBRD_5C+0x70>)
1a000736:	702c      	strb	r4, [r5, #0]
	GPIOINT = KeyINT;
1a000738:	4c11      	ldr	r4, [pc, #68]	; (1a000780 <setupKEYBRD_5C+0x74>)
1a00073a:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00073e:	7023      	strb	r3, [r4, #0]

	gpioInit( GPIO00,  GPIO_INPUT );
1a000740:	2100      	movs	r1, #0
1a000742:	4640      	mov	r0, r8
1a000744:	f003 f966 	bl	1a003a14 <gpioInit>
	gpioInit( GPIO01,  GPIO_INPUT );
1a000748:	2100      	movs	r1, #0
1a00074a:	7838      	ldrb	r0, [r7, #0]
1a00074c:	f003 f962 	bl	1a003a14 <gpioInit>
	gpioInit( GPIO02,  GPIO_INPUT );
1a000750:	2100      	movs	r1, #0
1a000752:	7830      	ldrb	r0, [r6, #0]
1a000754:	f003 f95e 	bl	1a003a14 <gpioInit>
	gpioInit( GPIO03,  GPIO_INPUT );
1a000758:	2100      	movs	r1, #0
1a00075a:	7828      	ldrb	r0, [r5, #0]
1a00075c:	f003 f95a 	bl	1a003a14 <gpioInit>
	gpioInit( GPIOINT, GPIO_INPUT );
1a000760:	2100      	movs	r1, #0
1a000762:	7820      	ldrb	r0, [r4, #0]
1a000764:	f003 f956 	bl	1a003a14 <gpioInit>

};
1a000768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00076c:	10002c40 	.word	0x10002c40
1a000770:	1000019d 	.word	0x1000019d
1a000774:	1000019e 	.word	0x1000019e
1a000778:	1000019f 	.word	0x1000019f
1a00077c:	100001a0 	.word	0x100001a0
1a000780:	100001a1 	.word	0x100001a1

1a000784 <servicioDeKeyBrd>:


void servicioDeKeyBrd( void *P )
{
1a000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   // Tarea periodica cada 200 ms
   portTickType xPeriodicity =  200 / portTICK_RATE_MS;
   portTickType xLastWakeTime = xTaskGetTickCount();
1a000786:	f001 fa3d 	bl	1a001c04 <xTaskGetTickCount>
1a00078a:	e01e      	b.n	1a0007ca <servicioDeKeyBrd+0x46>

   while(TRUE)
   {
		//if ( xSemaphoreTake( gateKeeper2, 1000 / portTICK_RATE_MS ) )
		//{
		   if ( gpioRead(GPIO00) ){ gpioWrite( LED3, ON );} else {gpioWrite( LED3, OFF );}; //diversión con los LEDS para ver el código del teclado
1a00078c:	2100      	movs	r1, #0
1a00078e:	202d      	movs	r0, #45	; 0x2d
1a000790:	f003 fa0a 	bl	1a003ba8 <gpioWrite>
1a000794:	e023      	b.n	1a0007de <servicioDeKeyBrd+0x5a>
		   if ( gpioRead(GPIO01) ){ gpioWrite( LED2, ON );} else {gpioWrite( LED2, OFF );};
1a000796:	2100      	movs	r1, #0
1a000798:	202c      	movs	r0, #44	; 0x2c
1a00079a:	f003 fa05 	bl	1a003ba8 <gpioWrite>
1a00079e:	e028      	b.n	1a0007f2 <servicioDeKeyBrd+0x6e>
		   if ( gpioRead(GPIO02) ){ gpioWrite( LED1, ON );} else {gpioWrite( LED1, OFF );};
1a0007a0:	2100      	movs	r1, #0
1a0007a2:	202b      	movs	r0, #43	; 0x2b
1a0007a4:	f003 fa00 	bl	1a003ba8 <gpioWrite>
1a0007a8:	e02d      	b.n	1a000806 <servicioDeKeyBrd+0x82>
		   if ( gpioRead(GPIO03) ){ gpioWrite( LEDB, ON );} else {gpioWrite( LEDB, OFF );};
1a0007aa:	2100      	movs	r1, #0
1a0007ac:	202a      	movs	r0, #42	; 0x2a
1a0007ae:	f003 f9fb 	bl	1a003ba8 <gpioWrite>

		   if (!gpioRead(GPIOINT) ) {
1a0007b2:	4bb1      	ldr	r3, [pc, #708]	; (1a000a78 <servicioDeKeyBrd+0x2f4>)
1a0007b4:	7818      	ldrb	r0, [r3, #0]
1a0007b6:	f003 fa22 	bl	1a003bfe <gpioRead>
1a0007ba:	2800      	cmp	r0, #0
1a0007bc:	d02e      	beq.n	1a00081c <servicioDeKeyBrd+0x98>
			   if (!gpioRead(GPIO4) ) {
				   ultimaKeyPulsada = -1; //Esto me asegura pulsadas sucesivas de la misma tecla
			   }
		   }

		   if ( gpioRead(GPIOINT) ){
1a0007be:	4bae      	ldr	r3, [pc, #696]	; (1a000a78 <servicioDeKeyBrd+0x2f4>)
1a0007c0:	7818      	ldrb	r0, [r3, #0]
1a0007c2:	f003 fa1c 	bl	1a003bfe <gpioRead>
1a0007c6:	2800      	cmp	r0, #0
1a0007c8:	d134      	bne.n	1a000834 <servicioDeKeyBrd+0xb0>
		   if ( gpioRead(GPIO00) ){ gpioWrite( LED3, ON );} else {gpioWrite( LED3, OFF );}; //diversión con los LEDS para ver el código del teclado
1a0007ca:	4bac      	ldr	r3, [pc, #688]	; (1a000a7c <servicioDeKeyBrd+0x2f8>)
1a0007cc:	7818      	ldrb	r0, [r3, #0]
1a0007ce:	f003 fa16 	bl	1a003bfe <gpioRead>
1a0007d2:	2800      	cmp	r0, #0
1a0007d4:	d0da      	beq.n	1a00078c <servicioDeKeyBrd+0x8>
1a0007d6:	2101      	movs	r1, #1
1a0007d8:	202d      	movs	r0, #45	; 0x2d
1a0007da:	f003 f9e5 	bl	1a003ba8 <gpioWrite>
		   if ( gpioRead(GPIO01) ){ gpioWrite( LED2, ON );} else {gpioWrite( LED2, OFF );};
1a0007de:	4ba8      	ldr	r3, [pc, #672]	; (1a000a80 <servicioDeKeyBrd+0x2fc>)
1a0007e0:	7818      	ldrb	r0, [r3, #0]
1a0007e2:	f003 fa0c 	bl	1a003bfe <gpioRead>
1a0007e6:	2800      	cmp	r0, #0
1a0007e8:	d0d5      	beq.n	1a000796 <servicioDeKeyBrd+0x12>
1a0007ea:	2101      	movs	r1, #1
1a0007ec:	202c      	movs	r0, #44	; 0x2c
1a0007ee:	f003 f9db 	bl	1a003ba8 <gpioWrite>
		   if ( gpioRead(GPIO02) ){ gpioWrite( LED1, ON );} else {gpioWrite( LED1, OFF );};
1a0007f2:	4ba4      	ldr	r3, [pc, #656]	; (1a000a84 <servicioDeKeyBrd+0x300>)
1a0007f4:	7818      	ldrb	r0, [r3, #0]
1a0007f6:	f003 fa02 	bl	1a003bfe <gpioRead>
1a0007fa:	2800      	cmp	r0, #0
1a0007fc:	d0d0      	beq.n	1a0007a0 <servicioDeKeyBrd+0x1c>
1a0007fe:	2101      	movs	r1, #1
1a000800:	202b      	movs	r0, #43	; 0x2b
1a000802:	f003 f9d1 	bl	1a003ba8 <gpioWrite>
		   if ( gpioRead(GPIO03) ){ gpioWrite( LEDB, ON );} else {gpioWrite( LEDB, OFF );};
1a000806:	4ba0      	ldr	r3, [pc, #640]	; (1a000a88 <servicioDeKeyBrd+0x304>)
1a000808:	7818      	ldrb	r0, [r3, #0]
1a00080a:	f003 f9f8 	bl	1a003bfe <gpioRead>
1a00080e:	2800      	cmp	r0, #0
1a000810:	d0cb      	beq.n	1a0007aa <servicioDeKeyBrd+0x26>
1a000812:	2101      	movs	r1, #1
1a000814:	202a      	movs	r0, #42	; 0x2a
1a000816:	f003 f9c7 	bl	1a003ba8 <gpioWrite>
1a00081a:	e7ca      	b.n	1a0007b2 <servicioDeKeyBrd+0x2e>
			   vTaskDelay( 10 / portTICK_RATE_MS );
1a00081c:	200a      	movs	r0, #10
1a00081e:	f001 fb4f 	bl	1a001ec0 <vTaskDelay>
			   if (!gpioRead(GPIO4) ) {
1a000822:	201e      	movs	r0, #30
1a000824:	f003 f9eb 	bl	1a003bfe <gpioRead>
1a000828:	2800      	cmp	r0, #0
1a00082a:	d1c8      	bne.n	1a0007be <servicioDeKeyBrd+0x3a>
				   ultimaKeyPulsada = -1; //Esto me asegura pulsadas sucesivas de la misma tecla
1a00082c:	4b97      	ldr	r3, [pc, #604]	; (1a000a8c <servicioDeKeyBrd+0x308>)
1a00082e:	22ff      	movs	r2, #255	; 0xff
1a000830:	701a      	strb	r2, [r3, #0]
1a000832:	e7c4      	b.n	1a0007be <servicioDeKeyBrd+0x3a>
			   KeyPulsada = 0;
1a000834:	4b96      	ldr	r3, [pc, #600]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a000836:	2200      	movs	r2, #0
1a000838:	701a      	strb	r2, [r3, #0]
			   if ( gpioRead(GPIO00) ) KeyPulsada += 1;
1a00083a:	4b90      	ldr	r3, [pc, #576]	; (1a000a7c <servicioDeKeyBrd+0x2f8>)
1a00083c:	7818      	ldrb	r0, [r3, #0]
1a00083e:	f003 f9de 	bl	1a003bfe <gpioRead>
1a000842:	b118      	cbz	r0, 1a00084c <servicioDeKeyBrd+0xc8>
1a000844:	4a92      	ldr	r2, [pc, #584]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a000846:	7813      	ldrb	r3, [r2, #0]
1a000848:	3301      	adds	r3, #1
1a00084a:	7013      	strb	r3, [r2, #0]
			   if ( gpioRead(GPIO01) ) KeyPulsada += 2;
1a00084c:	4b8c      	ldr	r3, [pc, #560]	; (1a000a80 <servicioDeKeyBrd+0x2fc>)
1a00084e:	7818      	ldrb	r0, [r3, #0]
1a000850:	f003 f9d5 	bl	1a003bfe <gpioRead>
1a000854:	b118      	cbz	r0, 1a00085e <servicioDeKeyBrd+0xda>
1a000856:	4a8e      	ldr	r2, [pc, #568]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a000858:	7813      	ldrb	r3, [r2, #0]
1a00085a:	3302      	adds	r3, #2
1a00085c:	7013      	strb	r3, [r2, #0]
			   if ( gpioRead(GPIO02) ) KeyPulsada += 4;
1a00085e:	4b89      	ldr	r3, [pc, #548]	; (1a000a84 <servicioDeKeyBrd+0x300>)
1a000860:	7818      	ldrb	r0, [r3, #0]
1a000862:	f003 f9cc 	bl	1a003bfe <gpioRead>
1a000866:	b118      	cbz	r0, 1a000870 <servicioDeKeyBrd+0xec>
1a000868:	4a89      	ldr	r2, [pc, #548]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a00086a:	7813      	ldrb	r3, [r2, #0]
1a00086c:	3304      	adds	r3, #4
1a00086e:	7013      	strb	r3, [r2, #0]
			   if ( gpioRead(GPIO03) ) KeyPulsada += 8;
1a000870:	4b85      	ldr	r3, [pc, #532]	; (1a000a88 <servicioDeKeyBrd+0x304>)
1a000872:	7818      	ldrb	r0, [r3, #0]
1a000874:	f003 f9c3 	bl	1a003bfe <gpioRead>
1a000878:	b118      	cbz	r0, 1a000882 <servicioDeKeyBrd+0xfe>
1a00087a:	4a85      	ldr	r2, [pc, #532]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a00087c:	7813      	ldrb	r3, [r2, #0]
1a00087e:	3308      	adds	r3, #8
1a000880:	7013      	strb	r3, [r2, #0]

			   if ( ultimaKeyPulsada != KeyPulsada ){
1a000882:	4b82      	ldr	r3, [pc, #520]	; (1a000a8c <servicioDeKeyBrd+0x308>)
1a000884:	781a      	ldrb	r2, [r3, #0]
1a000886:	4b82      	ldr	r3, [pc, #520]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a000888:	781b      	ldrb	r3, [r3, #0]
1a00088a:	429a      	cmp	r2, r3
1a00088c:	d09d      	beq.n	1a0007ca <servicioDeKeyBrd+0x46>
					ultimaKeyPulsada  = KeyPulsada;
1a00088e:	4a7f      	ldr	r2, [pc, #508]	; (1a000a8c <servicioDeKeyBrd+0x308>)
1a000890:	7013      	strb	r3, [r2, #0]

					if ( !bPrimerKeyPulsada && KeyPulsada != ResetearWBM )
1a000892:	4a80      	ldr	r2, [pc, #512]	; (1a000a94 <servicioDeKeyBrd+0x310>)
1a000894:	7812      	ldrb	r2, [r2, #0]
1a000896:	b90a      	cbnz	r2, 1a00089c <servicioDeKeyBrd+0x118>
1a000898:	2b0f      	cmp	r3, #15
1a00089a:	d147      	bne.n	1a00092c <servicioDeKeyBrd+0x1a8>
		//			    print_LCD2( " Operacion = Valor;" );
						printf( " Operacion = Valor\n" );
		//			    setCursor( 3, 0 );
					}

					if ( bOperacionSeteada )
1a00089c:	4b7e      	ldr	r3, [pc, #504]	; (1a000a98 <servicioDeKeyBrd+0x314>)
1a00089e:	781b      	ldrb	r3, [r3, #0]
1a0008a0:	b37b      	cbz	r3, 1a000902 <servicioDeKeyBrd+0x17e>
					{

						if ( KeyPulsada < 10 ){
1a0008a2:	4b7b      	ldr	r3, [pc, #492]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a0008a4:	781c      	ldrb	r4, [r3, #0]
1a0008a6:	2c09      	cmp	r4, #9
1a0008a8:	d827      	bhi.n	1a0008fa <servicioDeKeyBrd+0x176>
							if ( bUsarDecimales ){
1a0008aa:	4b7c      	ldr	r3, [pc, #496]	; (1a000a9c <servicioDeKeyBrd+0x318>)
1a0008ac:	781b      	ldrb	r3, [r3, #0]
1a0008ae:	2b00      	cmp	r3, #0
1a0008b0:	d046      	beq.n	1a000940 <servicioDeKeyBrd+0x1bc>
								nDeDecimales += 1;
1a0008b2:	4b7b      	ldr	r3, [pc, #492]	; (1a000aa0 <servicioDeKeyBrd+0x31c>)
1a0008b4:	7818      	ldrb	r0, [r3, #0]
1a0008b6:	3001      	adds	r0, #1
1a0008b8:	b2c0      	uxtb	r0, r0
1a0008ba:	7018      	strb	r0, [r3, #0]
								acumulador =  acumulador + KeyPulsada / _divisor( nDeDecimales );
1a0008bc:	f7ff ff02 	bl	1a0006c4 <_divisor>
1a0008c0:	ec57 6b10 	vmov	r6, r7, d0
1a0008c4:	4620      	mov	r0, r4
1a0008c6:	f003 fbe5 	bl	1a004094 <__aeabi_i2d>
1a0008ca:	4632      	mov	r2, r6
1a0008cc:	463b      	mov	r3, r7
1a0008ce:	f003 fd75 	bl	1a0043bc <__aeabi_ddiv>
1a0008d2:	4606      	mov	r6, r0
1a0008d4:	460f      	mov	r7, r1
1a0008d6:	4d73      	ldr	r5, [pc, #460]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a0008d8:	6828      	ldr	r0, [r5, #0]
1a0008da:	f003 fbed 	bl	1a0040b8 <__aeabi_f2d>
1a0008de:	4632      	mov	r2, r6
1a0008e0:	463b      	mov	r3, r7
1a0008e2:	f003 fa8b 	bl	1a003dfc <__adddf3>
1a0008e6:	f003 fe51 	bl	1a00458c <__aeabi_d2f>
1a0008ea:	6028      	str	r0, [r5, #0]
		//						write( 48 + KeyPulsada ); //El ascii del número
								printf ( "%c", 48 + KeyPulsada ); fflush ( NULL );
1a0008ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
1a0008f0:	f004 faa0 	bl	1a004e34 <putchar>
1a0008f4:	2000      	movs	r0, #0
1a0008f6:	f004 f8c9 	bl	1a004a8c <fflush>
								acumulador =  10 * acumulador + KeyPulsada;
		//						write( 48 + KeyPulsada ); //El ascii del número
								printf ( "%c", 48 + KeyPulsada ); fflush ( NULL );
							}
						}
						if ( KeyPulsada == 14 ){
1a0008fa:	4b65      	ldr	r3, [pc, #404]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a0008fc:	781b      	ldrb	r3, [r3, #0]
1a0008fe:	2b0e      	cmp	r3, #14
1a000900:	d035      	beq.n	1a00096e <servicioDeKeyBrd+0x1ea>
								  printf ( "." );
								  nDeDecimales = 0;
							}
						}
					}
					switch (KeyPulsada){
1a000902:	4b63      	ldr	r3, [pc, #396]	; (1a000a90 <servicioDeKeyBrd+0x30c>)
1a000904:	781b      	ldrb	r3, [r3, #0]
1a000906:	3b0a      	subs	r3, #10
1a000908:	2b05      	cmp	r3, #5
1a00090a:	f63f af5e 	bhi.w	1a0007ca <servicioDeKeyBrd+0x46>
1a00090e:	a201      	add	r2, pc, #4	; (adr r2, 1a000914 <servicioDeKeyBrd+0x190>)
1a000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000914:	1a00098b 	.word	0x1a00098b
1a000918:	1a000a3d 	.word	0x1a000a3d
1a00091c:	1a0009e3 	.word	0x1a0009e3
1a000920:	1a000ae5 	.word	0x1a000ae5
1a000924:	1a0007cb 	.word	0x1a0007cb
1a000928:	1a000b51 	.word	0x1a000b51
						bPrimerKeyPulsada = TRUE;
1a00092c:	4b59      	ldr	r3, [pc, #356]	; (1a000a94 <servicioDeKeyBrd+0x310>)
1a00092e:	2201      	movs	r2, #1
1a000930:	701a      	strb	r2, [r3, #0]
						printf( "WBM LBZ En Servicio\n");
1a000932:	485d      	ldr	r0, [pc, #372]	; (1a000aa8 <servicioDeKeyBrd+0x324>)
1a000934:	f004 faee 	bl	1a004f14 <puts>
						printf( " Operacion = Valor\n" );
1a000938:	485c      	ldr	r0, [pc, #368]	; (1a000aac <servicioDeKeyBrd+0x328>)
1a00093a:	f004 faeb 	bl	1a004f14 <puts>
1a00093e:	e7ad      	b.n	1a00089c <servicioDeKeyBrd+0x118>
								acumulador =  10 * acumulador + KeyPulsada;
1a000940:	4b58      	ldr	r3, [pc, #352]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a000942:	edd3 7a00 	vldr	s15, [r3]
1a000946:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
1a00094a:	ee27 7a87 	vmul.f32	s14, s15, s14
1a00094e:	ee07 4a90 	vmov	s15, r4
1a000952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000956:	ee77 7a87 	vadd.f32	s15, s15, s14
1a00095a:	edc3 7a00 	vstr	s15, [r3]
								printf ( "%c", 48 + KeyPulsada ); fflush ( NULL );
1a00095e:	f104 0030 	add.w	r0, r4, #48	; 0x30
1a000962:	f004 fa67 	bl	1a004e34 <putchar>
1a000966:	2000      	movs	r0, #0
1a000968:	f004 f890 	bl	1a004a8c <fflush>
1a00096c:	e7c5      	b.n	1a0008fa <servicioDeKeyBrd+0x176>
							if ( !bUsarDecimales ){ //el if es para que solo se active una vez
1a00096e:	4b4b      	ldr	r3, [pc, #300]	; (1a000a9c <servicioDeKeyBrd+0x318>)
1a000970:	781b      	ldrb	r3, [r3, #0]
1a000972:	2b00      	cmp	r3, #0
1a000974:	d1c5      	bne.n	1a000902 <servicioDeKeyBrd+0x17e>
								  bUsarDecimales = TRUE;
1a000976:	4b49      	ldr	r3, [pc, #292]	; (1a000a9c <servicioDeKeyBrd+0x318>)
1a000978:	2201      	movs	r2, #1
1a00097a:	701a      	strb	r2, [r3, #0]
								  printf ( "." );
1a00097c:	202e      	movs	r0, #46	; 0x2e
1a00097e:	f004 fa59 	bl	1a004e34 <putchar>
								  nDeDecimales = 0;
1a000982:	4b47      	ldr	r3, [pc, #284]	; (1a000aa0 <servicioDeKeyBrd+0x31c>)
1a000984:	2200      	movs	r2, #0
1a000986:	701a      	strb	r2, [r3, #0]
1a000988:	e7bb      	b.n	1a000902 <servicioDeKeyBrd+0x17e>
					   case Avanzar:
							   //TODO guardar operación anterior
							   if ( acumulador != 0 ){
1a00098a:	4b46      	ldr	r3, [pc, #280]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a00098c:	edd3 7a00 	vldr	s15, [r3]
1a000990:	eef5 7a40 	vcmp.f32	s15, #0.0
1a000994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000998:	d113      	bne.n	1a0009c2 <servicioDeKeyBrd+0x23e>
								   pushInstMOTORS_WBM( ultOperacion, acumulador);
							   } else {
		//				    	   clearLinea( 3 );
							   }; //piso la linea si no se han introducido valores

							   ultOperacion = AVANZAR;
1a00099a:	2301      	movs	r3, #1
1a00099c:	4a44      	ldr	r2, [pc, #272]	; (1a000ab0 <servicioDeKeyBrd+0x32c>)
1a00099e:	7013      	strb	r3, [r2, #0]

							   acumulador = 0;
1a0009a0:	4a40      	ldr	r2, [pc, #256]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a0009a2:	2100      	movs	r1, #0
1a0009a4:	6011      	str	r1, [r2, #0]
							   bUsarDecimales =  FALSE;
1a0009a6:	2400      	movs	r4, #0
1a0009a8:	4a3c      	ldr	r2, [pc, #240]	; (1a000a9c <servicioDeKeyBrd+0x318>)
1a0009aa:	7014      	strb	r4, [r2, #0]
							   nDeDecimales = 0;
1a0009ac:	4a3c      	ldr	r2, [pc, #240]	; (1a000aa0 <servicioDeKeyBrd+0x31c>)
1a0009ae:	7014      	strb	r4, [r2, #0]

							   bOperacionSeteada =  TRUE;
1a0009b0:	4a39      	ldr	r2, [pc, #228]	; (1a000a98 <servicioDeKeyBrd+0x314>)
1a0009b2:	7013      	strb	r3, [r2, #0]

		//				   	   print_LCD( nDeOperacionAscii, 4);
		//				   	   printf ( &nDeOperacionAscii );
		//					   print_LCD( "Avanzar=", 8);
							   printf ( "Avanzar=" ); fflush ( NULL );
1a0009b4:	483f      	ldr	r0, [pc, #252]	; (1a000ab4 <servicioDeKeyBrd+0x330>)
1a0009b6:	f004 fa25 	bl	1a004e04 <iprintf>
1a0009ba:	4620      	mov	r0, r4
1a0009bc:	f004 f866 	bl	1a004a8c <fflush>
		//					   setCursor( 3, 13 );
						   break;
1a0009c0:	e703      	b.n	1a0007ca <servicioDeKeyBrd+0x46>
								   printf ( "\n" );
1a0009c2:	200a      	movs	r0, #10
1a0009c4:	f004 fa36 	bl	1a004e34 <putchar>
								   nDeOperacion = _incChar1HexToDecAscii( nDeOperacion );
1a0009c8:	4c3b      	ldr	r4, [pc, #236]	; (1a000ab8 <servicioDeKeyBrd+0x334>)
1a0009ca:	7820      	ldrb	r0, [r4, #0]
1a0009cc:	f7ff fe90 	bl	1a0006f0 <_incChar1HexToDecAscii>
1a0009d0:	7020      	strb	r0, [r4, #0]
								   pushInstMOTORS_WBM( ultOperacion, acumulador);
1a0009d2:	4b34      	ldr	r3, [pc, #208]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a0009d4:	ed93 0a00 	vldr	s0, [r3]
1a0009d8:	4b35      	ldr	r3, [pc, #212]	; (1a000ab0 <servicioDeKeyBrd+0x32c>)
1a0009da:	7818      	ldrb	r0, [r3, #0]
1a0009dc:	f7ff fddc 	bl	1a000598 <pushInstMOTORS_WBM>
1a0009e0:	e7db      	b.n	1a00099a <servicioDeKeyBrd+0x216>
					   case Girar:
							   //TODO guardar operación
							   if ( acumulador != 0 ){
1a0009e2:	4b30      	ldr	r3, [pc, #192]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a0009e4:	edd3 7a00 	vldr	s15, [r3]
1a0009e8:	eef5 7a40 	vcmp.f32	s15, #0.0
1a0009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0009f0:	d114      	bne.n	1a000a1c <servicioDeKeyBrd+0x298>
								   pushInstMOTORS_WBM( ultOperacion, acumulador);
							   } else {
		//						   clearLinea( 3 );
							   }; //piso la linea si no se han introducido valores

							   ultOperacion = GIRAR;
1a0009f2:	4b2f      	ldr	r3, [pc, #188]	; (1a000ab0 <servicioDeKeyBrd+0x32c>)
1a0009f4:	2203      	movs	r2, #3
1a0009f6:	701a      	strb	r2, [r3, #0]

							   acumulador = 0;
1a0009f8:	4b2a      	ldr	r3, [pc, #168]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a0009fa:	2200      	movs	r2, #0
1a0009fc:	601a      	str	r2, [r3, #0]
							   bUsarDecimales =  FALSE;
1a0009fe:	2400      	movs	r4, #0
1a000a00:	4b26      	ldr	r3, [pc, #152]	; (1a000a9c <servicioDeKeyBrd+0x318>)
1a000a02:	701c      	strb	r4, [r3, #0]
							   nDeDecimales = 0;
1a000a04:	4b26      	ldr	r3, [pc, #152]	; (1a000aa0 <servicioDeKeyBrd+0x31c>)
1a000a06:	701c      	strb	r4, [r3, #0]

							   bOperacionSeteada =  TRUE;
1a000a08:	4b23      	ldr	r3, [pc, #140]	; (1a000a98 <servicioDeKeyBrd+0x314>)
1a000a0a:	2201      	movs	r2, #1
1a000a0c:	701a      	strb	r2, [r3, #0]

		//					   print_LCD( nDeOperacionAscii, 4)
		//				   	   printf ( &nDeOperacionAscii );
		//					   print_LCD( "Girar  =", 8);
							   printf ( "Girar=" ); fflush ( NULL );
1a000a0e:	482b      	ldr	r0, [pc, #172]	; (1a000abc <servicioDeKeyBrd+0x338>)
1a000a10:	f004 f9f8 	bl	1a004e04 <iprintf>
1a000a14:	4620      	mov	r0, r4
1a000a16:	f004 f839 	bl	1a004a8c <fflush>
		//					   setCursor( 3, 13 );
						   break;
1a000a1a:	e6d6      	b.n	1a0007ca <servicioDeKeyBrd+0x46>
								   printf ( "\n" );
1a000a1c:	200a      	movs	r0, #10
1a000a1e:	f004 fa09 	bl	1a004e34 <putchar>
								   nDeOperacion = _incChar1HexToDecAscii( nDeOperacion );
1a000a22:	4c25      	ldr	r4, [pc, #148]	; (1a000ab8 <servicioDeKeyBrd+0x334>)
1a000a24:	7820      	ldrb	r0, [r4, #0]
1a000a26:	f7ff fe63 	bl	1a0006f0 <_incChar1HexToDecAscii>
1a000a2a:	7020      	strb	r0, [r4, #0]
								   pushInstMOTORS_WBM( ultOperacion, acumulador);
1a000a2c:	4b1d      	ldr	r3, [pc, #116]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a000a2e:	ed93 0a00 	vldr	s0, [r3]
1a000a32:	4b1f      	ldr	r3, [pc, #124]	; (1a000ab0 <servicioDeKeyBrd+0x32c>)
1a000a34:	7818      	ldrb	r0, [r3, #0]
1a000a36:	f7ff fdaf 	bl	1a000598 <pushInstMOTORS_WBM>
1a000a3a:	e7da      	b.n	1a0009f2 <servicioDeKeyBrd+0x26e>
					   case Rotar:
							   //TODO guardar operación
							   if ( acumulador != 0 ){
1a000a3c:	4b19      	ldr	r3, [pc, #100]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a000a3e:	edd3 7a00 	vldr	s15, [r3]
1a000a42:	eef5 7a40 	vcmp.f32	s15, #0.0
1a000a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000a4a:	d13b      	bne.n	1a000ac4 <servicioDeKeyBrd+0x340>
								   pushInstMOTORS_WBM( ultOperacion, acumulador);
							   } else {
		//						   clearLinea( 3 ); //piso la linea si no se han introducido valores
							   };

							   ultOperacion = ROTAR;
1a000a4c:	4b18      	ldr	r3, [pc, #96]	; (1a000ab0 <servicioDeKeyBrd+0x32c>)
1a000a4e:	2202      	movs	r2, #2
1a000a50:	701a      	strb	r2, [r3, #0]

							   acumulador = 0;
1a000a52:	4b14      	ldr	r3, [pc, #80]	; (1a000aa4 <servicioDeKeyBrd+0x320>)
1a000a54:	2200      	movs	r2, #0
1a000a56:	601a      	str	r2, [r3, #0]
							   bUsarDecimales =  FALSE;
1a000a58:	2400      	movs	r4, #0
1a000a5a:	4b10      	ldr	r3, [pc, #64]	; (1a000a9c <servicioDeKeyBrd+0x318>)
1a000a5c:	701c      	strb	r4, [r3, #0]
							   nDeDecimales = 0;
1a000a5e:	4b10      	ldr	r3, [pc, #64]	; (1a000aa0 <servicioDeKeyBrd+0x31c>)
1a000a60:	701c      	strb	r4, [r3, #0]

							   bOperacionSeteada =  TRUE;
1a000a62:	4b0d      	ldr	r3, [pc, #52]	; (1a000a98 <servicioDeKeyBrd+0x314>)
1a000a64:	2201      	movs	r2, #1
1a000a66:	701a      	strb	r2, [r3, #0]

		//					   print_LCD( nDeOperacionAscii, 4);
		//				   	   printf ( &nDeOperacionAscii );
		//					   print_LCD( "Rotar  =", 8);
							   printf ( "Rotar=" ); fflush ( NULL );
1a000a68:	4815      	ldr	r0, [pc, #84]	; (1a000ac0 <servicioDeKeyBrd+0x33c>)
1a000a6a:	f004 f9cb 	bl	1a004e04 <iprintf>
1a000a6e:	4620      	mov	r0, r4
1a000a70:	f004 f80c 	bl	1a004a8c <fflush>
		//					   setCursor( 3, 13 );
						   break;
1a000a74:	e6a9      	b.n	1a0007ca <servicioDeKeyBrd+0x46>
1a000a76:	bf00      	nop
1a000a78:	100001a1 	.word	0x100001a1
1a000a7c:	1000019d 	.word	0x1000019d
1a000a80:	1000019e 	.word	0x1000019e
1a000a84:	1000019f 	.word	0x1000019f
1a000a88:	100001a0 	.word	0x100001a0
1a000a8c:	10000002 	.word	0x10000002
1a000a90:	10000000 	.word	0x10000000
1a000a94:	100001aa 	.word	0x100001aa
1a000a98:	100001a9 	.word	0x100001a9
1a000a9c:	100001ab 	.word	0x100001ab
1a000aa0:	100001ac 	.word	0x100001ac
1a000aa4:	100001a4 	.word	0x100001a4
1a000aa8:	1a0059dc 	.word	0x1a0059dc
1a000aac:	1a0059f0 	.word	0x1a0059f0
1a000ab0:	100001ad 	.word	0x100001ad
1a000ab4:	1a005a04 	.word	0x1a005a04
1a000ab8:	10000001 	.word	0x10000001
1a000abc:	1a005a10 	.word	0x1a005a10
1a000ac0:	1a005a18 	.word	0x1a005a18
								   printf ( "\n" );
1a000ac4:	200a      	movs	r0, #10
1a000ac6:	f004 f9b5 	bl	1a004e34 <putchar>
								   nDeOperacion = _incChar1HexToDecAscii( nDeOperacion );
1a000aca:	4c2e      	ldr	r4, [pc, #184]	; (1a000b84 <servicioDeKeyBrd+0x400>)
1a000acc:	7820      	ldrb	r0, [r4, #0]
1a000ace:	f7ff fe0f 	bl	1a0006f0 <_incChar1HexToDecAscii>
1a000ad2:	7020      	strb	r0, [r4, #0]
								   pushInstMOTORS_WBM( ultOperacion, acumulador);
1a000ad4:	4b2c      	ldr	r3, [pc, #176]	; (1a000b88 <servicioDeKeyBrd+0x404>)
1a000ad6:	ed93 0a00 	vldr	s0, [r3]
1a000ada:	4b2c      	ldr	r3, [pc, #176]	; (1a000b8c <servicioDeKeyBrd+0x408>)
1a000adc:	7818      	ldrb	r0, [r3, #0]
1a000ade:	f7ff fd5b 	bl	1a000598 <pushInstMOTORS_WBM>
1a000ae2:	e7b3      	b.n	1a000a4c <servicioDeKeyBrd+0x2c8>
					   case GrabarYEjecutar:
							   if ( nDeOperacion ) //si hay operaciones puedo grabar y ejecutar
1a000ae4:	4b27      	ldr	r3, [pc, #156]	; (1a000b84 <servicioDeKeyBrd+0x400>)
1a000ae6:	781b      	ldrb	r3, [r3, #0]
1a000ae8:	2b00      	cmp	r3, #0
1a000aea:	f43f ae6e 	beq.w	1a0007ca <servicioDeKeyBrd+0x46>
							   {
								   if ( !bGrabarYEjecutar ) //solo se hace esto la primera vez que gravo y ejecuto
1a000aee:	4b28      	ldr	r3, [pc, #160]	; (1a000b90 <servicioDeKeyBrd+0x40c>)
1a000af0:	781b      	ldrb	r3, [r3, #0]
1a000af2:	b9bb      	cbnz	r3, 1a000b24 <servicioDeKeyBrd+0x3a0>
								   {
									   bGrabarYEjecutar = TRUE;
1a000af4:	4b26      	ldr	r3, [pc, #152]	; (1a000b90 <servicioDeKeyBrd+0x40c>)
1a000af6:	2201      	movs	r2, #1
1a000af8:	701a      	strb	r2, [r3, #0]
									   if ( acumulador != 0 ){
1a000afa:	4b23      	ldr	r3, [pc, #140]	; (1a000b88 <servicioDeKeyBrd+0x404>)
1a000afc:	edd3 7a00 	vldr	s15, [r3]
1a000b00:	eef5 7a40 	vcmp.f32	s15, #0.0
1a000b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a000b08:	d117      	bne.n	1a000b3a <servicioDeKeyBrd+0x3b6>
										   pushInstMOTORS_WBM( ultOperacion, acumulador);
									   } else {
			//							   clearLinea( 3 );
									   };

									   acumulador = 0;
1a000b0a:	4b1f      	ldr	r3, [pc, #124]	; (1a000b88 <servicioDeKeyBrd+0x404>)
1a000b0c:	2200      	movs	r2, #0
1a000b0e:	601a      	str	r2, [r3, #0]
									   bUsarDecimales     = FALSE;
1a000b10:	2300      	movs	r3, #0
1a000b12:	4a20      	ldr	r2, [pc, #128]	; (1a000b94 <servicioDeKeyBrd+0x410>)
1a000b14:	7013      	strb	r3, [r2, #0]
									   nDeDecimales = 0;
1a000b16:	4a20      	ldr	r2, [pc, #128]	; (1a000b98 <servicioDeKeyBrd+0x414>)
1a000b18:	7013      	strb	r3, [r2, #0]

									   bOperacionSeteada =  FALSE;
1a000b1a:	4a20      	ldr	r2, [pc, #128]	; (1a000b9c <servicioDeKeyBrd+0x418>)
1a000b1c:	7013      	strb	r3, [r2, #0]
									   //print_LCD2( "Grabar y Ejecutar;");
									   printf ( "Grabar y Ejecutar\n" );
1a000b1e:	4820      	ldr	r0, [pc, #128]	; (1a000ba0 <servicioDeKeyBrd+0x41c>)
1a000b20:	f004 f9f8 	bl	1a004f14 <puts>
			//						   setCursor( 3, 18 );
								   }
								   //servicioDeMOTORES_WBM( ); //arranco el doblado de alambre siempre se pulsa esta tecla
								   bServicioDeMotores_WBM = TRUE;
1a000b24:	2101      	movs	r1, #1
1a000b26:	4b1f      	ldr	r3, [pc, #124]	; (1a000ba4 <servicioDeKeyBrd+0x420>)
1a000b28:	7019      	strb	r1, [r3, #0]
								   //xQueueSend(Global_Queue_Handle, &bServicioDeMotores_WBM, 1000 / portTICK_RATE_MS );
								   xQueueSend(Global_Queue_Handle, (bool_t *)TRUE, 1000 / portTICK_RATE_MS );
1a000b2a:	2300      	movs	r3, #0
1a000b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000b30:	481d      	ldr	r0, [pc, #116]	; (1a000ba8 <servicioDeKeyBrd+0x424>)
1a000b32:	6800      	ldr	r0, [r0, #0]
1a000b34:	f000 fa9a 	bl	1a00106c <xQueueGenericSend>
1a000b38:	e647      	b.n	1a0007ca <servicioDeKeyBrd+0x46>
										   printf ( "\n" );
1a000b3a:	200a      	movs	r0, #10
1a000b3c:	f004 f97a 	bl	1a004e34 <putchar>
										   pushInstMOTORS_WBM( ultOperacion, acumulador);
1a000b40:	4b11      	ldr	r3, [pc, #68]	; (1a000b88 <servicioDeKeyBrd+0x404>)
1a000b42:	ed93 0a00 	vldr	s0, [r3]
1a000b46:	4b11      	ldr	r3, [pc, #68]	; (1a000b8c <servicioDeKeyBrd+0x408>)
1a000b48:	7818      	ldrb	r0, [r3, #0]
1a000b4a:	f7ff fd25 	bl	1a000598 <pushInstMOTORS_WBM>
1a000b4e:	e7dc      	b.n	1a000b0a <servicioDeKeyBrd+0x386>
							   }
						   break;
					   case ResetearWBM:
							   acumulador = 0;
1a000b50:	4b0d      	ldr	r3, [pc, #52]	; (1a000b88 <servicioDeKeyBrd+0x404>)
1a000b52:	2200      	movs	r2, #0
1a000b54:	601a      	str	r2, [r3, #0]
							   bUsarDecimales    = FALSE;
1a000b56:	2300      	movs	r3, #0
1a000b58:	4a0e      	ldr	r2, [pc, #56]	; (1a000b94 <servicioDeKeyBrd+0x410>)
1a000b5a:	7013      	strb	r3, [r2, #0]
							   nDeDecimales = 0;
1a000b5c:	4a0e      	ldr	r2, [pc, #56]	; (1a000b98 <servicioDeKeyBrd+0x414>)
1a000b5e:	7013      	strb	r3, [r2, #0]
							   bOperacionSeteada = FALSE;
1a000b60:	4a0e      	ldr	r2, [pc, #56]	; (1a000b9c <servicioDeKeyBrd+0x418>)
1a000b62:	7013      	strb	r3, [r2, #0]
							   bGrabarYEjecutar  = FALSE;
1a000b64:	4a0a      	ldr	r2, [pc, #40]	; (1a000b90 <servicioDeKeyBrd+0x40c>)
1a000b66:	7013      	strb	r3, [r2, #0]
							   bPrimerKeyPulsada = FALSE;
1a000b68:	4a10      	ldr	r2, [pc, #64]	; (1a000bac <servicioDeKeyBrd+0x428>)
1a000b6a:	7013      	strb	r3, [r2, #0]
							   nDeOperacion = 1;
1a000b6c:	4b05      	ldr	r3, [pc, #20]	; (1a000b84 <servicioDeKeyBrd+0x400>)
1a000b6e:	2201      	movs	r2, #1
1a000b70:	701a      	strb	r2, [r3, #0]

		//					   caratula_LCD();
		//					   clear();
		//					   setCursor( 1, 0 );
		//					   print_LCD2( "Wire Bending Machine;" );
							   printf ( "\nWire Bending Machine\n" );
1a000b72:	480f      	ldr	r0, [pc, #60]	; (1a000bb0 <servicioDeKeyBrd+0x42c>)
1a000b74:	f004 f9ce 	bl	1a004f14 <puts>
		//					   setCursor( 2, 0 );
		//					   print_LCD2( " Zacharewicz Tools;" );
							   printf ( " Zacharewicz Tools\n" );
1a000b78:	480e      	ldr	r0, [pc, #56]	; (1a000bb4 <servicioDeKeyBrd+0x430>)
1a000b7a:	f004 f9cb 	bl	1a004f14 <puts>
		//					   setCursor( 3, 0 );

							   //setupMOTORS_WBM();
							   cleanInstrucciones();
1a000b7e:	f7ff fc85 	bl	1a00048c <cleanInstrucciones>

						   break;
1a000b82:	e622      	b.n	1a0007ca <servicioDeKeyBrd+0x46>
1a000b84:	10000001 	.word	0x10000001
1a000b88:	100001a4 	.word	0x100001a4
1a000b8c:	100001ad 	.word	0x100001ad
1a000b90:	100001a8 	.word	0x100001a8
1a000b94:	100001ab 	.word	0x100001ab
1a000b98:	100001ac 	.word	0x100001ac
1a000b9c:	100001a9 	.word	0x100001a9
1a000ba0:	1a005a20 	.word	0x1a005a20
1a000ba4:	10002c3c 	.word	0x10002c3c
1a000ba8:	10002c40 	.word	0x10002c40
1a000bac:	100001aa 	.word	0x100001aa
1a000bb0:	1a005a34 	.word	0x1a005a34
1a000bb4:	1a005a4c 	.word	0x1a005a4c

1a000bb8 <initialise_monitor_handles>:
}
1a000bb8:	4770      	bx	lr
1a000bba:	Address 0x000000001a000bba is out of bounds.


1a000bbc <Reset_Handler>:
void Reset_Handler(void) {
1a000bbc:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000bbe:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000bc0:	4b19      	ldr	r3, [pc, #100]	; (1a000c28 <Reset_Handler+0x6c>)
1a000bc2:	4a1a      	ldr	r2, [pc, #104]	; (1a000c2c <Reset_Handler+0x70>)
1a000bc4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000bc6:	3304      	adds	r3, #4
1a000bc8:	4a19      	ldr	r2, [pc, #100]	; (1a000c30 <Reset_Handler+0x74>)
1a000bca:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000bcc:	2300      	movs	r3, #0
1a000bce:	e005      	b.n	1a000bdc <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000bd0:	4a18      	ldr	r2, [pc, #96]	; (1a000c34 <Reset_Handler+0x78>)
1a000bd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000bd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000bda:	3301      	adds	r3, #1
1a000bdc:	2b07      	cmp	r3, #7
1a000bde:	d9f7      	bls.n	1a000bd0 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000be0:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000be2:	4b15      	ldr	r3, [pc, #84]	; (1a000c38 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000be4:	e007      	b.n	1a000bf6 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000be6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000bea:	689a      	ldr	r2, [r3, #8]
1a000bec:	6859      	ldr	r1, [r3, #4]
1a000bee:	6818      	ldr	r0, [r3, #0]
1a000bf0:	f7ff facb 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000bf4:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000bf6:	4a11      	ldr	r2, [pc, #68]	; (1a000c3c <Reset_Handler+0x80>)
1a000bf8:	4293      	cmp	r3, r2
1a000bfa:	d3f4      	bcc.n	1a000be6 <Reset_Handler+0x2a>
1a000bfc:	e006      	b.n	1a000c0c <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000bfe:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000c00:	6859      	ldr	r1, [r3, #4]
1a000c02:	f854 0b08 	ldr.w	r0, [r4], #8
1a000c06:	f7ff facf 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000c0a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000c0c:	4a0c      	ldr	r2, [pc, #48]	; (1a000c40 <Reset_Handler+0x84>)
1a000c0e:	4293      	cmp	r3, r2
1a000c10:	d3f5      	bcc.n	1a000bfe <Reset_Handler+0x42>
    SystemInit();
1a000c12:	f002 fe7b 	bl	1a00390c <SystemInit>
    __libc_init_array();
1a000c16:	f004 f815 	bl	1a004c44 <__libc_init_array>
    initialise_monitor_handles();
1a000c1a:	f7ff ffcd 	bl	1a000bb8 <initialise_monitor_handles>
    main();
1a000c1e:	f7ff fd11 	bl	1a000644 <main>
        __asm__ volatile("wfi");
1a000c22:	bf30      	wfi
1a000c24:	e7fd      	b.n	1a000c22 <Reset_Handler+0x66>
1a000c26:	bf00      	nop
1a000c28:	40053100 	.word	0x40053100
1a000c2c:	10df1000 	.word	0x10df1000
1a000c30:	01dff7ff 	.word	0x01dff7ff
1a000c34:	e000e280 	.word	0xe000e280
1a000c38:	1a000114 	.word	0x1a000114
1a000c3c:	1a000150 	.word	0x1a000150
1a000c40:	1a000178 	.word	0x1a000178

1a000c44 <_fini>:
void _fini(void) {}
1a000c44:	4770      	bx	lr

1a000c46 <_init>:
void _init(void) {}
1a000c46:	4770      	bx	lr

1a000c48 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000c48:	2309      	movs	r3, #9
1a000c4a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c50:	4770      	bx	lr

1a000c52 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000c52:	2358      	movs	r3, #88	; 0x58
1a000c54:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c5a:	4770      	bx	lr

1a000c5c <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000c5c:	2902      	cmp	r1, #2
1a000c5e:	d801      	bhi.n	1a000c64 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000c60:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000c62:	4770      	bx	lr
       SET_ERR(EBADF);
1a000c64:	2309      	movs	r3, #9
1a000c66:	6003      	str	r3, [r0, #0]
       return -1;
1a000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c6c:	4770      	bx	lr

1a000c6e <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000c6e:	2358      	movs	r3, #88	; 0x58
1a000c70:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c76:	4770      	bx	lr

1a000c78 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000c78:	2902      	cmp	r1, #2
1a000c7a:	d81f      	bhi.n	1a000cbc <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000c80:	461d      	mov	r5, r3
1a000c82:	4617      	mov	r7, r2
1a000c84:	4606      	mov	r6, r0
  size_t i = 0;
1a000c86:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000c88:	42ac      	cmp	r4, r5
1a000c8a:	d211      	bcs.n	1a000cb0 <_read_r+0x38>
         int c = __stdio_getchar();
1a000c8c:	f002 f8af 	bl	1a002dee <__stdio_getchar>
         if( c != -1 ){
1a000c90:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000c94:	d0f8      	beq.n	1a000c88 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000c96:	f104 0801 	add.w	r8, r4, #1
1a000c9a:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000c9c:	280d      	cmp	r0, #13
1a000c9e:	d003      	beq.n	1a000ca8 <_read_r+0x30>
1a000ca0:	280a      	cmp	r0, #10
1a000ca2:	d001      	beq.n	1a000ca8 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000ca4:	4644      	mov	r4, r8
1a000ca6:	e7ef      	b.n	1a000c88 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000ca8:	f002 f8a1 	bl	1a002dee <__stdio_getchar>
               return i;
1a000cac:	4640      	mov	r0, r8
1a000cae:	e003      	b.n	1a000cb8 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000cb0:	2313      	movs	r3, #19
1a000cb2:	6033      	str	r3, [r6, #0]
      return -1;
1a000cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000cbc:	2313      	movs	r3, #19
1a000cbe:	6003      	str	r3, [r0, #0]
      return -1;
1a000cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000cc4:	4770      	bx	lr

1a000cc6 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000cc6:	2902      	cmp	r1, #2
1a000cc8:	d80c      	bhi.n	1a000ce4 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000cca:	b570      	push	{r4, r5, r6, lr}
1a000ccc:	461d      	mov	r5, r3
1a000cce:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000cd0:	2400      	movs	r4, #0
1a000cd2:	e003      	b.n	1a000cdc <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000cd4:	5d30      	ldrb	r0, [r6, r4]
1a000cd6:	f002 f885 	bl	1a002de4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000cda:	3401      	adds	r4, #1
1a000cdc:	42ac      	cmp	r4, r5
1a000cde:	d3f9      	bcc.n	1a000cd4 <_write_r+0xe>
       return n;
1a000ce0:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000ce2:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000ce4:	2313      	movs	r3, #19
1a000ce6:	6003      	str	r3, [r0, #0]
       return -1;
1a000ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000cec:	4770      	bx	lr
1a000cee:	Address 0x000000001a000cee is out of bounds.


1a000cf0 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000cf0:	4b05      	ldr	r3, [pc, #20]	; (1a000d08 <_sbrk_r+0x18>)
1a000cf2:	681b      	ldr	r3, [r3, #0]
1a000cf4:	b123      	cbz	r3, 1a000d00 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000cf6:	4b04      	ldr	r3, [pc, #16]	; (1a000d08 <_sbrk_r+0x18>)
1a000cf8:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000cfa:	4401      	add	r1, r0
1a000cfc:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000cfe:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000d00:	4b01      	ldr	r3, [pc, #4]	; (1a000d08 <_sbrk_r+0x18>)
1a000d02:	4a02      	ldr	r2, [pc, #8]	; (1a000d0c <_sbrk_r+0x1c>)
1a000d04:	601a      	str	r2, [r3, #0]
1a000d06:	e7f6      	b.n	1a000cf6 <_sbrk_r+0x6>
1a000d08:	100001b0 	.word	0x100001b0
1a000d0c:	10002c94 	.word	0x10002c94

1a000d10 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000d10:	b538      	push	{r3, r4, r5, lr}
1a000d12:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000d14:	f010 0f07 	tst.w	r0, #7
1a000d18:	d002      	beq.n	1a000d20 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000d1a:	f020 0407 	bic.w	r4, r0, #7
1a000d1e:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000d20:	f000 ff68 	bl	1a001bf4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000d24:	4b13      	ldr	r3, [pc, #76]	; (1a000d74 <pvPortMalloc+0x64>)
1a000d26:	681b      	ldr	r3, [r3, #0]
1a000d28:	b17b      	cbz	r3, 1a000d4a <pvPortMalloc+0x3a>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000d2a:	4b13      	ldr	r3, [pc, #76]	; (1a000d78 <pvPortMalloc+0x68>)
1a000d2c:	681b      	ldr	r3, [r3, #0]
1a000d2e:	441c      	add	r4, r3
1a000d30:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000d34:	4294      	cmp	r4, r2
1a000d36:	d80e      	bhi.n	1a000d56 <pvPortMalloc+0x46>
1a000d38:	42a3      	cmp	r3, r4
1a000d3a:	d310      	bcc.n	1a000d5e <pvPortMalloc+0x4e>
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000d3c:	f000 fff4 	bl	1a001d28 <xTaskResumeAll>
void *pvReturn = NULL;
1a000d40:	2500      	movs	r5, #0
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000d42:	f000 fd14 	bl	1a00176e <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000d46:	4628      	mov	r0, r5
1a000d48:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000d4a:	4b0c      	ldr	r3, [pc, #48]	; (1a000d7c <pvPortMalloc+0x6c>)
1a000d4c:	f023 0307 	bic.w	r3, r3, #7
1a000d50:	4a08      	ldr	r2, [pc, #32]	; (1a000d74 <pvPortMalloc+0x64>)
1a000d52:	6013      	str	r3, [r2, #0]
1a000d54:	e7e9      	b.n	1a000d2a <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
1a000d56:	f000 ffe7 	bl	1a001d28 <xTaskResumeAll>
void *pvReturn = NULL;
1a000d5a:	2500      	movs	r5, #0
1a000d5c:	e7f1      	b.n	1a000d42 <pvPortMalloc+0x32>
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000d5e:	4a05      	ldr	r2, [pc, #20]	; (1a000d74 <pvPortMalloc+0x64>)
1a000d60:	6815      	ldr	r5, [r2, #0]
1a000d62:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000d64:	4b04      	ldr	r3, [pc, #16]	; (1a000d78 <pvPortMalloc+0x68>)
1a000d66:	601c      	str	r4, [r3, #0]
	( void ) xTaskResumeAll();
1a000d68:	f000 ffde 	bl	1a001d28 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000d6c:	2d00      	cmp	r5, #0
1a000d6e:	d1ea      	bne.n	1a000d46 <pvPortMalloc+0x36>
1a000d70:	e7e7      	b.n	1a000d42 <pvPortMalloc+0x32>
1a000d72:	bf00      	nop
1a000d74:	100001b4 	.word	0x100001b4
1a000d78:	100021b8 	.word	0x100021b8
1a000d7c:	100001c0 	.word	0x100001c0

1a000d80 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000d80:	b140      	cbz	r0, 1a000d94 <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000d82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d86:	f383 8811 	msr	BASEPRI, r3
1a000d8a:	f3bf 8f6f 	isb	sy
1a000d8e:	f3bf 8f4f 	dsb	sy
1a000d92:	e7fe      	b.n	1a000d92 <vPortFree+0x12>
}
1a000d94:	4770      	bx	lr

1a000d96 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000d96:	6a43      	ldr	r3, [r0, #36]	; 0x24
1a000d98:	b123      	cbz	r3, 1a000da4 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a000d9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000d9c:	6818      	ldr	r0, [r3, #0]
1a000d9e:	f1c0 0007 	rsb	r0, r0, #7
1a000da2:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
1a000da4:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a000da6:	4770      	bx	lr

1a000da8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000da8:	b510      	push	{r4, lr}
1a000daa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000dac:	f001 fdda 	bl	1a002964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000db0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000db2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000db4:	429a      	cmp	r2, r3
1a000db6:	d004      	beq.n	1a000dc2 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a000db8:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000dba:	f001 fdf5 	bl	1a0029a8 <vPortExitCritical>

	return xReturn;
}
1a000dbe:	4620      	mov	r0, r4
1a000dc0:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000dc2:	2401      	movs	r4, #1
1a000dc4:	e7f9      	b.n	1a000dba <prvIsQueueFull+0x12>

1a000dc6 <prvIsQueueEmpty>:
{
1a000dc6:	b510      	push	{r4, lr}
1a000dc8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a000dca:	f001 fdcb 	bl	1a002964 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000dd0:	b123      	cbz	r3, 1a000ddc <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a000dd2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a000dd4:	f001 fde8 	bl	1a0029a8 <vPortExitCritical>
}
1a000dd8:	4620      	mov	r0, r4
1a000dda:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a000ddc:	2401      	movs	r4, #1
1a000dde:	e7f9      	b.n	1a000dd4 <prvIsQueueEmpty+0xe>

1a000de0 <prvCopyDataToQueue>:
{
1a000de0:	b570      	push	{r4, r5, r6, lr}
1a000de2:	4604      	mov	r4, r0
1a000de4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000de6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000de8:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000dea:	b95a      	cbnz	r2, 1a000e04 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000dec:	6803      	ldr	r3, [r0, #0]
1a000dee:	b11b      	cbz	r3, 1a000df8 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a000df0:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000df2:	3501      	adds	r5, #1
1a000df4:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a000df6:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000df8:	6840      	ldr	r0, [r0, #4]
1a000dfa:	f001 fa23 	bl	1a002244 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000dfe:	2300      	movs	r3, #0
1a000e00:	6063      	str	r3, [r4, #4]
1a000e02:	e7f6      	b.n	1a000df2 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000e04:	b96e      	cbnz	r6, 1a000e22 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000e06:	6880      	ldr	r0, [r0, #8]
1a000e08:	f003 ff40 	bl	1a004c8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000e0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000e0e:	68a3      	ldr	r3, [r4, #8]
1a000e10:	4413      	add	r3, r2
1a000e12:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000e14:	6862      	ldr	r2, [r4, #4]
1a000e16:	4293      	cmp	r3, r2
1a000e18:	d319      	bcc.n	1a000e4e <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000e1a:	6823      	ldr	r3, [r4, #0]
1a000e1c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a000e1e:	2000      	movs	r0, #0
1a000e20:	e7e7      	b.n	1a000df2 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000e22:	68c0      	ldr	r0, [r0, #12]
1a000e24:	f003 ff32 	bl	1a004c8c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000e28:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000e2a:	4252      	negs	r2, r2
1a000e2c:	68e3      	ldr	r3, [r4, #12]
1a000e2e:	4413      	add	r3, r2
1a000e30:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000e32:	6821      	ldr	r1, [r4, #0]
1a000e34:	428b      	cmp	r3, r1
1a000e36:	d202      	bcs.n	1a000e3e <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000e38:	6863      	ldr	r3, [r4, #4]
1a000e3a:	441a      	add	r2, r3
1a000e3c:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a000e3e:	2e02      	cmp	r6, #2
1a000e40:	d001      	beq.n	1a000e46 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a000e42:	2000      	movs	r0, #0
1a000e44:	e7d5      	b.n	1a000df2 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000e46:	b125      	cbz	r5, 1a000e52 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000e48:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a000e4a:	2000      	movs	r0, #0
1a000e4c:	e7d1      	b.n	1a000df2 <prvCopyDataToQueue+0x12>
1a000e4e:	2000      	movs	r0, #0
1a000e50:	e7cf      	b.n	1a000df2 <prvCopyDataToQueue+0x12>
1a000e52:	2000      	movs	r0, #0
1a000e54:	e7cd      	b.n	1a000df2 <prvCopyDataToQueue+0x12>

1a000e56 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000e56:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000e58:	b172      	cbz	r2, 1a000e78 <prvCopyDataFromQueue+0x22>
{
1a000e5a:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000e5c:	68c3      	ldr	r3, [r0, #12]
1a000e5e:	4413      	add	r3, r2
1a000e60:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000e62:	6844      	ldr	r4, [r0, #4]
1a000e64:	42a3      	cmp	r3, r4
1a000e66:	d301      	bcc.n	1a000e6c <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000e68:	6803      	ldr	r3, [r0, #0]
1a000e6a:	60c3      	str	r3, [r0, #12]
1a000e6c:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000e6e:	68c1      	ldr	r1, [r0, #12]
1a000e70:	4620      	mov	r0, r4
1a000e72:	f003 ff0b 	bl	1a004c8c <memcpy>
}
1a000e76:	bd10      	pop	{r4, pc}
1a000e78:	4770      	bx	lr

1a000e7a <prvUnlockQueue>:
{
1a000e7a:	b538      	push	{r3, r4, r5, lr}
1a000e7c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a000e7e:	f001 fd71 	bl	1a002964 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a000e82:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000e86:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000e88:	e003      	b.n	1a000e92 <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000e8a:	f001 f969 	bl	1a002160 <vTaskMissedYield>
			--cTxLock;
1a000e8e:	3c01      	subs	r4, #1
1a000e90:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000e92:	2c00      	cmp	r4, #0
1a000e94:	dd08      	ble.n	1a000ea8 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000e96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000e98:	b133      	cbz	r3, 1a000ea8 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000e9a:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000e9e:	f001 f8cd 	bl	1a00203c <xTaskRemoveFromEventList>
1a000ea2:	2800      	cmp	r0, #0
1a000ea4:	d0f3      	beq.n	1a000e8e <prvUnlockQueue+0x14>
1a000ea6:	e7f0      	b.n	1a000e8a <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a000ea8:	23ff      	movs	r3, #255	; 0xff
1a000eaa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a000eae:	f001 fd7b 	bl	1a0029a8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a000eb2:	f001 fd57 	bl	1a002964 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a000eb6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000eba:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000ebc:	e003      	b.n	1a000ec6 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a000ebe:	f001 f94f 	bl	1a002160 <vTaskMissedYield>
				--cRxLock;
1a000ec2:	3c01      	subs	r4, #1
1a000ec4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000ec6:	2c00      	cmp	r4, #0
1a000ec8:	dd08      	ble.n	1a000edc <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000eca:	692b      	ldr	r3, [r5, #16]
1a000ecc:	b133      	cbz	r3, 1a000edc <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000ece:	f105 0010 	add.w	r0, r5, #16
1a000ed2:	f001 f8b3 	bl	1a00203c <xTaskRemoveFromEventList>
1a000ed6:	2800      	cmp	r0, #0
1a000ed8:	d0f3      	beq.n	1a000ec2 <prvUnlockQueue+0x48>
1a000eda:	e7f0      	b.n	1a000ebe <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a000edc:	23ff      	movs	r3, #255	; 0xff
1a000ede:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a000ee2:	f001 fd61 	bl	1a0029a8 <vPortExitCritical>
}
1a000ee6:	bd38      	pop	{r3, r4, r5, pc}

1a000ee8 <xQueueGenericReset>:
{
1a000ee8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a000eea:	b940      	cbnz	r0, 1a000efe <xQueueGenericReset+0x16>
1a000eec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ef0:	f383 8811 	msr	BASEPRI, r3
1a000ef4:	f3bf 8f6f 	isb	sy
1a000ef8:	f3bf 8f4f 	dsb	sy
1a000efc:	e7fe      	b.n	1a000efc <xQueueGenericReset+0x14>
1a000efe:	4604      	mov	r4, r0
1a000f00:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a000f02:	f001 fd2f 	bl	1a002964 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000f06:	6821      	ldr	r1, [r4, #0]
1a000f08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000f0c:	fb03 1002 	mla	r0, r3, r2, r1
1a000f10:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000f12:	2000      	movs	r0, #0
1a000f14:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000f16:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000f18:	3a01      	subs	r2, #1
1a000f1a:	fb02 1303 	mla	r3, r2, r3, r1
1a000f1e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000f20:	23ff      	movs	r3, #255	; 0xff
1a000f22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000f2a:	b9a5      	cbnz	r5, 1a000f56 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000f2c:	6923      	ldr	r3, [r4, #16]
1a000f2e:	b91b      	cbnz	r3, 1a000f38 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a000f30:	f001 fd3a 	bl	1a0029a8 <vPortExitCritical>
}
1a000f34:	2001      	movs	r0, #1
1a000f36:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000f38:	f104 0010 	add.w	r0, r4, #16
1a000f3c:	f001 f87e 	bl	1a00203c <xTaskRemoveFromEventList>
1a000f40:	2800      	cmp	r0, #0
1a000f42:	d0f5      	beq.n	1a000f30 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a000f44:	4b08      	ldr	r3, [pc, #32]	; (1a000f68 <xQueueGenericReset+0x80>)
1a000f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f4a:	601a      	str	r2, [r3, #0]
1a000f4c:	f3bf 8f4f 	dsb	sy
1a000f50:	f3bf 8f6f 	isb	sy
1a000f54:	e7ec      	b.n	1a000f30 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000f56:	f104 0010 	add.w	r0, r4, #16
1a000f5a:	f000 fba6 	bl	1a0016aa <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000f5e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f62:	f000 fba2 	bl	1a0016aa <vListInitialise>
1a000f66:	e7e3      	b.n	1a000f30 <xQueueGenericReset+0x48>
1a000f68:	e000ed04 	.word	0xe000ed04

1a000f6c <prvInitialiseNewQueue>:
{
1a000f6c:	b538      	push	{r3, r4, r5, lr}
1a000f6e:	461d      	mov	r5, r3
1a000f70:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a000f72:	460b      	mov	r3, r1
1a000f74:	b149      	cbz	r1, 1a000f8a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000f76:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000f78:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000f7a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000f7c:	2101      	movs	r1, #1
1a000f7e:	4620      	mov	r0, r4
1a000f80:	f7ff ffb2 	bl	1a000ee8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000f84:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000f88:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000f8a:	6024      	str	r4, [r4, #0]
1a000f8c:	e7f4      	b.n	1a000f78 <prvInitialiseNewQueue+0xc>

1a000f8e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000f8e:	b940      	cbnz	r0, 1a000fa2 <xQueueGenericCreateStatic+0x14>
1a000f90:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f94:	f383 8811 	msr	BASEPRI, r3
1a000f98:	f3bf 8f6f 	isb	sy
1a000f9c:	f3bf 8f4f 	dsb	sy
1a000fa0:	e7fe      	b.n	1a000fa0 <xQueueGenericCreateStatic+0x12>
	{
1a000fa2:	b510      	push	{r4, lr}
1a000fa4:	b084      	sub	sp, #16
1a000fa6:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a000fa8:	b153      	cbz	r3, 1a000fc0 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000faa:	b192      	cbz	r2, 1a000fd2 <xQueueGenericCreateStatic+0x44>
1a000fac:	b989      	cbnz	r1, 1a000fd2 <xQueueGenericCreateStatic+0x44>
1a000fae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fb2:	f383 8811 	msr	BASEPRI, r3
1a000fb6:	f3bf 8f6f 	isb	sy
1a000fba:	f3bf 8f4f 	dsb	sy
1a000fbe:	e7fe      	b.n	1a000fbe <xQueueGenericCreateStatic+0x30>
1a000fc0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fc4:	f383 8811 	msr	BASEPRI, r3
1a000fc8:	f3bf 8f6f 	isb	sy
1a000fcc:	f3bf 8f4f 	dsb	sy
1a000fd0:	e7fe      	b.n	1a000fd0 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000fd2:	b94a      	cbnz	r2, 1a000fe8 <xQueueGenericCreateStatic+0x5a>
1a000fd4:	b141      	cbz	r1, 1a000fe8 <xQueueGenericCreateStatic+0x5a>
1a000fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fda:	f383 8811 	msr	BASEPRI, r3
1a000fde:	f3bf 8f6f 	isb	sy
1a000fe2:	f3bf 8f4f 	dsb	sy
1a000fe6:	e7fe      	b.n	1a000fe6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000fe8:	2050      	movs	r0, #80	; 0x50
1a000fea:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000fec:	9803      	ldr	r0, [sp, #12]
1a000fee:	2850      	cmp	r0, #80	; 0x50
1a000ff0:	d008      	beq.n	1a001004 <xQueueGenericCreateStatic+0x76>
1a000ff2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ff6:	f383 8811 	msr	BASEPRI, r3
1a000ffa:	f3bf 8f6f 	isb	sy
1a000ffe:	f3bf 8f4f 	dsb	sy
1a001002:	e7fe      	b.n	1a001002 <xQueueGenericCreateStatic+0x74>
1a001004:	4620      	mov	r0, r4
1a001006:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a001008:	2301      	movs	r3, #1
1a00100a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00100e:	9400      	str	r4, [sp, #0]
1a001010:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001014:	f7ff ffaa 	bl	1a000f6c <prvInitialiseNewQueue>
	}
1a001018:	4620      	mov	r0, r4
1a00101a:	b004      	add	sp, #16
1a00101c:	bd10      	pop	{r4, pc}

1a00101e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00101e:	b940      	cbnz	r0, 1a001032 <xQueueGenericCreate+0x14>
1a001020:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001024:	f383 8811 	msr	BASEPRI, r3
1a001028:	f3bf 8f6f 	isb	sy
1a00102c:	f3bf 8f4f 	dsb	sy
1a001030:	e7fe      	b.n	1a001030 <xQueueGenericCreate+0x12>
	{
1a001032:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001034:	b083      	sub	sp, #12
1a001036:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001038:	b111      	cbz	r1, 1a001040 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00103a:	fb01 f000 	mul.w	r0, r1, r0
1a00103e:	e000      	b.n	1a001042 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a001040:	2000      	movs	r0, #0
1a001042:	4617      	mov	r7, r2
1a001044:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001046:	3050      	adds	r0, #80	; 0x50
1a001048:	f7ff fe62 	bl	1a000d10 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a00104c:	4605      	mov	r5, r0
1a00104e:	b150      	cbz	r0, 1a001066 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001050:	2300      	movs	r3, #0
1a001052:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001056:	9000      	str	r0, [sp, #0]
1a001058:	463b      	mov	r3, r7
1a00105a:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00105e:	4621      	mov	r1, r4
1a001060:	4630      	mov	r0, r6
1a001062:	f7ff ff83 	bl	1a000f6c <prvInitialiseNewQueue>
	}
1a001066:	4628      	mov	r0, r5
1a001068:	b003      	add	sp, #12
1a00106a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a00106c <xQueueGenericSend>:
{
1a00106c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00106e:	b085      	sub	sp, #20
1a001070:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a001072:	b160      	cbz	r0, 1a00108e <xQueueGenericSend+0x22>
1a001074:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001076:	b999      	cbnz	r1, 1a0010a0 <xQueueGenericSend+0x34>
1a001078:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a00107a:	b18a      	cbz	r2, 1a0010a0 <xQueueGenericSend+0x34>
1a00107c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001080:	f383 8811 	msr	BASEPRI, r3
1a001084:	f3bf 8f6f 	isb	sy
1a001088:	f3bf 8f4f 	dsb	sy
1a00108c:	e7fe      	b.n	1a00108c <xQueueGenericSend+0x20>
1a00108e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001092:	f383 8811 	msr	BASEPRI, r3
1a001096:	f3bf 8f6f 	isb	sy
1a00109a:	f3bf 8f4f 	dsb	sy
1a00109e:	e7fe      	b.n	1a00109e <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0010a0:	2b02      	cmp	r3, #2
1a0010a2:	d10b      	bne.n	1a0010bc <xQueueGenericSend+0x50>
1a0010a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0010a6:	2a01      	cmp	r2, #1
1a0010a8:	d008      	beq.n	1a0010bc <xQueueGenericSend+0x50>
1a0010aa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010ae:	f383 8811 	msr	BASEPRI, r3
1a0010b2:	f3bf 8f6f 	isb	sy
1a0010b6:	f3bf 8f4f 	dsb	sy
1a0010ba:	e7fe      	b.n	1a0010ba <xQueueGenericSend+0x4e>
1a0010bc:	461e      	mov	r6, r3
1a0010be:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0010c0:	f001 f854 	bl	1a00216c <xTaskGetSchedulerState>
1a0010c4:	b950      	cbnz	r0, 1a0010dc <xQueueGenericSend+0x70>
1a0010c6:	9b01      	ldr	r3, [sp, #4]
1a0010c8:	b153      	cbz	r3, 1a0010e0 <xQueueGenericSend+0x74>
1a0010ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010ce:	f383 8811 	msr	BASEPRI, r3
1a0010d2:	f3bf 8f6f 	isb	sy
1a0010d6:	f3bf 8f4f 	dsb	sy
1a0010da:	e7fe      	b.n	1a0010da <xQueueGenericSend+0x6e>
1a0010dc:	2500      	movs	r5, #0
1a0010de:	e03a      	b.n	1a001156 <xQueueGenericSend+0xea>
1a0010e0:	2500      	movs	r5, #0
1a0010e2:	e038      	b.n	1a001156 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0010e4:	4632      	mov	r2, r6
1a0010e6:	4639      	mov	r1, r7
1a0010e8:	4620      	mov	r0, r4
1a0010ea:	f7ff fe79 	bl	1a000de0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0010ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0010f0:	b94b      	cbnz	r3, 1a001106 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0010f2:	b1a8      	cbz	r0, 1a001120 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0010f4:	4b3b      	ldr	r3, [pc, #236]	; (1a0011e4 <xQueueGenericSend+0x178>)
1a0010f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0010fa:	601a      	str	r2, [r3, #0]
1a0010fc:	f3bf 8f4f 	dsb	sy
1a001100:	f3bf 8f6f 	isb	sy
1a001104:	e00c      	b.n	1a001120 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001106:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00110a:	f000 ff97 	bl	1a00203c <xTaskRemoveFromEventList>
1a00110e:	b138      	cbz	r0, 1a001120 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a001110:	4b34      	ldr	r3, [pc, #208]	; (1a0011e4 <xQueueGenericSend+0x178>)
1a001112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001116:	601a      	str	r2, [r3, #0]
1a001118:	f3bf 8f4f 	dsb	sy
1a00111c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a001120:	f001 fc42 	bl	1a0029a8 <vPortExitCritical>
				return pdPASS;
1a001124:	2001      	movs	r0, #1
}
1a001126:	b005      	add	sp, #20
1a001128:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a00112a:	f001 fc3d 	bl	1a0029a8 <vPortExitCritical>
					return errQUEUE_FULL;
1a00112e:	2000      	movs	r0, #0
1a001130:	e7f9      	b.n	1a001126 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a001132:	a802      	add	r0, sp, #8
1a001134:	f000 ffc8 	bl	1a0020c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001138:	2501      	movs	r5, #1
1a00113a:	e019      	b.n	1a001170 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a00113c:	2300      	movs	r3, #0
1a00113e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001142:	e021      	b.n	1a001188 <xQueueGenericSend+0x11c>
1a001144:	2300      	movs	r3, #0
1a001146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00114a:	e023      	b.n	1a001194 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a00114c:	4620      	mov	r0, r4
1a00114e:	f7ff fe94 	bl	1a000e7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a001152:	f000 fde9 	bl	1a001d28 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001156:	f001 fc05 	bl	1a002964 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00115a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00115c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00115e:	429a      	cmp	r2, r3
1a001160:	d3c0      	bcc.n	1a0010e4 <xQueueGenericSend+0x78>
1a001162:	2e02      	cmp	r6, #2
1a001164:	d0be      	beq.n	1a0010e4 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a001166:	9b01      	ldr	r3, [sp, #4]
1a001168:	2b00      	cmp	r3, #0
1a00116a:	d0de      	beq.n	1a00112a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a00116c:	2d00      	cmp	r5, #0
1a00116e:	d0e0      	beq.n	1a001132 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a001170:	f001 fc1a 	bl	1a0029a8 <vPortExitCritical>
		vTaskSuspendAll();
1a001174:	f000 fd3e 	bl	1a001bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001178:	f001 fbf4 	bl	1a002964 <vPortEnterCritical>
1a00117c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001180:	b25b      	sxtb	r3, r3
1a001182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001186:	d0d9      	beq.n	1a00113c <xQueueGenericSend+0xd0>
1a001188:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00118c:	b25b      	sxtb	r3, r3
1a00118e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001192:	d0d7      	beq.n	1a001144 <xQueueGenericSend+0xd8>
1a001194:	f001 fc08 	bl	1a0029a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001198:	a901      	add	r1, sp, #4
1a00119a:	a802      	add	r0, sp, #8
1a00119c:	f000 ffa0 	bl	1a0020e0 <xTaskCheckForTimeOut>
1a0011a0:	b9c8      	cbnz	r0, 1a0011d6 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0011a2:	4620      	mov	r0, r4
1a0011a4:	f7ff fe00 	bl	1a000da8 <prvIsQueueFull>
1a0011a8:	2800      	cmp	r0, #0
1a0011aa:	d0cf      	beq.n	1a00114c <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0011ac:	9901      	ldr	r1, [sp, #4]
1a0011ae:	f104 0010 	add.w	r0, r4, #16
1a0011b2:	f000 ff0f 	bl	1a001fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0011b6:	4620      	mov	r0, r4
1a0011b8:	f7ff fe5f 	bl	1a000e7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0011bc:	f000 fdb4 	bl	1a001d28 <xTaskResumeAll>
1a0011c0:	2800      	cmp	r0, #0
1a0011c2:	d1c8      	bne.n	1a001156 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a0011c4:	4b07      	ldr	r3, [pc, #28]	; (1a0011e4 <xQueueGenericSend+0x178>)
1a0011c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011ca:	601a      	str	r2, [r3, #0]
1a0011cc:	f3bf 8f4f 	dsb	sy
1a0011d0:	f3bf 8f6f 	isb	sy
1a0011d4:	e7bf      	b.n	1a001156 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a0011d6:	4620      	mov	r0, r4
1a0011d8:	f7ff fe4f 	bl	1a000e7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0011dc:	f000 fda4 	bl	1a001d28 <xTaskResumeAll>
			return errQUEUE_FULL;
1a0011e0:	2000      	movs	r0, #0
1a0011e2:	e7a0      	b.n	1a001126 <xQueueGenericSend+0xba>
1a0011e4:	e000ed04 	.word	0xe000ed04

1a0011e8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
1a0011e8:	b148      	cbz	r0, 1a0011fe <prvInitialiseMutex+0x16>
	{
1a0011ea:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
1a0011ec:	2100      	movs	r1, #0
1a0011ee:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
1a0011f0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
1a0011f2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
1a0011f4:	460b      	mov	r3, r1
1a0011f6:	460a      	mov	r2, r1
1a0011f8:	f7ff ff38 	bl	1a00106c <xQueueGenericSend>
	}
1a0011fc:	bd08      	pop	{r3, pc}
1a0011fe:	4770      	bx	lr

1a001200 <xQueueCreateMutex>:
	{
1a001200:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
1a001202:	4602      	mov	r2, r0
1a001204:	2100      	movs	r1, #0
1a001206:	2001      	movs	r0, #1
1a001208:	f7ff ff09 	bl	1a00101e <xQueueGenericCreate>
1a00120c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
1a00120e:	f7ff ffeb 	bl	1a0011e8 <prvInitialiseMutex>
	}
1a001212:	4620      	mov	r0, r4
1a001214:	bd10      	pop	{r4, pc}

1a001216 <xQueueGenericSendFromISR>:
{
1a001216:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a00121a:	b160      	cbz	r0, 1a001236 <xQueueGenericSendFromISR+0x20>
1a00121c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00121e:	b999      	cbnz	r1, 1a001248 <xQueueGenericSendFromISR+0x32>
1a001220:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001222:	b188      	cbz	r0, 1a001248 <xQueueGenericSendFromISR+0x32>
1a001224:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001228:	f383 8811 	msr	BASEPRI, r3
1a00122c:	f3bf 8f6f 	isb	sy
1a001230:	f3bf 8f4f 	dsb	sy
1a001234:	e7fe      	b.n	1a001234 <xQueueGenericSendFromISR+0x1e>
1a001236:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00123a:	f383 8811 	msr	BASEPRI, r3
1a00123e:	f3bf 8f6f 	isb	sy
1a001242:	f3bf 8f4f 	dsb	sy
1a001246:	e7fe      	b.n	1a001246 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001248:	2b02      	cmp	r3, #2
1a00124a:	d10b      	bne.n	1a001264 <xQueueGenericSendFromISR+0x4e>
1a00124c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a00124e:	2801      	cmp	r0, #1
1a001250:	d008      	beq.n	1a001264 <xQueueGenericSendFromISR+0x4e>
1a001252:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001256:	f383 8811 	msr	BASEPRI, r3
1a00125a:	f3bf 8f6f 	isb	sy
1a00125e:	f3bf 8f4f 	dsb	sy
1a001262:	e7fe      	b.n	1a001262 <xQueueGenericSendFromISR+0x4c>
1a001264:	461f      	mov	r7, r3
1a001266:	4690      	mov	r8, r2
1a001268:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00126a:	f001 fca5 	bl	1a002bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00126e:	f3ef 8611 	mrs	r6, BASEPRI
1a001272:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001276:	f383 8811 	msr	BASEPRI, r3
1a00127a:	f3bf 8f6f 	isb	sy
1a00127e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001282:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001286:	429a      	cmp	r2, r3
1a001288:	d303      	bcc.n	1a001292 <xQueueGenericSendFromISR+0x7c>
1a00128a:	2f02      	cmp	r7, #2
1a00128c:	d001      	beq.n	1a001292 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a00128e:	2000      	movs	r0, #0
1a001290:	e00f      	b.n	1a0012b2 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a001292:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001296:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001298:	463a      	mov	r2, r7
1a00129a:	4649      	mov	r1, r9
1a00129c:	4620      	mov	r0, r4
1a00129e:	f7ff fd9f 	bl	1a000de0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0012a2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0012a6:	d008      	beq.n	1a0012ba <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0012a8:	1c6b      	adds	r3, r5, #1
1a0012aa:	b25b      	sxtb	r3, r3
1a0012ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0012b0:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0012b2:	f386 8811 	msr	BASEPRI, r6
}
1a0012b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0012ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0012bc:	b15b      	cbz	r3, 1a0012d6 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0012be:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0012c2:	f000 febb 	bl	1a00203c <xTaskRemoveFromEventList>
1a0012c6:	b140      	cbz	r0, 1a0012da <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a0012c8:	f1b8 0f00 	cmp.w	r8, #0
1a0012cc:	d007      	beq.n	1a0012de <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0012ce:	2001      	movs	r0, #1
1a0012d0:	f8c8 0000 	str.w	r0, [r8]
1a0012d4:	e7ed      	b.n	1a0012b2 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0012d6:	2001      	movs	r0, #1
1a0012d8:	e7eb      	b.n	1a0012b2 <xQueueGenericSendFromISR+0x9c>
1a0012da:	2001      	movs	r0, #1
1a0012dc:	e7e9      	b.n	1a0012b2 <xQueueGenericSendFromISR+0x9c>
1a0012de:	2001      	movs	r0, #1
1a0012e0:	e7e7      	b.n	1a0012b2 <xQueueGenericSendFromISR+0x9c>
1a0012e2:	Address 0x000000001a0012e2 is out of bounds.


1a0012e4 <xQueueReceive>:
{
1a0012e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0012e6:	b085      	sub	sp, #20
1a0012e8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0012ea:	b160      	cbz	r0, 1a001306 <xQueueReceive+0x22>
1a0012ec:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0012ee:	b999      	cbnz	r1, 1a001318 <xQueueReceive+0x34>
1a0012f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0012f2:	b18b      	cbz	r3, 1a001318 <xQueueReceive+0x34>
	__asm volatile
1a0012f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012f8:	f383 8811 	msr	BASEPRI, r3
1a0012fc:	f3bf 8f6f 	isb	sy
1a001300:	f3bf 8f4f 	dsb	sy
1a001304:	e7fe      	b.n	1a001304 <xQueueReceive+0x20>
1a001306:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00130a:	f383 8811 	msr	BASEPRI, r3
1a00130e:	f3bf 8f6f 	isb	sy
1a001312:	f3bf 8f4f 	dsb	sy
1a001316:	e7fe      	b.n	1a001316 <xQueueReceive+0x32>
1a001318:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00131a:	f000 ff27 	bl	1a00216c <xTaskGetSchedulerState>
1a00131e:	b950      	cbnz	r0, 1a001336 <xQueueReceive+0x52>
1a001320:	9b01      	ldr	r3, [sp, #4]
1a001322:	b153      	cbz	r3, 1a00133a <xQueueReceive+0x56>
1a001324:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001328:	f383 8811 	msr	BASEPRI, r3
1a00132c:	f3bf 8f6f 	isb	sy
1a001330:	f3bf 8f4f 	dsb	sy
1a001334:	e7fe      	b.n	1a001334 <xQueueReceive+0x50>
1a001336:	2600      	movs	r6, #0
1a001338:	e03e      	b.n	1a0013b8 <xQueueReceive+0xd4>
1a00133a:	2600      	movs	r6, #0
1a00133c:	e03c      	b.n	1a0013b8 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00133e:	4639      	mov	r1, r7
1a001340:	4620      	mov	r0, r4
1a001342:	f7ff fd88 	bl	1a000e56 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001346:	3d01      	subs	r5, #1
1a001348:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a00134a:	6923      	ldr	r3, [r4, #16]
1a00134c:	b923      	cbnz	r3, 1a001358 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a00134e:	f001 fb2b 	bl	1a0029a8 <vPortExitCritical>
				return pdPASS;
1a001352:	2001      	movs	r0, #1
}
1a001354:	b005      	add	sp, #20
1a001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001358:	f104 0010 	add.w	r0, r4, #16
1a00135c:	f000 fe6e 	bl	1a00203c <xTaskRemoveFromEventList>
1a001360:	2800      	cmp	r0, #0
1a001362:	d0f4      	beq.n	1a00134e <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001364:	4b34      	ldr	r3, [pc, #208]	; (1a001438 <xQueueReceive+0x154>)
1a001366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00136a:	601a      	str	r2, [r3, #0]
1a00136c:	f3bf 8f4f 	dsb	sy
1a001370:	f3bf 8f6f 	isb	sy
1a001374:	e7eb      	b.n	1a00134e <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001376:	f001 fb17 	bl	1a0029a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a00137a:	2000      	movs	r0, #0
1a00137c:	e7ea      	b.n	1a001354 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00137e:	a802      	add	r0, sp, #8
1a001380:	f000 fea2 	bl	1a0020c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001384:	2601      	movs	r6, #1
1a001386:	e021      	b.n	1a0013cc <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001388:	2300      	movs	r3, #0
1a00138a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00138e:	e029      	b.n	1a0013e4 <xQueueReceive+0x100>
1a001390:	2300      	movs	r3, #0
1a001392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001396:	e02b      	b.n	1a0013f0 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a001398:	4620      	mov	r0, r4
1a00139a:	f7ff fd6e 	bl	1a000e7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00139e:	f000 fcc3 	bl	1a001d28 <xTaskResumeAll>
1a0013a2:	e009      	b.n	1a0013b8 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0013a4:	4620      	mov	r0, r4
1a0013a6:	f7ff fd68 	bl	1a000e7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0013aa:	f000 fcbd 	bl	1a001d28 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0013ae:	4620      	mov	r0, r4
1a0013b0:	f7ff fd09 	bl	1a000dc6 <prvIsQueueEmpty>
1a0013b4:	2800      	cmp	r0, #0
1a0013b6:	d13d      	bne.n	1a001434 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0013b8:	f001 fad4 	bl	1a002964 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0013bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0013be:	2d00      	cmp	r5, #0
1a0013c0:	d1bd      	bne.n	1a00133e <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0013c2:	9b01      	ldr	r3, [sp, #4]
1a0013c4:	2b00      	cmp	r3, #0
1a0013c6:	d0d6      	beq.n	1a001376 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0013c8:	2e00      	cmp	r6, #0
1a0013ca:	d0d8      	beq.n	1a00137e <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0013cc:	f001 faec 	bl	1a0029a8 <vPortExitCritical>
		vTaskSuspendAll();
1a0013d0:	f000 fc10 	bl	1a001bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0013d4:	f001 fac6 	bl	1a002964 <vPortEnterCritical>
1a0013d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0013dc:	b25b      	sxtb	r3, r3
1a0013de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0013e2:	d0d1      	beq.n	1a001388 <xQueueReceive+0xa4>
1a0013e4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0013e8:	b25b      	sxtb	r3, r3
1a0013ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0013ee:	d0cf      	beq.n	1a001390 <xQueueReceive+0xac>
1a0013f0:	f001 fada 	bl	1a0029a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0013f4:	a901      	add	r1, sp, #4
1a0013f6:	a802      	add	r0, sp, #8
1a0013f8:	f000 fe72 	bl	1a0020e0 <xTaskCheckForTimeOut>
1a0013fc:	2800      	cmp	r0, #0
1a0013fe:	d1d1      	bne.n	1a0013a4 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a001400:	4620      	mov	r0, r4
1a001402:	f7ff fce0 	bl	1a000dc6 <prvIsQueueEmpty>
1a001406:	2800      	cmp	r0, #0
1a001408:	d0c6      	beq.n	1a001398 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00140a:	9901      	ldr	r1, [sp, #4]
1a00140c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001410:	f000 fde0 	bl	1a001fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001414:	4620      	mov	r0, r4
1a001416:	f7ff fd30 	bl	1a000e7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00141a:	f000 fc85 	bl	1a001d28 <xTaskResumeAll>
1a00141e:	2800      	cmp	r0, #0
1a001420:	d1ca      	bne.n	1a0013b8 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a001422:	4b05      	ldr	r3, [pc, #20]	; (1a001438 <xQueueReceive+0x154>)
1a001424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001428:	601a      	str	r2, [r3, #0]
1a00142a:	f3bf 8f4f 	dsb	sy
1a00142e:	f3bf 8f6f 	isb	sy
1a001432:	e7c1      	b.n	1a0013b8 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001434:	2000      	movs	r0, #0
1a001436:	e78d      	b.n	1a001354 <xQueueReceive+0x70>
1a001438:	e000ed04 	.word	0xe000ed04

1a00143c <xQueueSemaphoreTake>:
{
1a00143c:	b570      	push	{r4, r5, r6, lr}
1a00143e:	b084      	sub	sp, #16
1a001440:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a001442:	b940      	cbnz	r0, 1a001456 <xQueueSemaphoreTake+0x1a>
1a001444:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001448:	f383 8811 	msr	BASEPRI, r3
1a00144c:	f3bf 8f6f 	isb	sy
1a001450:	f3bf 8f4f 	dsb	sy
1a001454:	e7fe      	b.n	1a001454 <xQueueSemaphoreTake+0x18>
1a001456:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a001458:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a00145a:	b143      	cbz	r3, 1a00146e <xQueueSemaphoreTake+0x32>
1a00145c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001460:	f383 8811 	msr	BASEPRI, r3
1a001464:	f3bf 8f6f 	isb	sy
1a001468:	f3bf 8f4f 	dsb	sy
1a00146c:	e7fe      	b.n	1a00146c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a00146e:	f000 fe7d 	bl	1a00216c <xTaskGetSchedulerState>
1a001472:	b950      	cbnz	r0, 1a00148a <xQueueSemaphoreTake+0x4e>
1a001474:	9b01      	ldr	r3, [sp, #4]
1a001476:	b15b      	cbz	r3, 1a001490 <xQueueSemaphoreTake+0x54>
1a001478:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00147c:	f383 8811 	msr	BASEPRI, r3
1a001480:	f3bf 8f6f 	isb	sy
1a001484:	f3bf 8f4f 	dsb	sy
1a001488:	e7fe      	b.n	1a001488 <xQueueSemaphoreTake+0x4c>
1a00148a:	2500      	movs	r5, #0
1a00148c:	462e      	mov	r6, r5
1a00148e:	e051      	b.n	1a001534 <xQueueSemaphoreTake+0xf8>
1a001490:	2500      	movs	r5, #0
1a001492:	462e      	mov	r6, r5
1a001494:	e04e      	b.n	1a001534 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a001496:	3b01      	subs	r3, #1
1a001498:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a00149a:	6823      	ldr	r3, [r4, #0]
1a00149c:	b913      	cbnz	r3, 1a0014a4 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a00149e:	f000 ff89 	bl	1a0023b4 <pvTaskIncrementMutexHeldCount>
1a0014a2:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0014a4:	6923      	ldr	r3, [r4, #16]
1a0014a6:	b163      	cbz	r3, 1a0014c2 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0014a8:	f104 0010 	add.w	r0, r4, #16
1a0014ac:	f000 fdc6 	bl	1a00203c <xTaskRemoveFromEventList>
1a0014b0:	b138      	cbz	r0, 1a0014c2 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
1a0014b2:	4b48      	ldr	r3, [pc, #288]	; (1a0015d4 <xQueueSemaphoreTake+0x198>)
1a0014b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0014b8:	601a      	str	r2, [r3, #0]
1a0014ba:	f3bf 8f4f 	dsb	sy
1a0014be:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a0014c2:	f001 fa71 	bl	1a0029a8 <vPortExitCritical>
				return pdPASS;
1a0014c6:	2501      	movs	r5, #1
}
1a0014c8:	4628      	mov	r0, r5
1a0014ca:	b004      	add	sp, #16
1a0014cc:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
1a0014ce:	b145      	cbz	r5, 1a0014e2 <xQueueSemaphoreTake+0xa6>
1a0014d0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014d4:	f383 8811 	msr	BASEPRI, r3
1a0014d8:	f3bf 8f6f 	isb	sy
1a0014dc:	f3bf 8f4f 	dsb	sy
1a0014e0:	e7fe      	b.n	1a0014e0 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
1a0014e2:	f001 fa61 	bl	1a0029a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a0014e6:	e7ef      	b.n	1a0014c8 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a0014e8:	a802      	add	r0, sp, #8
1a0014ea:	f000 fded 	bl	1a0020c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a0014ee:	2601      	movs	r6, #1
1a0014f0:	e02a      	b.n	1a001548 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
1a0014f2:	2300      	movs	r3, #0
1a0014f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0014f8:	e032      	b.n	1a001560 <xQueueSemaphoreTake+0x124>
1a0014fa:	2300      	movs	r3, #0
1a0014fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001500:	e034      	b.n	1a00156c <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
1a001502:	f001 fa2f 	bl	1a002964 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a001506:	6860      	ldr	r0, [r4, #4]
1a001508:	f000 fe40 	bl	1a00218c <xTaskPriorityInherit>
1a00150c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a00150e:	f001 fa4b 	bl	1a0029a8 <vPortExitCritical>
1a001512:	e03b      	b.n	1a00158c <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
1a001514:	4620      	mov	r0, r4
1a001516:	f7ff fcb0 	bl	1a000e7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00151a:	f000 fc05 	bl	1a001d28 <xTaskResumeAll>
1a00151e:	e009      	b.n	1a001534 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
1a001520:	4620      	mov	r0, r4
1a001522:	f7ff fcaa 	bl	1a000e7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001526:	f000 fbff 	bl	1a001d28 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00152a:	4620      	mov	r0, r4
1a00152c:	f7ff fc4b 	bl	1a000dc6 <prvIsQueueEmpty>
1a001530:	2800      	cmp	r0, #0
1a001532:	d140      	bne.n	1a0015b6 <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
1a001534:	f001 fa16 	bl	1a002964 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a001538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a00153a:	2b00      	cmp	r3, #0
1a00153c:	d1ab      	bne.n	1a001496 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00153e:	9b01      	ldr	r3, [sp, #4]
1a001540:	2b00      	cmp	r3, #0
1a001542:	d0c4      	beq.n	1a0014ce <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a001544:	2e00      	cmp	r6, #0
1a001546:	d0cf      	beq.n	1a0014e8 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
1a001548:	f001 fa2e 	bl	1a0029a8 <vPortExitCritical>
		vTaskSuspendAll();
1a00154c:	f000 fb52 	bl	1a001bf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a001550:	f001 fa08 	bl	1a002964 <vPortEnterCritical>
1a001554:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001558:	b25b      	sxtb	r3, r3
1a00155a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00155e:	d0c8      	beq.n	1a0014f2 <xQueueSemaphoreTake+0xb6>
1a001560:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001564:	b25b      	sxtb	r3, r3
1a001566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00156a:	d0c6      	beq.n	1a0014fa <xQueueSemaphoreTake+0xbe>
1a00156c:	f001 fa1c 	bl	1a0029a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001570:	a901      	add	r1, sp, #4
1a001572:	a802      	add	r0, sp, #8
1a001574:	f000 fdb4 	bl	1a0020e0 <xTaskCheckForTimeOut>
1a001578:	2800      	cmp	r0, #0
1a00157a:	d1d1      	bne.n	1a001520 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00157c:	4620      	mov	r0, r4
1a00157e:	f7ff fc22 	bl	1a000dc6 <prvIsQueueEmpty>
1a001582:	2800      	cmp	r0, #0
1a001584:	d0c6      	beq.n	1a001514 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001586:	6823      	ldr	r3, [r4, #0]
1a001588:	2b00      	cmp	r3, #0
1a00158a:	d0ba      	beq.n	1a001502 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a00158c:	9901      	ldr	r1, [sp, #4]
1a00158e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001592:	f000 fd1f 	bl	1a001fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001596:	4620      	mov	r0, r4
1a001598:	f7ff fc6f 	bl	1a000e7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a00159c:	f000 fbc4 	bl	1a001d28 <xTaskResumeAll>
1a0015a0:	2800      	cmp	r0, #0
1a0015a2:	d1c7      	bne.n	1a001534 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
1a0015a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0015d4 <xQueueSemaphoreTake+0x198>)
1a0015a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0015aa:	601a      	str	r2, [r3, #0]
1a0015ac:	f3bf 8f4f 	dsb	sy
1a0015b0:	f3bf 8f6f 	isb	sy
1a0015b4:	e7be      	b.n	1a001534 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
1a0015b6:	2d00      	cmp	r5, #0
1a0015b8:	d086      	beq.n	1a0014c8 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
1a0015ba:	f001 f9d3 	bl	1a002964 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a0015be:	4620      	mov	r0, r4
1a0015c0:	f7ff fbe9 	bl	1a000d96 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a0015c4:	4601      	mov	r1, r0
1a0015c6:	6860      	ldr	r0, [r4, #4]
1a0015c8:	f000 fe94 	bl	1a0022f4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a0015cc:	f001 f9ec 	bl	1a0029a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
1a0015d0:	2500      	movs	r5, #0
1a0015d2:	e779      	b.n	1a0014c8 <xQueueSemaphoreTake+0x8c>
1a0015d4:	e000ed04 	.word	0xe000ed04

1a0015d8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0015d8:	2300      	movs	r3, #0
1a0015da:	2b07      	cmp	r3, #7
1a0015dc:	d80c      	bhi.n	1a0015f8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a0015de:	4a07      	ldr	r2, [pc, #28]	; (1a0015fc <vQueueAddToRegistry+0x24>)
1a0015e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a0015e4:	b10a      	cbz	r2, 1a0015ea <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a0015e6:	3301      	adds	r3, #1
1a0015e8:	e7f7      	b.n	1a0015da <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a0015ea:	4a04      	ldr	r2, [pc, #16]	; (1a0015fc <vQueueAddToRegistry+0x24>)
1a0015ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a0015f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a0015f4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a0015f6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a0015f8:	4770      	bx	lr
1a0015fa:	bf00      	nop
1a0015fc:	10002c4c 	.word	0x10002c4c

1a001600 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001600:	2300      	movs	r3, #0
1a001602:	2b07      	cmp	r3, #7
1a001604:	d80f      	bhi.n	1a001626 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
1a001606:	4a08      	ldr	r2, [pc, #32]	; (1a001628 <vQueueUnregisterQueue+0x28>)
1a001608:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
1a00160c:	6852      	ldr	r2, [r2, #4]
1a00160e:	4282      	cmp	r2, r0
1a001610:	d001      	beq.n	1a001616 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001612:	3301      	adds	r3, #1
1a001614:	e7f5      	b.n	1a001602 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
1a001616:	4a04      	ldr	r2, [pc, #16]	; (1a001628 <vQueueUnregisterQueue+0x28>)
1a001618:	2100      	movs	r1, #0
1a00161a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
1a00161e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001622:	6059      	str	r1, [r3, #4]
				break;
1a001624:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1a001626:	4770      	bx	lr
1a001628:	10002c4c 	.word	0x10002c4c

1a00162c <vQueueDelete>:
	configASSERT( pxQueue );
1a00162c:	b940      	cbnz	r0, 1a001640 <vQueueDelete+0x14>
1a00162e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001632:	f383 8811 	msr	BASEPRI, r3
1a001636:	f3bf 8f6f 	isb	sy
1a00163a:	f3bf 8f4f 	dsb	sy
1a00163e:	e7fe      	b.n	1a00163e <vQueueDelete+0x12>
{
1a001640:	b510      	push	{r4, lr}
1a001642:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
1a001644:	f7ff ffdc 	bl	1a001600 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a001648:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
1a00164c:	b103      	cbz	r3, 1a001650 <vQueueDelete+0x24>
}
1a00164e:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
1a001650:	4620      	mov	r0, r4
1a001652:	f7ff fb95 	bl	1a000d80 <vPortFree>
}
1a001656:	e7fa      	b.n	1a00164e <vQueueDelete+0x22>

1a001658 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001658:	b570      	push	{r4, r5, r6, lr}
1a00165a:	4604      	mov	r4, r0
1a00165c:	460d      	mov	r5, r1
1a00165e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001660:	f001 f980 	bl	1a002964 <vPortEnterCritical>
1a001664:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001668:	b25b      	sxtb	r3, r3
1a00166a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00166e:	d00d      	beq.n	1a00168c <vQueueWaitForMessageRestricted+0x34>
1a001670:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001674:	b25b      	sxtb	r3, r3
1a001676:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00167a:	d00b      	beq.n	1a001694 <vQueueWaitForMessageRestricted+0x3c>
1a00167c:	f001 f994 	bl	1a0029a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a001680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001682:	b15b      	cbz	r3, 1a00169c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001684:	4620      	mov	r0, r4
1a001686:	f7ff fbf8 	bl	1a000e7a <prvUnlockQueue>
	}
1a00168a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a00168c:	2300      	movs	r3, #0
1a00168e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001692:	e7ed      	b.n	1a001670 <vQueueWaitForMessageRestricted+0x18>
1a001694:	2300      	movs	r3, #0
1a001696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00169a:	e7ef      	b.n	1a00167c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a00169c:	4632      	mov	r2, r6
1a00169e:	4629      	mov	r1, r5
1a0016a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0016a4:	f000 fcae 	bl	1a002004 <vTaskPlaceOnEventListRestricted>
1a0016a8:	e7ec      	b.n	1a001684 <vQueueWaitForMessageRestricted+0x2c>

1a0016aa <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016aa:	f100 0308 	add.w	r3, r0, #8
1a0016ae:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0016b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0016b4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016b6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016b8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0016ba:	2300      	movs	r3, #0
1a0016bc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0016be:	4770      	bx	lr

1a0016c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0016c0:	2300      	movs	r3, #0
1a0016c2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0016c4:	4770      	bx	lr

1a0016c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0016c6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0016c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0016ca:	689a      	ldr	r2, [r3, #8]
1a0016cc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0016ce:	689a      	ldr	r2, [r3, #8]
1a0016d0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0016d2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0016d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0016d6:	6803      	ldr	r3, [r0, #0]
1a0016d8:	3301      	adds	r3, #1
1a0016da:	6003      	str	r3, [r0, #0]
}
1a0016dc:	4770      	bx	lr

1a0016de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0016de:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0016e0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0016e2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0016e6:	d002      	beq.n	1a0016ee <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016e8:	f100 0208 	add.w	r2, r0, #8
1a0016ec:	e002      	b.n	1a0016f4 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0016ee:	6902      	ldr	r2, [r0, #16]
1a0016f0:	e004      	b.n	1a0016fc <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0016f2:	461a      	mov	r2, r3
1a0016f4:	6853      	ldr	r3, [r2, #4]
1a0016f6:	681c      	ldr	r4, [r3, #0]
1a0016f8:	42ac      	cmp	r4, r5
1a0016fa:	d9fa      	bls.n	1a0016f2 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0016fc:	6853      	ldr	r3, [r2, #4]
1a0016fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001700:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001702:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001704:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001706:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001708:	6803      	ldr	r3, [r0, #0]
1a00170a:	3301      	adds	r3, #1
1a00170c:	6003      	str	r3, [r0, #0]
}
1a00170e:	bc30      	pop	{r4, r5}
1a001710:	4770      	bx	lr

1a001712 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001712:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001714:	6842      	ldr	r2, [r0, #4]
1a001716:	6881      	ldr	r1, [r0, #8]
1a001718:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00171a:	6882      	ldr	r2, [r0, #8]
1a00171c:	6841      	ldr	r1, [r0, #4]
1a00171e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001720:	685a      	ldr	r2, [r3, #4]
1a001722:	4282      	cmp	r2, r0
1a001724:	d006      	beq.n	1a001734 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001726:	2200      	movs	r2, #0
1a001728:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00172a:	681a      	ldr	r2, [r3, #0]
1a00172c:	3a01      	subs	r2, #1
1a00172e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001730:	6818      	ldr	r0, [r3, #0]
}
1a001732:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001734:	6882      	ldr	r2, [r0, #8]
1a001736:	605a      	str	r2, [r3, #4]
1a001738:	e7f5      	b.n	1a001726 <uxListRemove+0x14>
1a00173a:	Address 0x000000001a00173a is out of bounds.


1a00173c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00173c:	4b03      	ldr	r3, [pc, #12]	; (1a00174c <vApplicationGetIdleTaskMemory+0x10>)
1a00173e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001740:	4b03      	ldr	r3, [pc, #12]	; (1a001750 <vApplicationGetIdleTaskMemory+0x14>)
1a001742:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001744:	235a      	movs	r3, #90	; 0x5a
1a001746:	6013      	str	r3, [r2, #0]
}
1a001748:	4770      	bx	lr
1a00174a:	bf00      	nop
1a00174c:	100028c4 	.word	0x100028c4
1a001750:	100021bc 	.word	0x100021bc

1a001754 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001754:	4b03      	ldr	r3, [pc, #12]	; (1a001764 <vApplicationGetTimerTaskMemory+0x10>)
1a001756:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001758:	4b03      	ldr	r3, [pc, #12]	; (1a001768 <vApplicationGetTimerTaskMemory+0x14>)
1a00175a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00175c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a001760:	6013      	str	r3, [r2, #0]
1a001762:	4770      	bx	lr
1a001764:	10002924 	.word	0x10002924
1a001768:	10002324 	.word	0x10002324

1a00176c <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a00176c:	e7fe      	b.n	1a00176c <vApplicationStackOverflowHook>

1a00176e <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a00176e:	e7fe      	b.n	1a00176e <vApplicationMallocFailedHook>

1a001770 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001770:	4b08      	ldr	r3, [pc, #32]	; (1a001794 <prvResetNextTaskUnblockTime+0x24>)
1a001772:	681b      	ldr	r3, [r3, #0]
1a001774:	681b      	ldr	r3, [r3, #0]
1a001776:	b13b      	cbz	r3, 1a001788 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001778:	4b06      	ldr	r3, [pc, #24]	; (1a001794 <prvResetNextTaskUnblockTime+0x24>)
1a00177a:	681b      	ldr	r3, [r3, #0]
1a00177c:	68db      	ldr	r3, [r3, #12]
1a00177e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001780:	685a      	ldr	r2, [r3, #4]
1a001782:	4b05      	ldr	r3, [pc, #20]	; (1a001798 <prvResetNextTaskUnblockTime+0x28>)
1a001784:	601a      	str	r2, [r3, #0]
	}
}
1a001786:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001788:	4b03      	ldr	r3, [pc, #12]	; (1a001798 <prvResetNextTaskUnblockTime+0x28>)
1a00178a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00178e:	601a      	str	r2, [r3, #0]
1a001790:	4770      	bx	lr
1a001792:	bf00      	nop
1a001794:	10002988 	.word	0x10002988
1a001798:	10002a5c 	.word	0x10002a5c

1a00179c <prvInitialiseNewTask>:
{
1a00179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0017a0:	4681      	mov	r9, r0
1a0017a2:	460d      	mov	r5, r1
1a0017a4:	4617      	mov	r7, r2
1a0017a6:	469a      	mov	sl, r3
1a0017a8:	9e08      	ldr	r6, [sp, #32]
1a0017aa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0017ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a0017b0:	0092      	lsls	r2, r2, #2
1a0017b2:	21a5      	movs	r1, #165	; 0xa5
1a0017b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a0017b6:	f003 fa74 	bl	1a004ca2 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0017ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0017bc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0017c0:	3a01      	subs	r2, #1
1a0017c2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0017c6:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0017ca:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017cc:	2300      	movs	r3, #0
1a0017ce:	2b0f      	cmp	r3, #15
1a0017d0:	d807      	bhi.n	1a0017e2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0017d2:	5ce9      	ldrb	r1, [r5, r3]
1a0017d4:	18e2      	adds	r2, r4, r3
1a0017d6:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0017da:	5cea      	ldrb	r2, [r5, r3]
1a0017dc:	b10a      	cbz	r2, 1a0017e2 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0017de:	3301      	adds	r3, #1
1a0017e0:	e7f5      	b.n	1a0017ce <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0017e2:	2300      	movs	r3, #0
1a0017e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0017e8:	2e06      	cmp	r6, #6
1a0017ea:	d900      	bls.n	1a0017ee <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0017ec:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0017ee:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0017f0:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0017f2:	2500      	movs	r5, #0
1a0017f4:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0017f6:	1d20      	adds	r0, r4, #4
1a0017f8:	f7ff ff62 	bl	1a0016c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0017fc:	f104 0018 	add.w	r0, r4, #24
1a001800:	f7ff ff5e 	bl	1a0016c0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001804:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001806:	f1c6 0607 	rsb	r6, r6, #7
1a00180a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a00180c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a00180e:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001810:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001814:	4652      	mov	r2, sl
1a001816:	4649      	mov	r1, r9
1a001818:	4638      	mov	r0, r7
1a00181a:	f001 f877 	bl	1a00290c <pxPortInitialiseStack>
1a00181e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001820:	f1b8 0f00 	cmp.w	r8, #0
1a001824:	d001      	beq.n	1a00182a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001826:	f8c8 4000 	str.w	r4, [r8]
}
1a00182a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00182e:	Address 0x000000001a00182e is out of bounds.


1a001830 <prvInitialiseTaskLists>:
{
1a001830:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001832:	2400      	movs	r4, #0
1a001834:	e007      	b.n	1a001846 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001836:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00183a:	0093      	lsls	r3, r2, #2
1a00183c:	480e      	ldr	r0, [pc, #56]	; (1a001878 <prvInitialiseTaskLists+0x48>)
1a00183e:	4418      	add	r0, r3
1a001840:	f7ff ff33 	bl	1a0016aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001844:	3401      	adds	r4, #1
1a001846:	2c06      	cmp	r4, #6
1a001848:	d9f5      	bls.n	1a001836 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00184a:	4d0c      	ldr	r5, [pc, #48]	; (1a00187c <prvInitialiseTaskLists+0x4c>)
1a00184c:	4628      	mov	r0, r5
1a00184e:	f7ff ff2c 	bl	1a0016aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001852:	4c0b      	ldr	r4, [pc, #44]	; (1a001880 <prvInitialiseTaskLists+0x50>)
1a001854:	4620      	mov	r0, r4
1a001856:	f7ff ff28 	bl	1a0016aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00185a:	480a      	ldr	r0, [pc, #40]	; (1a001884 <prvInitialiseTaskLists+0x54>)
1a00185c:	f7ff ff25 	bl	1a0016aa <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001860:	4809      	ldr	r0, [pc, #36]	; (1a001888 <prvInitialiseTaskLists+0x58>)
1a001862:	f7ff ff22 	bl	1a0016aa <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001866:	4809      	ldr	r0, [pc, #36]	; (1a00188c <prvInitialiseTaskLists+0x5c>)
1a001868:	f7ff ff1f 	bl	1a0016aa <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a00186c:	4b08      	ldr	r3, [pc, #32]	; (1a001890 <prvInitialiseTaskLists+0x60>)
1a00186e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001870:	4b08      	ldr	r3, [pc, #32]	; (1a001894 <prvInitialiseTaskLists+0x64>)
1a001872:	601c      	str	r4, [r3, #0]
}
1a001874:	bd38      	pop	{r3, r4, r5, pc}
1a001876:	bf00      	nop
1a001878:	10002990 	.word	0x10002990
1a00187c:	10002a34 	.word	0x10002a34
1a001880:	10002a48 	.word	0x10002a48
1a001884:	10002a64 	.word	0x10002a64
1a001888:	10002a90 	.word	0x10002a90
1a00188c:	10002a7c 	.word	0x10002a7c
1a001890:	10002988 	.word	0x10002988
1a001894:	1000298c 	.word	0x1000298c

1a001898 <prvAddNewTaskToReadyList>:
{
1a001898:	b510      	push	{r4, lr}
1a00189a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a00189c:	f001 f862 	bl	1a002964 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a0018a0:	4a21      	ldr	r2, [pc, #132]	; (1a001928 <prvAddNewTaskToReadyList+0x90>)
1a0018a2:	6813      	ldr	r3, [r2, #0]
1a0018a4:	3301      	adds	r3, #1
1a0018a6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a0018a8:	4b20      	ldr	r3, [pc, #128]	; (1a00192c <prvAddNewTaskToReadyList+0x94>)
1a0018aa:	681b      	ldr	r3, [r3, #0]
1a0018ac:	b15b      	cbz	r3, 1a0018c6 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a0018ae:	4b20      	ldr	r3, [pc, #128]	; (1a001930 <prvAddNewTaskToReadyList+0x98>)
1a0018b0:	681b      	ldr	r3, [r3, #0]
1a0018b2:	b96b      	cbnz	r3, 1a0018d0 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0018b4:	4b1d      	ldr	r3, [pc, #116]	; (1a00192c <prvAddNewTaskToReadyList+0x94>)
1a0018b6:	681b      	ldr	r3, [r3, #0]
1a0018b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0018ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018bc:	429a      	cmp	r2, r3
1a0018be:	d807      	bhi.n	1a0018d0 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0018c0:	4b1a      	ldr	r3, [pc, #104]	; (1a00192c <prvAddNewTaskToReadyList+0x94>)
1a0018c2:	601c      	str	r4, [r3, #0]
1a0018c4:	e004      	b.n	1a0018d0 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0018c6:	4b19      	ldr	r3, [pc, #100]	; (1a00192c <prvAddNewTaskToReadyList+0x94>)
1a0018c8:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0018ca:	6813      	ldr	r3, [r2, #0]
1a0018cc:	2b01      	cmp	r3, #1
1a0018ce:	d027      	beq.n	1a001920 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0018d0:	4a18      	ldr	r2, [pc, #96]	; (1a001934 <prvAddNewTaskToReadyList+0x9c>)
1a0018d2:	6813      	ldr	r3, [r2, #0]
1a0018d4:	3301      	adds	r3, #1
1a0018d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0018d8:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0018da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0018dc:	2201      	movs	r2, #1
1a0018de:	409a      	lsls	r2, r3
1a0018e0:	4915      	ldr	r1, [pc, #84]	; (1a001938 <prvAddNewTaskToReadyList+0xa0>)
1a0018e2:	6808      	ldr	r0, [r1, #0]
1a0018e4:	4302      	orrs	r2, r0
1a0018e6:	600a      	str	r2, [r1, #0]
1a0018e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0018ec:	009a      	lsls	r2, r3, #2
1a0018ee:	1d21      	adds	r1, r4, #4
1a0018f0:	4812      	ldr	r0, [pc, #72]	; (1a00193c <prvAddNewTaskToReadyList+0xa4>)
1a0018f2:	4410      	add	r0, r2
1a0018f4:	f7ff fee7 	bl	1a0016c6 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0018f8:	f001 f856 	bl	1a0029a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0018fc:	4b0c      	ldr	r3, [pc, #48]	; (1a001930 <prvAddNewTaskToReadyList+0x98>)
1a0018fe:	681b      	ldr	r3, [r3, #0]
1a001900:	b16b      	cbz	r3, 1a00191e <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001902:	4b0a      	ldr	r3, [pc, #40]	; (1a00192c <prvAddNewTaskToReadyList+0x94>)
1a001904:	681b      	ldr	r3, [r3, #0]
1a001906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001908:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a00190a:	429a      	cmp	r2, r3
1a00190c:	d207      	bcs.n	1a00191e <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a00190e:	4b0c      	ldr	r3, [pc, #48]	; (1a001940 <prvAddNewTaskToReadyList+0xa8>)
1a001910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001914:	601a      	str	r2, [r3, #0]
1a001916:	f3bf 8f4f 	dsb	sy
1a00191a:	f3bf 8f6f 	isb	sy
}
1a00191e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001920:	f7ff ff86 	bl	1a001830 <prvInitialiseTaskLists>
1a001924:	e7d4      	b.n	1a0018d0 <prvAddNewTaskToReadyList+0x38>
1a001926:	bf00      	nop
1a001928:	10002a1c 	.word	0x10002a1c
1a00192c:	10002984 	.word	0x10002984
1a001930:	10002a78 	.word	0x10002a78
1a001934:	10002a2c 	.word	0x10002a2c
1a001938:	10002a30 	.word	0x10002a30
1a00193c:	10002990 	.word	0x10002990
1a001940:	e000ed04 	.word	0xe000ed04

1a001944 <prvDeleteTCB>:
	{
1a001944:	b510      	push	{r4, lr}
1a001946:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001948:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a00194c:	b933      	cbnz	r3, 1a00195c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a00194e:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001950:	f7ff fa16 	bl	1a000d80 <vPortFree>
				vPortFree( pxTCB );
1a001954:	4620      	mov	r0, r4
1a001956:	f7ff fa13 	bl	1a000d80 <vPortFree>
	}
1a00195a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a00195c:	2b01      	cmp	r3, #1
1a00195e:	d00a      	beq.n	1a001976 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001960:	2b02      	cmp	r3, #2
1a001962:	d0fa      	beq.n	1a00195a <prvDeleteTCB+0x16>
1a001964:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001968:	f383 8811 	msr	BASEPRI, r3
1a00196c:	f3bf 8f6f 	isb	sy
1a001970:	f3bf 8f4f 	dsb	sy
1a001974:	e7fe      	b.n	1a001974 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001976:	f7ff fa03 	bl	1a000d80 <vPortFree>
1a00197a:	e7ee      	b.n	1a00195a <prvDeleteTCB+0x16>

1a00197c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a00197c:	4b0f      	ldr	r3, [pc, #60]	; (1a0019bc <prvCheckTasksWaitingTermination+0x40>)
1a00197e:	681b      	ldr	r3, [r3, #0]
1a001980:	b1d3      	cbz	r3, 1a0019b8 <prvCheckTasksWaitingTermination+0x3c>
{
1a001982:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001984:	f000 ffee 	bl	1a002964 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001988:	4b0d      	ldr	r3, [pc, #52]	; (1a0019c0 <prvCheckTasksWaitingTermination+0x44>)
1a00198a:	68db      	ldr	r3, [r3, #12]
1a00198c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00198e:	1d20      	adds	r0, r4, #4
1a001990:	f7ff febf 	bl	1a001712 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001994:	4a0b      	ldr	r2, [pc, #44]	; (1a0019c4 <prvCheckTasksWaitingTermination+0x48>)
1a001996:	6813      	ldr	r3, [r2, #0]
1a001998:	3b01      	subs	r3, #1
1a00199a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a00199c:	4a07      	ldr	r2, [pc, #28]	; (1a0019bc <prvCheckTasksWaitingTermination+0x40>)
1a00199e:	6813      	ldr	r3, [r2, #0]
1a0019a0:	3b01      	subs	r3, #1
1a0019a2:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a0019a4:	f001 f800 	bl	1a0029a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a0019a8:	4620      	mov	r0, r4
1a0019aa:	f7ff ffcb 	bl	1a001944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a0019ae:	4b03      	ldr	r3, [pc, #12]	; (1a0019bc <prvCheckTasksWaitingTermination+0x40>)
1a0019b0:	681b      	ldr	r3, [r3, #0]
1a0019b2:	2b00      	cmp	r3, #0
1a0019b4:	d1e6      	bne.n	1a001984 <prvCheckTasksWaitingTermination+0x8>
}
1a0019b6:	bd10      	pop	{r4, pc}
1a0019b8:	4770      	bx	lr
1a0019ba:	bf00      	nop
1a0019bc:	10002a20 	.word	0x10002a20
1a0019c0:	10002a90 	.word	0x10002a90
1a0019c4:	10002a1c 	.word	0x10002a1c

1a0019c8 <prvIdleTask>:
{
1a0019c8:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0019ca:	f7ff ffd7 	bl	1a00197c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0019ce:	4b06      	ldr	r3, [pc, #24]	; (1a0019e8 <prvIdleTask+0x20>)
1a0019d0:	681b      	ldr	r3, [r3, #0]
1a0019d2:	2b01      	cmp	r3, #1
1a0019d4:	d9f9      	bls.n	1a0019ca <prvIdleTask+0x2>
				taskYIELD();
1a0019d6:	4b05      	ldr	r3, [pc, #20]	; (1a0019ec <prvIdleTask+0x24>)
1a0019d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0019dc:	601a      	str	r2, [r3, #0]
1a0019de:	f3bf 8f4f 	dsb	sy
1a0019e2:	f3bf 8f6f 	isb	sy
1a0019e6:	e7f0      	b.n	1a0019ca <prvIdleTask+0x2>
1a0019e8:	10002990 	.word	0x10002990
1a0019ec:	e000ed04 	.word	0xe000ed04

1a0019f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0019f0:	b570      	push	{r4, r5, r6, lr}
1a0019f2:	4604      	mov	r4, r0
1a0019f4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0019f6:	4b1d      	ldr	r3, [pc, #116]	; (1a001a6c <prvAddCurrentTaskToDelayedList+0x7c>)
1a0019f8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0019fa:	4b1d      	ldr	r3, [pc, #116]	; (1a001a70 <prvAddCurrentTaskToDelayedList+0x80>)
1a0019fc:	6818      	ldr	r0, [r3, #0]
1a0019fe:	3004      	adds	r0, #4
1a001a00:	f7ff fe87 	bl	1a001712 <uxListRemove>
1a001a04:	b950      	cbnz	r0, 1a001a1c <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001a06:	4b1a      	ldr	r3, [pc, #104]	; (1a001a70 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a08:	681b      	ldr	r3, [r3, #0]
1a001a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001a0c:	2301      	movs	r3, #1
1a001a0e:	fa03 f202 	lsl.w	r2, r3, r2
1a001a12:	4918      	ldr	r1, [pc, #96]	; (1a001a74 <prvAddCurrentTaskToDelayedList+0x84>)
1a001a14:	680b      	ldr	r3, [r1, #0]
1a001a16:	ea23 0302 	bic.w	r3, r3, r2
1a001a1a:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001a1c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001a20:	d013      	beq.n	1a001a4a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001a22:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001a24:	4b12      	ldr	r3, [pc, #72]	; (1a001a70 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a26:	681b      	ldr	r3, [r3, #0]
1a001a28:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001a2a:	42a5      	cmp	r5, r4
1a001a2c:	d816      	bhi.n	1a001a5c <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a2e:	4b12      	ldr	r3, [pc, #72]	; (1a001a78 <prvAddCurrentTaskToDelayedList+0x88>)
1a001a30:	6818      	ldr	r0, [r3, #0]
1a001a32:	4b0f      	ldr	r3, [pc, #60]	; (1a001a70 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a34:	6819      	ldr	r1, [r3, #0]
1a001a36:	3104      	adds	r1, #4
1a001a38:	f7ff fe51 	bl	1a0016de <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001a3c:	4b0f      	ldr	r3, [pc, #60]	; (1a001a7c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001a3e:	681b      	ldr	r3, [r3, #0]
1a001a40:	42a3      	cmp	r3, r4
1a001a42:	d912      	bls.n	1a001a6a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001a44:	4b0d      	ldr	r3, [pc, #52]	; (1a001a7c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001a46:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001a48:	e00f      	b.n	1a001a6a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001a4a:	2e00      	cmp	r6, #0
1a001a4c:	d0e9      	beq.n	1a001a22 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a4e:	4b08      	ldr	r3, [pc, #32]	; (1a001a70 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a50:	6819      	ldr	r1, [r3, #0]
1a001a52:	3104      	adds	r1, #4
1a001a54:	480a      	ldr	r0, [pc, #40]	; (1a001a80 <prvAddCurrentTaskToDelayedList+0x90>)
1a001a56:	f7ff fe36 	bl	1a0016c6 <vListInsertEnd>
1a001a5a:	e006      	b.n	1a001a6a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001a5c:	4b09      	ldr	r3, [pc, #36]	; (1a001a84 <prvAddCurrentTaskToDelayedList+0x94>)
1a001a5e:	6818      	ldr	r0, [r3, #0]
1a001a60:	4b03      	ldr	r3, [pc, #12]	; (1a001a70 <prvAddCurrentTaskToDelayedList+0x80>)
1a001a62:	6819      	ldr	r1, [r3, #0]
1a001a64:	3104      	adds	r1, #4
1a001a66:	f7ff fe3a 	bl	1a0016de <vListInsert>
}
1a001a6a:	bd70      	pop	{r4, r5, r6, pc}
1a001a6c:	10002aa4 	.word	0x10002aa4
1a001a70:	10002984 	.word	0x10002984
1a001a74:	10002a30 	.word	0x10002a30
1a001a78:	10002988 	.word	0x10002988
1a001a7c:	10002a5c 	.word	0x10002a5c
1a001a80:	10002a7c 	.word	0x10002a7c
1a001a84:	1000298c 	.word	0x1000298c

1a001a88 <xTaskCreateStatic>:
	{
1a001a88:	b570      	push	{r4, r5, r6, lr}
1a001a8a:	b086      	sub	sp, #24
1a001a8c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001a8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001a90:	b945      	cbnz	r5, 1a001aa4 <xTaskCreateStatic+0x1c>
1a001a92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a96:	f383 8811 	msr	BASEPRI, r3
1a001a9a:	f3bf 8f6f 	isb	sy
1a001a9e:	f3bf 8f4f 	dsb	sy
1a001aa2:	e7fe      	b.n	1a001aa2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001aa4:	b944      	cbnz	r4, 1a001ab8 <xTaskCreateStatic+0x30>
1a001aa6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001aaa:	f383 8811 	msr	BASEPRI, r3
1a001aae:	f3bf 8f6f 	isb	sy
1a001ab2:	f3bf 8f4f 	dsb	sy
1a001ab6:	e7fe      	b.n	1a001ab6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001ab8:	2660      	movs	r6, #96	; 0x60
1a001aba:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001abc:	9e04      	ldr	r6, [sp, #16]
1a001abe:	2e60      	cmp	r6, #96	; 0x60
1a001ac0:	d008      	beq.n	1a001ad4 <xTaskCreateStatic+0x4c>
1a001ac2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ac6:	f383 8811 	msr	BASEPRI, r3
1a001aca:	f3bf 8f6f 	isb	sy
1a001ace:	f3bf 8f4f 	dsb	sy
1a001ad2:	e7fe      	b.n	1a001ad2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001ad4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001ad6:	2502      	movs	r5, #2
1a001ad8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001adc:	2500      	movs	r5, #0
1a001ade:	9503      	str	r5, [sp, #12]
1a001ae0:	9402      	str	r4, [sp, #8]
1a001ae2:	ad05      	add	r5, sp, #20
1a001ae4:	9501      	str	r5, [sp, #4]
1a001ae6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001ae8:	9500      	str	r5, [sp, #0]
1a001aea:	f7ff fe57 	bl	1a00179c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001aee:	4620      	mov	r0, r4
1a001af0:	f7ff fed2 	bl	1a001898 <prvAddNewTaskToReadyList>
	}
1a001af4:	9805      	ldr	r0, [sp, #20]
1a001af6:	b006      	add	sp, #24
1a001af8:	bd70      	pop	{r4, r5, r6, pc}

1a001afa <xTaskCreate>:
	{
1a001afa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001afe:	b085      	sub	sp, #20
1a001b00:	4607      	mov	r7, r0
1a001b02:	4688      	mov	r8, r1
1a001b04:	4615      	mov	r5, r2
1a001b06:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001b08:	0090      	lsls	r0, r2, #2
1a001b0a:	f7ff f901 	bl	1a000d10 <pvPortMalloc>
			if( pxStack != NULL )
1a001b0e:	b308      	cbz	r0, 1a001b54 <xTaskCreate+0x5a>
1a001b10:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001b12:	2060      	movs	r0, #96	; 0x60
1a001b14:	f7ff f8fc 	bl	1a000d10 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001b18:	4604      	mov	r4, r0
1a001b1a:	b1b8      	cbz	r0, 1a001b4c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001b1c:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001b1e:	b1e4      	cbz	r4, 1a001b5a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001b20:	2300      	movs	r3, #0
1a001b22:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001b26:	9303      	str	r3, [sp, #12]
1a001b28:	9402      	str	r4, [sp, #8]
1a001b2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001b2c:	9301      	str	r3, [sp, #4]
1a001b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001b30:	9300      	str	r3, [sp, #0]
1a001b32:	464b      	mov	r3, r9
1a001b34:	462a      	mov	r2, r5
1a001b36:	4641      	mov	r1, r8
1a001b38:	4638      	mov	r0, r7
1a001b3a:	f7ff fe2f 	bl	1a00179c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001b3e:	4620      	mov	r0, r4
1a001b40:	f7ff feaa 	bl	1a001898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001b44:	2001      	movs	r0, #1
	}
1a001b46:	b005      	add	sp, #20
1a001b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001b4c:	4630      	mov	r0, r6
1a001b4e:	f7ff f917 	bl	1a000d80 <vPortFree>
1a001b52:	e7e4      	b.n	1a001b1e <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001b58:	e7f5      	b.n	1a001b46 <xTaskCreate+0x4c>
1a001b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001b5e:	e7f2      	b.n	1a001b46 <xTaskCreate+0x4c>

1a001b60 <vTaskStartScheduler>:
{
1a001b60:	b510      	push	{r4, lr}
1a001b62:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001b64:	2400      	movs	r4, #0
1a001b66:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001b68:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001b6a:	aa07      	add	r2, sp, #28
1a001b6c:	a906      	add	r1, sp, #24
1a001b6e:	a805      	add	r0, sp, #20
1a001b70:	f7ff fde4 	bl	1a00173c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001b74:	9b05      	ldr	r3, [sp, #20]
1a001b76:	9302      	str	r3, [sp, #8]
1a001b78:	9b06      	ldr	r3, [sp, #24]
1a001b7a:	9301      	str	r3, [sp, #4]
1a001b7c:	9400      	str	r4, [sp, #0]
1a001b7e:	4623      	mov	r3, r4
1a001b80:	9a07      	ldr	r2, [sp, #28]
1a001b82:	4917      	ldr	r1, [pc, #92]	; (1a001be0 <vTaskStartScheduler+0x80>)
1a001b84:	4817      	ldr	r0, [pc, #92]	; (1a001be4 <vTaskStartScheduler+0x84>)
1a001b86:	f7ff ff7f 	bl	1a001a88 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001b8a:	b140      	cbz	r0, 1a001b9e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001b8c:	f000 fcac 	bl	1a0024e8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001b90:	2801      	cmp	r0, #1
1a001b92:	d006      	beq.n	1a001ba2 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001b94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b98:	d018      	beq.n	1a001bcc <vTaskStartScheduler+0x6c>
}
1a001b9a:	b008      	add	sp, #32
1a001b9c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001b9e:	2000      	movs	r0, #0
1a001ba0:	e7f6      	b.n	1a001b90 <vTaskStartScheduler+0x30>
1a001ba2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ba6:	f383 8811 	msr	BASEPRI, r3
1a001baa:	f3bf 8f6f 	isb	sy
1a001bae:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001bb2:	4b0d      	ldr	r3, [pc, #52]	; (1a001be8 <vTaskStartScheduler+0x88>)
1a001bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001bb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001bba:	4b0c      	ldr	r3, [pc, #48]	; (1a001bec <vTaskStartScheduler+0x8c>)
1a001bbc:	2201      	movs	r2, #1
1a001bbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001bc0:	4b0b      	ldr	r3, [pc, #44]	; (1a001bf0 <vTaskStartScheduler+0x90>)
1a001bc2:	2200      	movs	r2, #0
1a001bc4:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001bc6:	f000 ff6f 	bl	1a002aa8 <xPortStartScheduler>
1a001bca:	e7e6      	b.n	1a001b9a <vTaskStartScheduler+0x3a>
1a001bcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bd0:	f383 8811 	msr	BASEPRI, r3
1a001bd4:	f3bf 8f6f 	isb	sy
1a001bd8:	f3bf 8f4f 	dsb	sy
1a001bdc:	e7fe      	b.n	1a001bdc <vTaskStartScheduler+0x7c>
1a001bde:	bf00      	nop
1a001be0:	1a005a60 	.word	0x1a005a60
1a001be4:	1a0019c9 	.word	0x1a0019c9
1a001be8:	10002a5c 	.word	0x10002a5c
1a001bec:	10002a78 	.word	0x10002a78
1a001bf0:	10002aa4 	.word	0x10002aa4

1a001bf4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001bf4:	4a02      	ldr	r2, [pc, #8]	; (1a001c00 <vTaskSuspendAll+0xc>)
1a001bf6:	6813      	ldr	r3, [r2, #0]
1a001bf8:	3301      	adds	r3, #1
1a001bfa:	6013      	str	r3, [r2, #0]
}
1a001bfc:	4770      	bx	lr
1a001bfe:	bf00      	nop
1a001c00:	10002a28 	.word	0x10002a28

1a001c04 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001c04:	4b01      	ldr	r3, [pc, #4]	; (1a001c0c <xTaskGetTickCount+0x8>)
1a001c06:	6818      	ldr	r0, [r3, #0]
}
1a001c08:	4770      	bx	lr
1a001c0a:	bf00      	nop
1a001c0c:	10002aa4 	.word	0x10002aa4

1a001c10 <xTaskIncrementTick>:
{
1a001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001c12:	4b3a      	ldr	r3, [pc, #232]	; (1a001cfc <xTaskIncrementTick+0xec>)
1a001c14:	681b      	ldr	r3, [r3, #0]
1a001c16:	2b00      	cmp	r3, #0
1a001c18:	d164      	bne.n	1a001ce4 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001c1a:	4b39      	ldr	r3, [pc, #228]	; (1a001d00 <xTaskIncrementTick+0xf0>)
1a001c1c:	681d      	ldr	r5, [r3, #0]
1a001c1e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001c20:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001c22:	b9c5      	cbnz	r5, 1a001c56 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001c24:	4b37      	ldr	r3, [pc, #220]	; (1a001d04 <xTaskIncrementTick+0xf4>)
1a001c26:	681b      	ldr	r3, [r3, #0]
1a001c28:	681b      	ldr	r3, [r3, #0]
1a001c2a:	b143      	cbz	r3, 1a001c3e <xTaskIncrementTick+0x2e>
1a001c2c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c30:	f383 8811 	msr	BASEPRI, r3
1a001c34:	f3bf 8f6f 	isb	sy
1a001c38:	f3bf 8f4f 	dsb	sy
1a001c3c:	e7fe      	b.n	1a001c3c <xTaskIncrementTick+0x2c>
1a001c3e:	4a31      	ldr	r2, [pc, #196]	; (1a001d04 <xTaskIncrementTick+0xf4>)
1a001c40:	6811      	ldr	r1, [r2, #0]
1a001c42:	4b31      	ldr	r3, [pc, #196]	; (1a001d08 <xTaskIncrementTick+0xf8>)
1a001c44:	6818      	ldr	r0, [r3, #0]
1a001c46:	6010      	str	r0, [r2, #0]
1a001c48:	6019      	str	r1, [r3, #0]
1a001c4a:	4a30      	ldr	r2, [pc, #192]	; (1a001d0c <xTaskIncrementTick+0xfc>)
1a001c4c:	6813      	ldr	r3, [r2, #0]
1a001c4e:	3301      	adds	r3, #1
1a001c50:	6013      	str	r3, [r2, #0]
1a001c52:	f7ff fd8d 	bl	1a001770 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001c56:	4b2e      	ldr	r3, [pc, #184]	; (1a001d10 <xTaskIncrementTick+0x100>)
1a001c58:	681b      	ldr	r3, [r3, #0]
1a001c5a:	42ab      	cmp	r3, r5
1a001c5c:	d938      	bls.n	1a001cd0 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001c5e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001c60:	4b2c      	ldr	r3, [pc, #176]	; (1a001d14 <xTaskIncrementTick+0x104>)
1a001c62:	681b      	ldr	r3, [r3, #0]
1a001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001c6a:	009a      	lsls	r2, r3, #2
1a001c6c:	4b2a      	ldr	r3, [pc, #168]	; (1a001d18 <xTaskIncrementTick+0x108>)
1a001c6e:	589b      	ldr	r3, [r3, r2]
1a001c70:	2b01      	cmp	r3, #1
1a001c72:	d93c      	bls.n	1a001cee <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001c74:	2401      	movs	r4, #1
1a001c76:	e03a      	b.n	1a001cee <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001c78:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001c7a:	4b22      	ldr	r3, [pc, #136]	; (1a001d04 <xTaskIncrementTick+0xf4>)
1a001c7c:	681b      	ldr	r3, [r3, #0]
1a001c7e:	681b      	ldr	r3, [r3, #0]
1a001c80:	b343      	cbz	r3, 1a001cd4 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001c82:	4b20      	ldr	r3, [pc, #128]	; (1a001d04 <xTaskIncrementTick+0xf4>)
1a001c84:	681b      	ldr	r3, [r3, #0]
1a001c86:	68db      	ldr	r3, [r3, #12]
1a001c88:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001c8a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001c8c:	429d      	cmp	r5, r3
1a001c8e:	d326      	bcc.n	1a001cde <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c90:	1d37      	adds	r7, r6, #4
1a001c92:	4638      	mov	r0, r7
1a001c94:	f7ff fd3d 	bl	1a001712 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001c98:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001c9a:	b11b      	cbz	r3, 1a001ca4 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001c9c:	f106 0018 	add.w	r0, r6, #24
1a001ca0:	f7ff fd37 	bl	1a001712 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001ca4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001ca6:	2201      	movs	r2, #1
1a001ca8:	409a      	lsls	r2, r3
1a001caa:	491c      	ldr	r1, [pc, #112]	; (1a001d1c <xTaskIncrementTick+0x10c>)
1a001cac:	6808      	ldr	r0, [r1, #0]
1a001cae:	4302      	orrs	r2, r0
1a001cb0:	600a      	str	r2, [r1, #0]
1a001cb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001cb6:	009a      	lsls	r2, r3, #2
1a001cb8:	4639      	mov	r1, r7
1a001cba:	4817      	ldr	r0, [pc, #92]	; (1a001d18 <xTaskIncrementTick+0x108>)
1a001cbc:	4410      	add	r0, r2
1a001cbe:	f7ff fd02 	bl	1a0016c6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001cc2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001cc4:	4b13      	ldr	r3, [pc, #76]	; (1a001d14 <xTaskIncrementTick+0x104>)
1a001cc6:	681b      	ldr	r3, [r3, #0]
1a001cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001cca:	429a      	cmp	r2, r3
1a001ccc:	d2d4      	bcs.n	1a001c78 <xTaskIncrementTick+0x68>
1a001cce:	e7d4      	b.n	1a001c7a <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001cd0:	2400      	movs	r4, #0
1a001cd2:	e7d2      	b.n	1a001c7a <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001cd4:	4b0e      	ldr	r3, [pc, #56]	; (1a001d10 <xTaskIncrementTick+0x100>)
1a001cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001cda:	601a      	str	r2, [r3, #0]
					break;
1a001cdc:	e7c0      	b.n	1a001c60 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001cde:	4a0c      	ldr	r2, [pc, #48]	; (1a001d10 <xTaskIncrementTick+0x100>)
1a001ce0:	6013      	str	r3, [r2, #0]
						break;
1a001ce2:	e7bd      	b.n	1a001c60 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001ce4:	4a0e      	ldr	r2, [pc, #56]	; (1a001d20 <xTaskIncrementTick+0x110>)
1a001ce6:	6813      	ldr	r3, [r2, #0]
1a001ce8:	3301      	adds	r3, #1
1a001cea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001cec:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001cee:	4b0d      	ldr	r3, [pc, #52]	; (1a001d24 <xTaskIncrementTick+0x114>)
1a001cf0:	681b      	ldr	r3, [r3, #0]
1a001cf2:	b103      	cbz	r3, 1a001cf6 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001cf4:	2401      	movs	r4, #1
}
1a001cf6:	4620      	mov	r0, r4
1a001cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001cfa:	bf00      	nop
1a001cfc:	10002a28 	.word	0x10002a28
1a001d00:	10002aa4 	.word	0x10002aa4
1a001d04:	10002988 	.word	0x10002988
1a001d08:	1000298c 	.word	0x1000298c
1a001d0c:	10002a60 	.word	0x10002a60
1a001d10:	10002a5c 	.word	0x10002a5c
1a001d14:	10002984 	.word	0x10002984
1a001d18:	10002990 	.word	0x10002990
1a001d1c:	10002a30 	.word	0x10002a30
1a001d20:	10002a24 	.word	0x10002a24
1a001d24:	10002aa8 	.word	0x10002aa8

1a001d28 <xTaskResumeAll>:
{
1a001d28:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001d2a:	4b33      	ldr	r3, [pc, #204]	; (1a001df8 <xTaskResumeAll+0xd0>)
1a001d2c:	681b      	ldr	r3, [r3, #0]
1a001d2e:	b943      	cbnz	r3, 1a001d42 <xTaskResumeAll+0x1a>
1a001d30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d34:	f383 8811 	msr	BASEPRI, r3
1a001d38:	f3bf 8f6f 	isb	sy
1a001d3c:	f3bf 8f4f 	dsb	sy
1a001d40:	e7fe      	b.n	1a001d40 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a001d42:	f000 fe0f 	bl	1a002964 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a001d46:	4b2c      	ldr	r3, [pc, #176]	; (1a001df8 <xTaskResumeAll+0xd0>)
1a001d48:	681a      	ldr	r2, [r3, #0]
1a001d4a:	3a01      	subs	r2, #1
1a001d4c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001d4e:	681b      	ldr	r3, [r3, #0]
1a001d50:	2b00      	cmp	r3, #0
1a001d52:	d14d      	bne.n	1a001df0 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001d54:	4b29      	ldr	r3, [pc, #164]	; (1a001dfc <xTaskResumeAll+0xd4>)
1a001d56:	681b      	ldr	r3, [r3, #0]
1a001d58:	b923      	cbnz	r3, 1a001d64 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a001d5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001d5c:	f000 fe24 	bl	1a0029a8 <vPortExitCritical>
}
1a001d60:	4620      	mov	r0, r4
1a001d62:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a001d64:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001d66:	4b26      	ldr	r3, [pc, #152]	; (1a001e00 <xTaskResumeAll+0xd8>)
1a001d68:	681b      	ldr	r3, [r3, #0]
1a001d6a:	b31b      	cbz	r3, 1a001db4 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001d6c:	4b24      	ldr	r3, [pc, #144]	; (1a001e00 <xTaskResumeAll+0xd8>)
1a001d6e:	68db      	ldr	r3, [r3, #12]
1a001d70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001d72:	f104 0018 	add.w	r0, r4, #24
1a001d76:	f7ff fccc 	bl	1a001712 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001d7a:	1d25      	adds	r5, r4, #4
1a001d7c:	4628      	mov	r0, r5
1a001d7e:	f7ff fcc8 	bl	1a001712 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001d82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001d84:	2201      	movs	r2, #1
1a001d86:	409a      	lsls	r2, r3
1a001d88:	491e      	ldr	r1, [pc, #120]	; (1a001e04 <xTaskResumeAll+0xdc>)
1a001d8a:	6808      	ldr	r0, [r1, #0]
1a001d8c:	4302      	orrs	r2, r0
1a001d8e:	600a      	str	r2, [r1, #0]
1a001d90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d94:	009a      	lsls	r2, r3, #2
1a001d96:	4629      	mov	r1, r5
1a001d98:	481b      	ldr	r0, [pc, #108]	; (1a001e08 <xTaskResumeAll+0xe0>)
1a001d9a:	4410      	add	r0, r2
1a001d9c:	f7ff fc93 	bl	1a0016c6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001da0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001da2:	4b1a      	ldr	r3, [pc, #104]	; (1a001e0c <xTaskResumeAll+0xe4>)
1a001da4:	681b      	ldr	r3, [r3, #0]
1a001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001da8:	429a      	cmp	r2, r3
1a001daa:	d3dc      	bcc.n	1a001d66 <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a001dac:	4b18      	ldr	r3, [pc, #96]	; (1a001e10 <xTaskResumeAll+0xe8>)
1a001dae:	2201      	movs	r2, #1
1a001db0:	601a      	str	r2, [r3, #0]
1a001db2:	e7d8      	b.n	1a001d66 <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a001db4:	b10c      	cbz	r4, 1a001dba <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a001db6:	f7ff fcdb 	bl	1a001770 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001dba:	4b16      	ldr	r3, [pc, #88]	; (1a001e14 <xTaskResumeAll+0xec>)
1a001dbc:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001dbe:	b154      	cbz	r4, 1a001dd6 <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a001dc0:	f7ff ff26 	bl	1a001c10 <xTaskIncrementTick>
1a001dc4:	b110      	cbz	r0, 1a001dcc <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a001dc6:	4b12      	ldr	r3, [pc, #72]	; (1a001e10 <xTaskResumeAll+0xe8>)
1a001dc8:	2201      	movs	r2, #1
1a001dca:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001dcc:	3c01      	subs	r4, #1
1a001dce:	d1f7      	bne.n	1a001dc0 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a001dd0:	4b10      	ldr	r3, [pc, #64]	; (1a001e14 <xTaskResumeAll+0xec>)
1a001dd2:	2200      	movs	r2, #0
1a001dd4:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a001dd6:	4b0e      	ldr	r3, [pc, #56]	; (1a001e10 <xTaskResumeAll+0xe8>)
1a001dd8:	681b      	ldr	r3, [r3, #0]
1a001dda:	b15b      	cbz	r3, 1a001df4 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a001ddc:	4b0e      	ldr	r3, [pc, #56]	; (1a001e18 <xTaskResumeAll+0xf0>)
1a001dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001de2:	601a      	str	r2, [r3, #0]
1a001de4:	f3bf 8f4f 	dsb	sy
1a001de8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a001dec:	2401      	movs	r4, #1
1a001dee:	e7b5      	b.n	1a001d5c <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a001df0:	2400      	movs	r4, #0
1a001df2:	e7b3      	b.n	1a001d5c <xTaskResumeAll+0x34>
1a001df4:	2400      	movs	r4, #0
1a001df6:	e7b1      	b.n	1a001d5c <xTaskResumeAll+0x34>
1a001df8:	10002a28 	.word	0x10002a28
1a001dfc:	10002a1c 	.word	0x10002a1c
1a001e00:	10002a64 	.word	0x10002a64
1a001e04:	10002a30 	.word	0x10002a30
1a001e08:	10002990 	.word	0x10002990
1a001e0c:	10002984 	.word	0x10002984
1a001e10:	10002aa8 	.word	0x10002aa8
1a001e14:	10002a24 	.word	0x10002a24
1a001e18:	e000ed04 	.word	0xe000ed04

1a001e1c <vTaskDelayUntil>:
	{
1a001e1c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a001e1e:	b150      	cbz	r0, 1a001e36 <vTaskDelayUntil+0x1a>
1a001e20:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001e22:	b989      	cbnz	r1, 1a001e48 <vTaskDelayUntil+0x2c>
1a001e24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e28:	f383 8811 	msr	BASEPRI, r3
1a001e2c:	f3bf 8f6f 	isb	sy
1a001e30:	f3bf 8f4f 	dsb	sy
1a001e34:	e7fe      	b.n	1a001e34 <vTaskDelayUntil+0x18>
1a001e36:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e3a:	f383 8811 	msr	BASEPRI, r3
1a001e3e:	f3bf 8f6f 	isb	sy
1a001e42:	f3bf 8f4f 	dsb	sy
1a001e46:	e7fe      	b.n	1a001e46 <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001e48:	4b1a      	ldr	r3, [pc, #104]	; (1a001eb4 <vTaskDelayUntil+0x98>)
1a001e4a:	681b      	ldr	r3, [r3, #0]
1a001e4c:	b143      	cbz	r3, 1a001e60 <vTaskDelayUntil+0x44>
1a001e4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e52:	f383 8811 	msr	BASEPRI, r3
1a001e56:	f3bf 8f6f 	isb	sy
1a001e5a:	f3bf 8f4f 	dsb	sy
1a001e5e:	e7fe      	b.n	1a001e5e <vTaskDelayUntil+0x42>
1a001e60:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a001e62:	f7ff fec7 	bl	1a001bf4 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a001e66:	4b14      	ldr	r3, [pc, #80]	; (1a001eb8 <vTaskDelayUntil+0x9c>)
1a001e68:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001e6a:	682a      	ldr	r2, [r5, #0]
1a001e6c:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a001e6e:	4282      	cmp	r2, r0
1a001e70:	d918      	bls.n	1a001ea4 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001e72:	42a2      	cmp	r2, r4
1a001e74:	d80c      	bhi.n	1a001e90 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a001e76:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a001e78:	f7ff ff56 	bl	1a001d28 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001e7c:	b938      	cbnz	r0, 1a001e8e <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a001e7e:	4b0f      	ldr	r3, [pc, #60]	; (1a001ebc <vTaskDelayUntil+0xa0>)
1a001e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e84:	601a      	str	r2, [r3, #0]
1a001e86:	f3bf 8f4f 	dsb	sy
1a001e8a:	f3bf 8f6f 	isb	sy
	}
1a001e8e:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001e90:	42a0      	cmp	r0, r4
1a001e92:	d301      	bcc.n	1a001e98 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a001e94:	602c      	str	r4, [r5, #0]
1a001e96:	e7ef      	b.n	1a001e78 <vTaskDelayUntil+0x5c>
1a001e98:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001e9a:	2100      	movs	r1, #0
1a001e9c:	1a20      	subs	r0, r4, r0
1a001e9e:	f7ff fda7 	bl	1a0019f0 <prvAddCurrentTaskToDelayedList>
1a001ea2:	e7e9      	b.n	1a001e78 <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001ea4:	42a2      	cmp	r2, r4
1a001ea6:	d801      	bhi.n	1a001eac <vTaskDelayUntil+0x90>
1a001ea8:	42a0      	cmp	r0, r4
1a001eaa:	d201      	bcs.n	1a001eb0 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a001eac:	602c      	str	r4, [r5, #0]
1a001eae:	e7f4      	b.n	1a001e9a <vTaskDelayUntil+0x7e>
1a001eb0:	602c      	str	r4, [r5, #0]
1a001eb2:	e7e1      	b.n	1a001e78 <vTaskDelayUntil+0x5c>
1a001eb4:	10002a28 	.word	0x10002a28
1a001eb8:	10002aa4 	.word	0x10002aa4
1a001ebc:	e000ed04 	.word	0xe000ed04

1a001ec0 <vTaskDelay>:
	{
1a001ec0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a001ec2:	b1a8      	cbz	r0, 1a001ef0 <vTaskDelay+0x30>
1a001ec4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a001ec6:	4b0f      	ldr	r3, [pc, #60]	; (1a001f04 <vTaskDelay+0x44>)
1a001ec8:	681b      	ldr	r3, [r3, #0]
1a001eca:	b143      	cbz	r3, 1a001ede <vTaskDelay+0x1e>
1a001ecc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ed0:	f383 8811 	msr	BASEPRI, r3
1a001ed4:	f3bf 8f6f 	isb	sy
1a001ed8:	f3bf 8f4f 	dsb	sy
1a001edc:	e7fe      	b.n	1a001edc <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001ede:	f7ff fe89 	bl	1a001bf4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a001ee2:	2100      	movs	r1, #0
1a001ee4:	4620      	mov	r0, r4
1a001ee6:	f7ff fd83 	bl	1a0019f0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001eea:	f7ff ff1d 	bl	1a001d28 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001eee:	b938      	cbnz	r0, 1a001f00 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001ef0:	4b05      	ldr	r3, [pc, #20]	; (1a001f08 <vTaskDelay+0x48>)
1a001ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001ef6:	601a      	str	r2, [r3, #0]
1a001ef8:	f3bf 8f4f 	dsb	sy
1a001efc:	f3bf 8f6f 	isb	sy
	}
1a001f00:	bd10      	pop	{r4, pc}
1a001f02:	bf00      	nop
1a001f04:	10002a28 	.word	0x10002a28
1a001f08:	e000ed04 	.word	0xe000ed04

1a001f0c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001f0c:	4b2c      	ldr	r3, [pc, #176]	; (1a001fc0 <vTaskSwitchContext+0xb4>)
1a001f0e:	681b      	ldr	r3, [r3, #0]
1a001f10:	b11b      	cbz	r3, 1a001f1a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a001f12:	4b2c      	ldr	r3, [pc, #176]	; (1a001fc4 <vTaskSwitchContext+0xb8>)
1a001f14:	2201      	movs	r2, #1
1a001f16:	601a      	str	r2, [r3, #0]
1a001f18:	4770      	bx	lr
{
1a001f1a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001f1c:	4b29      	ldr	r3, [pc, #164]	; (1a001fc4 <vTaskSwitchContext+0xb8>)
1a001f1e:	2200      	movs	r2, #0
1a001f20:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a001f22:	4b29      	ldr	r3, [pc, #164]	; (1a001fc8 <vTaskSwitchContext+0xbc>)
1a001f24:	681b      	ldr	r3, [r3, #0]
1a001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001f28:	681a      	ldr	r2, [r3, #0]
1a001f2a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f2e:	d103      	bne.n	1a001f38 <vTaskSwitchContext+0x2c>
1a001f30:	685a      	ldr	r2, [r3, #4]
1a001f32:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f36:	d01b      	beq.n	1a001f70 <vTaskSwitchContext+0x64>
1a001f38:	4b23      	ldr	r3, [pc, #140]	; (1a001fc8 <vTaskSwitchContext+0xbc>)
1a001f3a:	6818      	ldr	r0, [r3, #0]
1a001f3c:	6819      	ldr	r1, [r3, #0]
1a001f3e:	3134      	adds	r1, #52	; 0x34
1a001f40:	f7ff fc14 	bl	1a00176c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001f44:	4b21      	ldr	r3, [pc, #132]	; (1a001fcc <vTaskSwitchContext+0xc0>)
1a001f46:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001f48:	fab3 f383 	clz	r3, r3
1a001f4c:	b2db      	uxtb	r3, r3
1a001f4e:	f1c3 031f 	rsb	r3, r3, #31
1a001f52:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a001f56:	008a      	lsls	r2, r1, #2
1a001f58:	491d      	ldr	r1, [pc, #116]	; (1a001fd0 <vTaskSwitchContext+0xc4>)
1a001f5a:	588a      	ldr	r2, [r1, r2]
1a001f5c:	b98a      	cbnz	r2, 1a001f82 <vTaskSwitchContext+0x76>
	__asm volatile
1a001f5e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f62:	f383 8811 	msr	BASEPRI, r3
1a001f66:	f3bf 8f6f 	isb	sy
1a001f6a:	f3bf 8f4f 	dsb	sy
1a001f6e:	e7fe      	b.n	1a001f6e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a001f70:	689a      	ldr	r2, [r3, #8]
1a001f72:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001f76:	d1df      	bne.n	1a001f38 <vTaskSwitchContext+0x2c>
1a001f78:	68db      	ldr	r3, [r3, #12]
1a001f7a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001f7e:	d1db      	bne.n	1a001f38 <vTaskSwitchContext+0x2c>
1a001f80:	e7e0      	b.n	1a001f44 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001f82:	4813      	ldr	r0, [pc, #76]	; (1a001fd0 <vTaskSwitchContext+0xc4>)
1a001f84:	009a      	lsls	r2, r3, #2
1a001f86:	18d4      	adds	r4, r2, r3
1a001f88:	00a1      	lsls	r1, r4, #2
1a001f8a:	4401      	add	r1, r0
1a001f8c:	684c      	ldr	r4, [r1, #4]
1a001f8e:	6864      	ldr	r4, [r4, #4]
1a001f90:	604c      	str	r4, [r1, #4]
1a001f92:	441a      	add	r2, r3
1a001f94:	0091      	lsls	r1, r2, #2
1a001f96:	3108      	adds	r1, #8
1a001f98:	4408      	add	r0, r1
1a001f9a:	4284      	cmp	r4, r0
1a001f9c:	d009      	beq.n	1a001fb2 <vTaskSwitchContext+0xa6>
1a001f9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001fa2:	009a      	lsls	r2, r3, #2
1a001fa4:	4b0a      	ldr	r3, [pc, #40]	; (1a001fd0 <vTaskSwitchContext+0xc4>)
1a001fa6:	4413      	add	r3, r2
1a001fa8:	685b      	ldr	r3, [r3, #4]
1a001faa:	68da      	ldr	r2, [r3, #12]
1a001fac:	4b06      	ldr	r3, [pc, #24]	; (1a001fc8 <vTaskSwitchContext+0xbc>)
1a001fae:	601a      	str	r2, [r3, #0]
}
1a001fb0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001fb2:	6861      	ldr	r1, [r4, #4]
1a001fb4:	4806      	ldr	r0, [pc, #24]	; (1a001fd0 <vTaskSwitchContext+0xc4>)
1a001fb6:	2214      	movs	r2, #20
1a001fb8:	fb02 0203 	mla	r2, r2, r3, r0
1a001fbc:	6051      	str	r1, [r2, #4]
1a001fbe:	e7ee      	b.n	1a001f9e <vTaskSwitchContext+0x92>
1a001fc0:	10002a28 	.word	0x10002a28
1a001fc4:	10002aa8 	.word	0x10002aa8
1a001fc8:	10002984 	.word	0x10002984
1a001fcc:	10002a30 	.word	0x10002a30
1a001fd0:	10002990 	.word	0x10002990

1a001fd4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a001fd4:	b940      	cbnz	r0, 1a001fe8 <vTaskPlaceOnEventList+0x14>
1a001fd6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fda:	f383 8811 	msr	BASEPRI, r3
1a001fde:	f3bf 8f6f 	isb	sy
1a001fe2:	f3bf 8f4f 	dsb	sy
1a001fe6:	e7fe      	b.n	1a001fe6 <vTaskPlaceOnEventList+0x12>
{
1a001fe8:	b510      	push	{r4, lr}
1a001fea:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001fec:	4b04      	ldr	r3, [pc, #16]	; (1a002000 <vTaskPlaceOnEventList+0x2c>)
1a001fee:	6819      	ldr	r1, [r3, #0]
1a001ff0:	3118      	adds	r1, #24
1a001ff2:	f7ff fb74 	bl	1a0016de <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001ff6:	2101      	movs	r1, #1
1a001ff8:	4620      	mov	r0, r4
1a001ffa:	f7ff fcf9 	bl	1a0019f0 <prvAddCurrentTaskToDelayedList>
}
1a001ffe:	bd10      	pop	{r4, pc}
1a002000:	10002984 	.word	0x10002984

1a002004 <vTaskPlaceOnEventListRestricted>:
	{
1a002004:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a002006:	b940      	cbnz	r0, 1a00201a <vTaskPlaceOnEventListRestricted+0x16>
1a002008:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00200c:	f383 8811 	msr	BASEPRI, r3
1a002010:	f3bf 8f6f 	isb	sy
1a002014:	f3bf 8f4f 	dsb	sy
1a002018:	e7fe      	b.n	1a002018 <vTaskPlaceOnEventListRestricted+0x14>
1a00201a:	460c      	mov	r4, r1
1a00201c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00201e:	4a06      	ldr	r2, [pc, #24]	; (1a002038 <vTaskPlaceOnEventListRestricted+0x34>)
1a002020:	6811      	ldr	r1, [r2, #0]
1a002022:	3118      	adds	r1, #24
1a002024:	f7ff fb4f 	bl	1a0016c6 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002028:	b10d      	cbz	r5, 1a00202e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00202a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00202e:	4629      	mov	r1, r5
1a002030:	4620      	mov	r0, r4
1a002032:	f7ff fcdd 	bl	1a0019f0 <prvAddCurrentTaskToDelayedList>
	}
1a002036:	bd38      	pop	{r3, r4, r5, pc}
1a002038:	10002984 	.word	0x10002984

1a00203c <xTaskRemoveFromEventList>:
{
1a00203c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00203e:	68c3      	ldr	r3, [r0, #12]
1a002040:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002042:	b944      	cbnz	r4, 1a002056 <xTaskRemoveFromEventList+0x1a>
1a002044:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002048:	f383 8811 	msr	BASEPRI, r3
1a00204c:	f3bf 8f6f 	isb	sy
1a002050:	f3bf 8f4f 	dsb	sy
1a002054:	e7fe      	b.n	1a002054 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002056:	f104 0518 	add.w	r5, r4, #24
1a00205a:	4628      	mov	r0, r5
1a00205c:	f7ff fb59 	bl	1a001712 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002060:	4b13      	ldr	r3, [pc, #76]	; (1a0020b0 <xTaskRemoveFromEventList+0x74>)
1a002062:	681b      	ldr	r3, [r3, #0]
1a002064:	b9e3      	cbnz	r3, 1a0020a0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002066:	1d25      	adds	r5, r4, #4
1a002068:	4628      	mov	r0, r5
1a00206a:	f7ff fb52 	bl	1a001712 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00206e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002070:	2201      	movs	r2, #1
1a002072:	409a      	lsls	r2, r3
1a002074:	490f      	ldr	r1, [pc, #60]	; (1a0020b4 <xTaskRemoveFromEventList+0x78>)
1a002076:	6808      	ldr	r0, [r1, #0]
1a002078:	4302      	orrs	r2, r0
1a00207a:	600a      	str	r2, [r1, #0]
1a00207c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002080:	009a      	lsls	r2, r3, #2
1a002082:	4629      	mov	r1, r5
1a002084:	480c      	ldr	r0, [pc, #48]	; (1a0020b8 <xTaskRemoveFromEventList+0x7c>)
1a002086:	4410      	add	r0, r2
1a002088:	f7ff fb1d 	bl	1a0016c6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a00208c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00208e:	4b0b      	ldr	r3, [pc, #44]	; (1a0020bc <xTaskRemoveFromEventList+0x80>)
1a002090:	681b      	ldr	r3, [r3, #0]
1a002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002094:	429a      	cmp	r2, r3
1a002096:	d908      	bls.n	1a0020aa <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a002098:	2001      	movs	r0, #1
1a00209a:	4b09      	ldr	r3, [pc, #36]	; (1a0020c0 <xTaskRemoveFromEventList+0x84>)
1a00209c:	6018      	str	r0, [r3, #0]
}
1a00209e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0020a0:	4629      	mov	r1, r5
1a0020a2:	4808      	ldr	r0, [pc, #32]	; (1a0020c4 <xTaskRemoveFromEventList+0x88>)
1a0020a4:	f7ff fb0f 	bl	1a0016c6 <vListInsertEnd>
1a0020a8:	e7f0      	b.n	1a00208c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0020aa:	2000      	movs	r0, #0
	return xReturn;
1a0020ac:	e7f7      	b.n	1a00209e <xTaskRemoveFromEventList+0x62>
1a0020ae:	bf00      	nop
1a0020b0:	10002a28 	.word	0x10002a28
1a0020b4:	10002a30 	.word	0x10002a30
1a0020b8:	10002990 	.word	0x10002990
1a0020bc:	10002984 	.word	0x10002984
1a0020c0:	10002aa8 	.word	0x10002aa8
1a0020c4:	10002a64 	.word	0x10002a64

1a0020c8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0020c8:	4b03      	ldr	r3, [pc, #12]	; (1a0020d8 <vTaskInternalSetTimeOutState+0x10>)
1a0020ca:	681b      	ldr	r3, [r3, #0]
1a0020cc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0020ce:	4b03      	ldr	r3, [pc, #12]	; (1a0020dc <vTaskInternalSetTimeOutState+0x14>)
1a0020d0:	681b      	ldr	r3, [r3, #0]
1a0020d2:	6043      	str	r3, [r0, #4]
}
1a0020d4:	4770      	bx	lr
1a0020d6:	bf00      	nop
1a0020d8:	10002a60 	.word	0x10002a60
1a0020dc:	10002aa4 	.word	0x10002aa4

1a0020e0 <xTaskCheckForTimeOut>:
{
1a0020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a0020e2:	b150      	cbz	r0, 1a0020fa <xTaskCheckForTimeOut+0x1a>
1a0020e4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a0020e6:	b989      	cbnz	r1, 1a00210c <xTaskCheckForTimeOut+0x2c>
1a0020e8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020ec:	f383 8811 	msr	BASEPRI, r3
1a0020f0:	f3bf 8f6f 	isb	sy
1a0020f4:	f3bf 8f4f 	dsb	sy
1a0020f8:	e7fe      	b.n	1a0020f8 <xTaskCheckForTimeOut+0x18>
1a0020fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020fe:	f383 8811 	msr	BASEPRI, r3
1a002102:	f3bf 8f6f 	isb	sy
1a002106:	f3bf 8f4f 	dsb	sy
1a00210a:	e7fe      	b.n	1a00210a <xTaskCheckForTimeOut+0x2a>
1a00210c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00210e:	f000 fc29 	bl	1a002964 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a002112:	4b11      	ldr	r3, [pc, #68]	; (1a002158 <xTaskCheckForTimeOut+0x78>)
1a002114:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a002116:	6868      	ldr	r0, [r5, #4]
1a002118:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00211a:	6823      	ldr	r3, [r4, #0]
1a00211c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002120:	d016      	beq.n	1a002150 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002122:	682f      	ldr	r7, [r5, #0]
1a002124:	4e0d      	ldr	r6, [pc, #52]	; (1a00215c <xTaskCheckForTimeOut+0x7c>)
1a002126:	6836      	ldr	r6, [r6, #0]
1a002128:	42b7      	cmp	r7, r6
1a00212a:	d001      	beq.n	1a002130 <xTaskCheckForTimeOut+0x50>
1a00212c:	4288      	cmp	r0, r1
1a00212e:	d911      	bls.n	1a002154 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002130:	4293      	cmp	r3, r2
1a002132:	d803      	bhi.n	1a00213c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002134:	2300      	movs	r3, #0
1a002136:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002138:	2401      	movs	r4, #1
1a00213a:	e005      	b.n	1a002148 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a00213c:	1a9b      	subs	r3, r3, r2
1a00213e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002140:	4628      	mov	r0, r5
1a002142:	f7ff ffc1 	bl	1a0020c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002146:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002148:	f000 fc2e 	bl	1a0029a8 <vPortExitCritical>
}
1a00214c:	4620      	mov	r0, r4
1a00214e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a002150:	2400      	movs	r4, #0
1a002152:	e7f9      	b.n	1a002148 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002154:	2401      	movs	r4, #1
1a002156:	e7f7      	b.n	1a002148 <xTaskCheckForTimeOut+0x68>
1a002158:	10002aa4 	.word	0x10002aa4
1a00215c:	10002a60 	.word	0x10002a60

1a002160 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002160:	4b01      	ldr	r3, [pc, #4]	; (1a002168 <vTaskMissedYield+0x8>)
1a002162:	2201      	movs	r2, #1
1a002164:	601a      	str	r2, [r3, #0]
}
1a002166:	4770      	bx	lr
1a002168:	10002aa8 	.word	0x10002aa8

1a00216c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00216c:	4b05      	ldr	r3, [pc, #20]	; (1a002184 <xTaskGetSchedulerState+0x18>)
1a00216e:	681b      	ldr	r3, [r3, #0]
1a002170:	b133      	cbz	r3, 1a002180 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002172:	4b05      	ldr	r3, [pc, #20]	; (1a002188 <xTaskGetSchedulerState+0x1c>)
1a002174:	681b      	ldr	r3, [r3, #0]
1a002176:	b10b      	cbz	r3, 1a00217c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002178:	2000      	movs	r0, #0
	}
1a00217a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00217c:	2002      	movs	r0, #2
1a00217e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a002180:	2001      	movs	r0, #1
1a002182:	4770      	bx	lr
1a002184:	10002a78 	.word	0x10002a78
1a002188:	10002a28 	.word	0x10002a28

1a00218c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a00218c:	2800      	cmp	r0, #0
1a00218e:	d050      	beq.n	1a002232 <xTaskPriorityInherit+0xa6>
	{
1a002190:	b538      	push	{r3, r4, r5, lr}
1a002192:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a002194:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
1a002196:	4928      	ldr	r1, [pc, #160]	; (1a002238 <xTaskPriorityInherit+0xac>)
1a002198:	6809      	ldr	r1, [r1, #0]
1a00219a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a00219c:	428a      	cmp	r2, r1
1a00219e:	d23e      	bcs.n	1a00221e <xTaskPriorityInherit+0x92>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a0021a0:	6981      	ldr	r1, [r0, #24]
1a0021a2:	2900      	cmp	r1, #0
1a0021a4:	db05      	blt.n	1a0021b2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0021a6:	4924      	ldr	r1, [pc, #144]	; (1a002238 <xTaskPriorityInherit+0xac>)
1a0021a8:	6809      	ldr	r1, [r1, #0]
1a0021aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
1a0021ac:	f1c1 0107 	rsb	r1, r1, #7
1a0021b0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a0021b2:	6960      	ldr	r0, [r4, #20]
1a0021b4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0021b8:	0091      	lsls	r1, r2, #2
1a0021ba:	4a20      	ldr	r2, [pc, #128]	; (1a00223c <xTaskPriorityInherit+0xb0>)
1a0021bc:	440a      	add	r2, r1
1a0021be:	4290      	cmp	r0, r2
1a0021c0:	d005      	beq.n	1a0021ce <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0021c2:	4a1d      	ldr	r2, [pc, #116]	; (1a002238 <xTaskPriorityInherit+0xac>)
1a0021c4:	6812      	ldr	r2, [r2, #0]
1a0021c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a0021c8:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a0021ca:	2001      	movs	r0, #1
	}
1a0021cc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0021ce:	1d25      	adds	r5, r4, #4
1a0021d0:	4628      	mov	r0, r5
1a0021d2:	f7ff fa9e 	bl	1a001712 <uxListRemove>
1a0021d6:	b968      	cbnz	r0, 1a0021f4 <xTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a0021d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0021da:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0021de:	008a      	lsls	r2, r1, #2
1a0021e0:	4916      	ldr	r1, [pc, #88]	; (1a00223c <xTaskPriorityInherit+0xb0>)
1a0021e2:	588a      	ldr	r2, [r1, r2]
1a0021e4:	b932      	cbnz	r2, 1a0021f4 <xTaskPriorityInherit+0x68>
1a0021e6:	2201      	movs	r2, #1
1a0021e8:	409a      	lsls	r2, r3
1a0021ea:	4915      	ldr	r1, [pc, #84]	; (1a002240 <xTaskPriorityInherit+0xb4>)
1a0021ec:	680b      	ldr	r3, [r1, #0]
1a0021ee:	ea23 0302 	bic.w	r3, r3, r2
1a0021f2:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a0021f4:	4b10      	ldr	r3, [pc, #64]	; (1a002238 <xTaskPriorityInherit+0xac>)
1a0021f6:	681b      	ldr	r3, [r3, #0]
1a0021f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0021fa:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a0021fc:	2401      	movs	r4, #1
1a0021fe:	fa04 f203 	lsl.w	r2, r4, r3
1a002202:	490f      	ldr	r1, [pc, #60]	; (1a002240 <xTaskPriorityInherit+0xb4>)
1a002204:	6808      	ldr	r0, [r1, #0]
1a002206:	4302      	orrs	r2, r0
1a002208:	600a      	str	r2, [r1, #0]
1a00220a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00220e:	009a      	lsls	r2, r3, #2
1a002210:	4629      	mov	r1, r5
1a002212:	480a      	ldr	r0, [pc, #40]	; (1a00223c <xTaskPriorityInherit+0xb0>)
1a002214:	4410      	add	r0, r2
1a002216:	f7ff fa56 	bl	1a0016c6 <vListInsertEnd>
				xReturn = pdTRUE;
1a00221a:	4620      	mov	r0, r4
1a00221c:	e7d6      	b.n	1a0021cc <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a00221e:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a002220:	4b05      	ldr	r3, [pc, #20]	; (1a002238 <xTaskPriorityInherit+0xac>)
1a002222:	681b      	ldr	r3, [r3, #0]
1a002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a002226:	429a      	cmp	r2, r3
1a002228:	d201      	bcs.n	1a00222e <xTaskPriorityInherit+0xa2>
					xReturn = pdTRUE;
1a00222a:	2001      	movs	r0, #1
		return xReturn;
1a00222c:	e7ce      	b.n	1a0021cc <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
1a00222e:	2000      	movs	r0, #0
1a002230:	e7cc      	b.n	1a0021cc <xTaskPriorityInherit+0x40>
1a002232:	2000      	movs	r0, #0
	}
1a002234:	4770      	bx	lr
1a002236:	bf00      	nop
1a002238:	10002984 	.word	0x10002984
1a00223c:	10002990 	.word	0x10002990
1a002240:	10002a30 	.word	0x10002a30

1a002244 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a002244:	2800      	cmp	r0, #0
1a002246:	d049      	beq.n	1a0022dc <xTaskPriorityDisinherit+0x98>
	{
1a002248:	b538      	push	{r3, r4, r5, lr}
1a00224a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a00224c:	4a26      	ldr	r2, [pc, #152]	; (1a0022e8 <xTaskPriorityDisinherit+0xa4>)
1a00224e:	6812      	ldr	r2, [r2, #0]
1a002250:	4282      	cmp	r2, r0
1a002252:	d008      	beq.n	1a002266 <xTaskPriorityDisinherit+0x22>
1a002254:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002258:	f383 8811 	msr	BASEPRI, r3
1a00225c:	f3bf 8f6f 	isb	sy
1a002260:	f3bf 8f4f 	dsb	sy
1a002264:	e7fe      	b.n	1a002264 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a002266:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a002268:	b942      	cbnz	r2, 1a00227c <xTaskPriorityDisinherit+0x38>
1a00226a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00226e:	f383 8811 	msr	BASEPRI, r3
1a002272:	f3bf 8f6f 	isb	sy
1a002276:	f3bf 8f4f 	dsb	sy
1a00227a:	e7fe      	b.n	1a00227a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a00227c:	3a01      	subs	r2, #1
1a00227e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a002280:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a002282:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a002284:	4288      	cmp	r0, r1
1a002286:	d02b      	beq.n	1a0022e0 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a002288:	bb62      	cbnz	r2, 1a0022e4 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00228a:	1d25      	adds	r5, r4, #4
1a00228c:	4628      	mov	r0, r5
1a00228e:	f7ff fa40 	bl	1a001712 <uxListRemove>
1a002292:	b970      	cbnz	r0, 1a0022b2 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002294:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002296:	2314      	movs	r3, #20
1a002298:	fb03 f302 	mul.w	r3, r3, r2
1a00229c:	4913      	ldr	r1, [pc, #76]	; (1a0022ec <xTaskPriorityDisinherit+0xa8>)
1a00229e:	58cb      	ldr	r3, [r1, r3]
1a0022a0:	b93b      	cbnz	r3, 1a0022b2 <xTaskPriorityDisinherit+0x6e>
1a0022a2:	2301      	movs	r3, #1
1a0022a4:	fa03 f202 	lsl.w	r2, r3, r2
1a0022a8:	4911      	ldr	r1, [pc, #68]	; (1a0022f0 <xTaskPriorityDisinherit+0xac>)
1a0022aa:	680b      	ldr	r3, [r1, #0]
1a0022ac:	ea23 0302 	bic.w	r3, r3, r2
1a0022b0:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a0022b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a0022b4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0022b6:	f1c3 0207 	rsb	r2, r3, #7
1a0022ba:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a0022bc:	2401      	movs	r4, #1
1a0022be:	fa04 f203 	lsl.w	r2, r4, r3
1a0022c2:	490b      	ldr	r1, [pc, #44]	; (1a0022f0 <xTaskPriorityDisinherit+0xac>)
1a0022c4:	6808      	ldr	r0, [r1, #0]
1a0022c6:	4302      	orrs	r2, r0
1a0022c8:	600a      	str	r2, [r1, #0]
1a0022ca:	4629      	mov	r1, r5
1a0022cc:	4a07      	ldr	r2, [pc, #28]	; (1a0022ec <xTaskPriorityDisinherit+0xa8>)
1a0022ce:	2014      	movs	r0, #20
1a0022d0:	fb00 2003 	mla	r0, r0, r3, r2
1a0022d4:	f7ff f9f7 	bl	1a0016c6 <vListInsertEnd>
					xReturn = pdTRUE;
1a0022d8:	4620      	mov	r0, r4
	}
1a0022da:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0022dc:	2000      	movs	r0, #0
	}
1a0022de:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0022e0:	2000      	movs	r0, #0
1a0022e2:	e7fa      	b.n	1a0022da <xTaskPriorityDisinherit+0x96>
1a0022e4:	2000      	movs	r0, #0
		return xReturn;
1a0022e6:	e7f8      	b.n	1a0022da <xTaskPriorityDisinherit+0x96>
1a0022e8:	10002984 	.word	0x10002984
1a0022ec:	10002990 	.word	0x10002990
1a0022f0:	10002a30 	.word	0x10002a30

1a0022f4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a0022f4:	2800      	cmp	r0, #0
1a0022f6:	d055      	beq.n	1a0023a4 <vTaskPriorityDisinheritAfterTimeout+0xb0>
	{
1a0022f8:	b538      	push	{r3, r4, r5, lr}
1a0022fa:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a0022fc:	6d40      	ldr	r0, [r0, #84]	; 0x54
1a0022fe:	b940      	cbnz	r0, 1a002312 <vTaskPriorityDisinheritAfterTimeout+0x1e>
1a002300:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002304:	f383 8811 	msr	BASEPRI, r3
1a002308:	f3bf 8f6f 	isb	sy
1a00230c:	f3bf 8f4f 	dsb	sy
1a002310:	e7fe      	b.n	1a002310 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a002312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
1a002314:	428a      	cmp	r2, r1
1a002316:	d200      	bcs.n	1a00231a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a002318:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
1a00231a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
1a00231c:	4291      	cmp	r1, r2
1a00231e:	d001      	beq.n	1a002324 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a002320:	2801      	cmp	r0, #1
1a002322:	d000      	beq.n	1a002326 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
1a002324:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a002326:	4820      	ldr	r0, [pc, #128]	; (1a0023a8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
1a002328:	6800      	ldr	r0, [r0, #0]
1a00232a:	4298      	cmp	r0, r3
1a00232c:	d108      	bne.n	1a002340 <vTaskPriorityDisinheritAfterTimeout+0x4c>
1a00232e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002332:	f383 8811 	msr	BASEPRI, r3
1a002336:	f3bf 8f6f 	isb	sy
1a00233a:	f3bf 8f4f 	dsb	sy
1a00233e:	e7fe      	b.n	1a00233e <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
1a002340:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a002342:	6998      	ldr	r0, [r3, #24]
1a002344:	2800      	cmp	r0, #0
1a002346:	db02      	blt.n	1a00234e <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002348:	f1c2 0207 	rsb	r2, r2, #7
1a00234c:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a00234e:	695a      	ldr	r2, [r3, #20]
1a002350:	4816      	ldr	r0, [pc, #88]	; (1a0023ac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002352:	2414      	movs	r4, #20
1a002354:	fb04 0101 	mla	r1, r4, r1, r0
1a002358:	428a      	cmp	r2, r1
1a00235a:	d1e3      	bne.n	1a002324 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a00235c:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00235e:	1d1d      	adds	r5, r3, #4
1a002360:	4628      	mov	r0, r5
1a002362:	f7ff f9d6 	bl	1a001712 <uxListRemove>
1a002366:	b970      	cbnz	r0, 1a002386 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a002368:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00236a:	2314      	movs	r3, #20
1a00236c:	fb03 f302 	mul.w	r3, r3, r2
1a002370:	490e      	ldr	r1, [pc, #56]	; (1a0023ac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002372:	58cb      	ldr	r3, [r1, r3]
1a002374:	b93b      	cbnz	r3, 1a002386 <vTaskPriorityDisinheritAfterTimeout+0x92>
1a002376:	2301      	movs	r3, #1
1a002378:	fa03 f202 	lsl.w	r2, r3, r2
1a00237c:	490c      	ldr	r1, [pc, #48]	; (1a0023b0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a00237e:	680b      	ldr	r3, [r1, #0]
1a002380:	ea23 0302 	bic.w	r3, r3, r2
1a002384:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a002386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002388:	2301      	movs	r3, #1
1a00238a:	4093      	lsls	r3, r2
1a00238c:	4908      	ldr	r1, [pc, #32]	; (1a0023b0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a00238e:	6808      	ldr	r0, [r1, #0]
1a002390:	4303      	orrs	r3, r0
1a002392:	600b      	str	r3, [r1, #0]
1a002394:	4629      	mov	r1, r5
1a002396:	4b05      	ldr	r3, [pc, #20]	; (1a0023ac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a002398:	2014      	movs	r0, #20
1a00239a:	fb00 3002 	mla	r0, r0, r2, r3
1a00239e:	f7ff f992 	bl	1a0016c6 <vListInsertEnd>
	}
1a0023a2:	e7bf      	b.n	1a002324 <vTaskPriorityDisinheritAfterTimeout+0x30>
1a0023a4:	4770      	bx	lr
1a0023a6:	bf00      	nop
1a0023a8:	10002984 	.word	0x10002984
1a0023ac:	10002990 	.word	0x10002990
1a0023b0:	10002a30 	.word	0x10002a30

1a0023b4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a0023b4:	4b05      	ldr	r3, [pc, #20]	; (1a0023cc <pvTaskIncrementMutexHeldCount+0x18>)
1a0023b6:	681b      	ldr	r3, [r3, #0]
1a0023b8:	b123      	cbz	r3, 1a0023c4 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a0023ba:	4b04      	ldr	r3, [pc, #16]	; (1a0023cc <pvTaskIncrementMutexHeldCount+0x18>)
1a0023bc:	681a      	ldr	r2, [r3, #0]
1a0023be:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a0023c0:	3301      	adds	r3, #1
1a0023c2:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a0023c4:	4b01      	ldr	r3, [pc, #4]	; (1a0023cc <pvTaskIncrementMutexHeldCount+0x18>)
1a0023c6:	6818      	ldr	r0, [r3, #0]
	}
1a0023c8:	4770      	bx	lr
1a0023ca:	bf00      	nop
1a0023cc:	10002984 	.word	0x10002984

1a0023d0 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0023d0:	4b06      	ldr	r3, [pc, #24]	; (1a0023ec <prvGetNextExpireTime+0x1c>)
1a0023d2:	681a      	ldr	r2, [r3, #0]
1a0023d4:	6813      	ldr	r3, [r2, #0]
1a0023d6:	fab3 f383 	clz	r3, r3
1a0023da:	095b      	lsrs	r3, r3, #5
1a0023dc:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0023de:	b913      	cbnz	r3, 1a0023e6 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0023e0:	68d3      	ldr	r3, [r2, #12]
1a0023e2:	6818      	ldr	r0, [r3, #0]
1a0023e4:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0023e6:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0023e8:	4770      	bx	lr
1a0023ea:	bf00      	nop
1a0023ec:	10002aac 	.word	0x10002aac

1a0023f0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0023f0:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0023f2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0023f4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0023f6:	4291      	cmp	r1, r2
1a0023f8:	d80c      	bhi.n	1a002414 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0023fa:	1ad2      	subs	r2, r2, r3
1a0023fc:	6983      	ldr	r3, [r0, #24]
1a0023fe:	429a      	cmp	r2, r3
1a002400:	d301      	bcc.n	1a002406 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002402:	2001      	movs	r0, #1
1a002404:	e010      	b.n	1a002428 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002406:	1d01      	adds	r1, r0, #4
1a002408:	4b09      	ldr	r3, [pc, #36]	; (1a002430 <prvInsertTimerInActiveList+0x40>)
1a00240a:	6818      	ldr	r0, [r3, #0]
1a00240c:	f7ff f967 	bl	1a0016de <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002410:	2000      	movs	r0, #0
1a002412:	e009      	b.n	1a002428 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a002414:	429a      	cmp	r2, r3
1a002416:	d201      	bcs.n	1a00241c <prvInsertTimerInActiveList+0x2c>
1a002418:	4299      	cmp	r1, r3
1a00241a:	d206      	bcs.n	1a00242a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00241c:	1d01      	adds	r1, r0, #4
1a00241e:	4b05      	ldr	r3, [pc, #20]	; (1a002434 <prvInsertTimerInActiveList+0x44>)
1a002420:	6818      	ldr	r0, [r3, #0]
1a002422:	f7ff f95c 	bl	1a0016de <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a002426:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a002428:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00242a:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a00242c:	e7fc      	b.n	1a002428 <prvInsertTimerInActiveList+0x38>
1a00242e:	bf00      	nop
1a002430:	10002ab0 	.word	0x10002ab0
1a002434:	10002aac 	.word	0x10002aac

1a002438 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002438:	b530      	push	{r4, r5, lr}
1a00243a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a00243c:	f000 fa92 	bl	1a002964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a002440:	4b11      	ldr	r3, [pc, #68]	; (1a002488 <prvCheckForValidListAndQueue+0x50>)
1a002442:	681b      	ldr	r3, [r3, #0]
1a002444:	b11b      	cbz	r3, 1a00244e <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a002446:	f000 faaf 	bl	1a0029a8 <vPortExitCritical>
}
1a00244a:	b003      	add	sp, #12
1a00244c:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a00244e:	4d0f      	ldr	r5, [pc, #60]	; (1a00248c <prvCheckForValidListAndQueue+0x54>)
1a002450:	4628      	mov	r0, r5
1a002452:	f7ff f92a 	bl	1a0016aa <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a002456:	4c0e      	ldr	r4, [pc, #56]	; (1a002490 <prvCheckForValidListAndQueue+0x58>)
1a002458:	4620      	mov	r0, r4
1a00245a:	f7ff f926 	bl	1a0016aa <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a00245e:	4b0d      	ldr	r3, [pc, #52]	; (1a002494 <prvCheckForValidListAndQueue+0x5c>)
1a002460:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002462:	4b0d      	ldr	r3, [pc, #52]	; (1a002498 <prvCheckForValidListAndQueue+0x60>)
1a002464:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a002466:	2300      	movs	r3, #0
1a002468:	9300      	str	r3, [sp, #0]
1a00246a:	4b0c      	ldr	r3, [pc, #48]	; (1a00249c <prvCheckForValidListAndQueue+0x64>)
1a00246c:	4a0c      	ldr	r2, [pc, #48]	; (1a0024a0 <prvCheckForValidListAndQueue+0x68>)
1a00246e:	2110      	movs	r1, #16
1a002470:	200a      	movs	r0, #10
1a002472:	f7fe fd8c 	bl	1a000f8e <xQueueGenericCreateStatic>
1a002476:	4b04      	ldr	r3, [pc, #16]	; (1a002488 <prvCheckForValidListAndQueue+0x50>)
1a002478:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a00247a:	2800      	cmp	r0, #0
1a00247c:	d0e3      	beq.n	1a002446 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00247e:	4909      	ldr	r1, [pc, #36]	; (1a0024a4 <prvCheckForValidListAndQueue+0x6c>)
1a002480:	f7ff f8aa 	bl	1a0015d8 <vQueueAddToRegistry>
1a002484:	e7df      	b.n	1a002446 <prvCheckForValidListAndQueue+0xe>
1a002486:	bf00      	nop
1a002488:	10002bd0 	.word	0x10002bd0
1a00248c:	10002b54 	.word	0x10002b54
1a002490:	10002b68 	.word	0x10002b68
1a002494:	10002aac 	.word	0x10002aac
1a002498:	10002ab0 	.word	0x10002ab0
1a00249c:	10002b80 	.word	0x10002b80
1a0024a0:	10002ab4 	.word	0x10002ab4
1a0024a4:	1a005a68 	.word	0x1a005a68

1a0024a8 <prvInitialiseNewTimer>:
{
1a0024a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0024ac:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0024ae:	b941      	cbnz	r1, 1a0024c2 <prvInitialiseNewTimer+0x1a>
1a0024b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024b4:	f383 8811 	msr	BASEPRI, r3
1a0024b8:	f3bf 8f6f 	isb	sy
1a0024bc:	f3bf 8f4f 	dsb	sy
1a0024c0:	e7fe      	b.n	1a0024c0 <prvInitialiseNewTimer+0x18>
1a0024c2:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0024c4:	b174      	cbz	r4, 1a0024e4 <prvInitialiseNewTimer+0x3c>
1a0024c6:	461d      	mov	r5, r3
1a0024c8:	4616      	mov	r6, r2
1a0024ca:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0024cc:	f7ff ffb4 	bl	1a002438 <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0024d0:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0024d4:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0024d6:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0024d8:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0024da:	9b06      	ldr	r3, [sp, #24]
1a0024dc:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0024de:	1d20      	adds	r0, r4, #4
1a0024e0:	f7ff f8ee 	bl	1a0016c0 <vListInitialiseItem>
}
1a0024e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0024e8 <xTimerCreateTimerTask>:
{
1a0024e8:	b510      	push	{r4, lr}
1a0024ea:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0024ec:	f7ff ffa4 	bl	1a002438 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0024f0:	4b12      	ldr	r3, [pc, #72]	; (1a00253c <xTimerCreateTimerTask+0x54>)
1a0024f2:	681b      	ldr	r3, [r3, #0]
1a0024f4:	b1cb      	cbz	r3, 1a00252a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0024f6:	2400      	movs	r4, #0
1a0024f8:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0024fa:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a0024fc:	aa07      	add	r2, sp, #28
1a0024fe:	a906      	add	r1, sp, #24
1a002500:	a805      	add	r0, sp, #20
1a002502:	f7ff f927 	bl	1a001754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002506:	9b05      	ldr	r3, [sp, #20]
1a002508:	9302      	str	r3, [sp, #8]
1a00250a:	9b06      	ldr	r3, [sp, #24]
1a00250c:	9301      	str	r3, [sp, #4]
1a00250e:	2304      	movs	r3, #4
1a002510:	9300      	str	r3, [sp, #0]
1a002512:	4623      	mov	r3, r4
1a002514:	9a07      	ldr	r2, [sp, #28]
1a002516:	490a      	ldr	r1, [pc, #40]	; (1a002540 <xTimerCreateTimerTask+0x58>)
1a002518:	480a      	ldr	r0, [pc, #40]	; (1a002544 <xTimerCreateTimerTask+0x5c>)
1a00251a:	f7ff fab5 	bl	1a001a88 <xTaskCreateStatic>
1a00251e:	4b0a      	ldr	r3, [pc, #40]	; (1a002548 <xTimerCreateTimerTask+0x60>)
1a002520:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a002522:	b110      	cbz	r0, 1a00252a <xTimerCreateTimerTask+0x42>
}
1a002524:	2001      	movs	r0, #1
1a002526:	b008      	add	sp, #32
1a002528:	bd10      	pop	{r4, pc}
1a00252a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00252e:	f383 8811 	msr	BASEPRI, r3
1a002532:	f3bf 8f6f 	isb	sy
1a002536:	f3bf 8f4f 	dsb	sy
1a00253a:	e7fe      	b.n	1a00253a <xTimerCreateTimerTask+0x52>
1a00253c:	10002bd0 	.word	0x10002bd0
1a002540:	1a005a70 	.word	0x1a005a70
1a002544:	1a002879 	.word	0x1a002879
1a002548:	10002bd4 	.word	0x10002bd4

1a00254c <xTimerCreateStatic>:
	{
1a00254c:	b530      	push	{r4, r5, lr}
1a00254e:	b085      	sub	sp, #20
1a002550:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002552:	2530      	movs	r5, #48	; 0x30
1a002554:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a002556:	9d03      	ldr	r5, [sp, #12]
1a002558:	2d30      	cmp	r5, #48	; 0x30
1a00255a:	d008      	beq.n	1a00256e <xTimerCreateStatic+0x22>
1a00255c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002560:	f383 8811 	msr	BASEPRI, r3
1a002564:	f3bf 8f6f 	isb	sy
1a002568:	f3bf 8f4f 	dsb	sy
1a00256c:	e7fe      	b.n	1a00256c <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a00256e:	b944      	cbnz	r4, 1a002582 <xTimerCreateStatic+0x36>
1a002570:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002574:	f383 8811 	msr	BASEPRI, r3
1a002578:	f3bf 8f6f 	isb	sy
1a00257c:	f3bf 8f4f 	dsb	sy
1a002580:	e7fe      	b.n	1a002580 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a002582:	9401      	str	r4, [sp, #4]
1a002584:	9d08      	ldr	r5, [sp, #32]
1a002586:	9500      	str	r5, [sp, #0]
1a002588:	f7ff ff8e 	bl	1a0024a8 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a00258c:	2301      	movs	r3, #1
1a00258e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a002592:	4620      	mov	r0, r4
1a002594:	b005      	add	sp, #20
1a002596:	bd30      	pop	{r4, r5, pc}

1a002598 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002598:	b1c8      	cbz	r0, 1a0025ce <xTimerGenericCommand+0x36>
{
1a00259a:	b530      	push	{r4, r5, lr}
1a00259c:	b085      	sub	sp, #20
1a00259e:	4615      	mov	r5, r2
1a0025a0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0025a2:	4a17      	ldr	r2, [pc, #92]	; (1a002600 <xTimerGenericCommand+0x68>)
1a0025a4:	6810      	ldr	r0, [r2, #0]
1a0025a6:	b340      	cbz	r0, 1a0025fa <xTimerGenericCommand+0x62>
1a0025a8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0025aa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0025ac:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0025ae:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0025b0:	2905      	cmp	r1, #5
1a0025b2:	dc1d      	bgt.n	1a0025f0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0025b4:	f7ff fdda 	bl	1a00216c <xTaskGetSchedulerState>
1a0025b8:	2802      	cmp	r0, #2
1a0025ba:	d011      	beq.n	1a0025e0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0025bc:	2300      	movs	r3, #0
1a0025be:	461a      	mov	r2, r3
1a0025c0:	4669      	mov	r1, sp
1a0025c2:	480f      	ldr	r0, [pc, #60]	; (1a002600 <xTimerGenericCommand+0x68>)
1a0025c4:	6800      	ldr	r0, [r0, #0]
1a0025c6:	f7fe fd51 	bl	1a00106c <xQueueGenericSend>
}
1a0025ca:	b005      	add	sp, #20
1a0025cc:	bd30      	pop	{r4, r5, pc}
1a0025ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025d2:	f383 8811 	msr	BASEPRI, r3
1a0025d6:	f3bf 8f6f 	isb	sy
1a0025da:	f3bf 8f4f 	dsb	sy
1a0025de:	e7fe      	b.n	1a0025de <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0025e0:	2300      	movs	r3, #0
1a0025e2:	9a08      	ldr	r2, [sp, #32]
1a0025e4:	4669      	mov	r1, sp
1a0025e6:	4806      	ldr	r0, [pc, #24]	; (1a002600 <xTimerGenericCommand+0x68>)
1a0025e8:	6800      	ldr	r0, [r0, #0]
1a0025ea:	f7fe fd3f 	bl	1a00106c <xQueueGenericSend>
1a0025ee:	e7ec      	b.n	1a0025ca <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0025f0:	2300      	movs	r3, #0
1a0025f2:	4669      	mov	r1, sp
1a0025f4:	f7fe fe0f 	bl	1a001216 <xQueueGenericSendFromISR>
1a0025f8:	e7e7      	b.n	1a0025ca <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0025fa:	2000      	movs	r0, #0
	return xReturn;
1a0025fc:	e7e5      	b.n	1a0025ca <xTimerGenericCommand+0x32>
1a0025fe:	bf00      	nop
1a002600:	10002bd0 	.word	0x10002bd0

1a002604 <prvSwitchTimerLists>:
{
1a002604:	b570      	push	{r4, r5, r6, lr}
1a002606:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002608:	4b1a      	ldr	r3, [pc, #104]	; (1a002674 <prvSwitchTimerLists+0x70>)
1a00260a:	681b      	ldr	r3, [r3, #0]
1a00260c:	681a      	ldr	r2, [r3, #0]
1a00260e:	b352      	cbz	r2, 1a002666 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002610:	68db      	ldr	r3, [r3, #12]
1a002612:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002614:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002616:	1d25      	adds	r5, r4, #4
1a002618:	4628      	mov	r0, r5
1a00261a:	f7ff f87a 	bl	1a001712 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00261e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002620:	4620      	mov	r0, r4
1a002622:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002624:	69e3      	ldr	r3, [r4, #28]
1a002626:	2b01      	cmp	r3, #1
1a002628:	d1ee      	bne.n	1a002608 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00262a:	69a3      	ldr	r3, [r4, #24]
1a00262c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00262e:	429e      	cmp	r6, r3
1a002630:	d207      	bcs.n	1a002642 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002632:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002634:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002636:	4629      	mov	r1, r5
1a002638:	4b0e      	ldr	r3, [pc, #56]	; (1a002674 <prvSwitchTimerLists+0x70>)
1a00263a:	6818      	ldr	r0, [r3, #0]
1a00263c:	f7ff f84f 	bl	1a0016de <vListInsert>
1a002640:	e7e2      	b.n	1a002608 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002642:	2100      	movs	r1, #0
1a002644:	9100      	str	r1, [sp, #0]
1a002646:	460b      	mov	r3, r1
1a002648:	4632      	mov	r2, r6
1a00264a:	4620      	mov	r0, r4
1a00264c:	f7ff ffa4 	bl	1a002598 <xTimerGenericCommand>
				configASSERT( xResult );
1a002650:	2800      	cmp	r0, #0
1a002652:	d1d9      	bne.n	1a002608 <prvSwitchTimerLists+0x4>
1a002654:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002658:	f383 8811 	msr	BASEPRI, r3
1a00265c:	f3bf 8f6f 	isb	sy
1a002660:	f3bf 8f4f 	dsb	sy
1a002664:	e7fe      	b.n	1a002664 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002666:	4a04      	ldr	r2, [pc, #16]	; (1a002678 <prvSwitchTimerLists+0x74>)
1a002668:	6810      	ldr	r0, [r2, #0]
1a00266a:	4902      	ldr	r1, [pc, #8]	; (1a002674 <prvSwitchTimerLists+0x70>)
1a00266c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00266e:	6013      	str	r3, [r2, #0]
}
1a002670:	b002      	add	sp, #8
1a002672:	bd70      	pop	{r4, r5, r6, pc}
1a002674:	10002aac 	.word	0x10002aac
1a002678:	10002ab0 	.word	0x10002ab0

1a00267c <prvSampleTimeNow>:
{
1a00267c:	b538      	push	{r3, r4, r5, lr}
1a00267e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002680:	f7ff fac0 	bl	1a001c04 <xTaskGetTickCount>
1a002684:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002686:	4b07      	ldr	r3, [pc, #28]	; (1a0026a4 <prvSampleTimeNow+0x28>)
1a002688:	681b      	ldr	r3, [r3, #0]
1a00268a:	4283      	cmp	r3, r0
1a00268c:	d805      	bhi.n	1a00269a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00268e:	2300      	movs	r3, #0
1a002690:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002692:	4b04      	ldr	r3, [pc, #16]	; (1a0026a4 <prvSampleTimeNow+0x28>)
1a002694:	601c      	str	r4, [r3, #0]
}
1a002696:	4620      	mov	r0, r4
1a002698:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00269a:	f7ff ffb3 	bl	1a002604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00269e:	2301      	movs	r3, #1
1a0026a0:	602b      	str	r3, [r5, #0]
1a0026a2:	e7f6      	b.n	1a002692 <prvSampleTimeNow+0x16>
1a0026a4:	10002b7c 	.word	0x10002b7c

1a0026a8 <prvProcessExpiredTimer>:
{
1a0026a8:	b570      	push	{r4, r5, r6, lr}
1a0026aa:	b082      	sub	sp, #8
1a0026ac:	4605      	mov	r5, r0
1a0026ae:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0026b0:	4b14      	ldr	r3, [pc, #80]	; (1a002704 <prvProcessExpiredTimer+0x5c>)
1a0026b2:	681b      	ldr	r3, [r3, #0]
1a0026b4:	68db      	ldr	r3, [r3, #12]
1a0026b6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0026b8:	1d20      	adds	r0, r4, #4
1a0026ba:	f7ff f82a 	bl	1a001712 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0026be:	69e3      	ldr	r3, [r4, #28]
1a0026c0:	2b01      	cmp	r3, #1
1a0026c2:	d004      	beq.n	1a0026ce <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026c6:	4620      	mov	r0, r4
1a0026c8:	4798      	blx	r3
}
1a0026ca:	b002      	add	sp, #8
1a0026cc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0026ce:	69a1      	ldr	r1, [r4, #24]
1a0026d0:	462b      	mov	r3, r5
1a0026d2:	4632      	mov	r2, r6
1a0026d4:	4429      	add	r1, r5
1a0026d6:	4620      	mov	r0, r4
1a0026d8:	f7ff fe8a 	bl	1a0023f0 <prvInsertTimerInActiveList>
1a0026dc:	2800      	cmp	r0, #0
1a0026de:	d0f1      	beq.n	1a0026c4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0026e0:	2100      	movs	r1, #0
1a0026e2:	9100      	str	r1, [sp, #0]
1a0026e4:	460b      	mov	r3, r1
1a0026e6:	462a      	mov	r2, r5
1a0026e8:	4620      	mov	r0, r4
1a0026ea:	f7ff ff55 	bl	1a002598 <xTimerGenericCommand>
			configASSERT( xResult );
1a0026ee:	2800      	cmp	r0, #0
1a0026f0:	d1e8      	bne.n	1a0026c4 <prvProcessExpiredTimer+0x1c>
1a0026f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026f6:	f383 8811 	msr	BASEPRI, r3
1a0026fa:	f3bf 8f6f 	isb	sy
1a0026fe:	f3bf 8f4f 	dsb	sy
1a002702:	e7fe      	b.n	1a002702 <prvProcessExpiredTimer+0x5a>
1a002704:	10002aac 	.word	0x10002aac

1a002708 <prvProcessTimerOrBlockTask>:
{
1a002708:	b570      	push	{r4, r5, r6, lr}
1a00270a:	b082      	sub	sp, #8
1a00270c:	4606      	mov	r6, r0
1a00270e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002710:	f7ff fa70 	bl	1a001bf4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002714:	a801      	add	r0, sp, #4
1a002716:	f7ff ffb1 	bl	1a00267c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00271a:	9b01      	ldr	r3, [sp, #4]
1a00271c:	bb1b      	cbnz	r3, 1a002766 <prvProcessTimerOrBlockTask+0x5e>
1a00271e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002720:	b90c      	cbnz	r4, 1a002726 <prvProcessTimerOrBlockTask+0x1e>
1a002722:	42b0      	cmp	r0, r6
1a002724:	d218      	bcs.n	1a002758 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002726:	b12c      	cbz	r4, 1a002734 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002728:	4b11      	ldr	r3, [pc, #68]	; (1a002770 <prvProcessTimerOrBlockTask+0x68>)
1a00272a:	681b      	ldr	r3, [r3, #0]
1a00272c:	681c      	ldr	r4, [r3, #0]
1a00272e:	fab4 f484 	clz	r4, r4
1a002732:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002734:	4622      	mov	r2, r4
1a002736:	1b71      	subs	r1, r6, r5
1a002738:	4b0e      	ldr	r3, [pc, #56]	; (1a002774 <prvProcessTimerOrBlockTask+0x6c>)
1a00273a:	6818      	ldr	r0, [r3, #0]
1a00273c:	f7fe ff8c 	bl	1a001658 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002740:	f7ff faf2 	bl	1a001d28 <xTaskResumeAll>
1a002744:	b988      	cbnz	r0, 1a00276a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002746:	4b0c      	ldr	r3, [pc, #48]	; (1a002778 <prvProcessTimerOrBlockTask+0x70>)
1a002748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00274c:	601a      	str	r2, [r3, #0]
1a00274e:	f3bf 8f4f 	dsb	sy
1a002752:	f3bf 8f6f 	isb	sy
1a002756:	e008      	b.n	1a00276a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002758:	f7ff fae6 	bl	1a001d28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a00275c:	4629      	mov	r1, r5
1a00275e:	4630      	mov	r0, r6
1a002760:	f7ff ffa2 	bl	1a0026a8 <prvProcessExpiredTimer>
1a002764:	e001      	b.n	1a00276a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002766:	f7ff fadf 	bl	1a001d28 <xTaskResumeAll>
}
1a00276a:	b002      	add	sp, #8
1a00276c:	bd70      	pop	{r4, r5, r6, pc}
1a00276e:	bf00      	nop
1a002770:	10002ab0 	.word	0x10002ab0
1a002774:	10002bd0 	.word	0x10002bd0
1a002778:	e000ed04 	.word	0xe000ed04

1a00277c <prvProcessReceivedCommands>:
{
1a00277c:	b530      	push	{r4, r5, lr}
1a00277e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002780:	e002      	b.n	1a002788 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002782:	9b04      	ldr	r3, [sp, #16]
1a002784:	2b00      	cmp	r3, #0
1a002786:	da0f      	bge.n	1a0027a8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002788:	2200      	movs	r2, #0
1a00278a:	a904      	add	r1, sp, #16
1a00278c:	4b39      	ldr	r3, [pc, #228]	; (1a002874 <prvProcessReceivedCommands+0xf8>)
1a00278e:	6818      	ldr	r0, [r3, #0]
1a002790:	f7fe fda8 	bl	1a0012e4 <xQueueReceive>
1a002794:	2800      	cmp	r0, #0
1a002796:	d06a      	beq.n	1a00286e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002798:	9b04      	ldr	r3, [sp, #16]
1a00279a:	2b00      	cmp	r3, #0
1a00279c:	daf1      	bge.n	1a002782 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00279e:	9907      	ldr	r1, [sp, #28]
1a0027a0:	9806      	ldr	r0, [sp, #24]
1a0027a2:	9b05      	ldr	r3, [sp, #20]
1a0027a4:	4798      	blx	r3
1a0027a6:	e7ec      	b.n	1a002782 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0027a8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0027aa:	6963      	ldr	r3, [r4, #20]
1a0027ac:	b113      	cbz	r3, 1a0027b4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0027ae:	1d20      	adds	r0, r4, #4
1a0027b0:	f7fe ffaf 	bl	1a001712 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0027b4:	a803      	add	r0, sp, #12
1a0027b6:	f7ff ff61 	bl	1a00267c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0027ba:	9b04      	ldr	r3, [sp, #16]
1a0027bc:	2b09      	cmp	r3, #9
1a0027be:	d8e3      	bhi.n	1a002788 <prvProcessReceivedCommands+0xc>
1a0027c0:	a201      	add	r2, pc, #4	; (adr r2, 1a0027c8 <prvProcessReceivedCommands+0x4c>)
1a0027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0027c6:	bf00      	nop
1a0027c8:	1a0027f1 	.word	0x1a0027f1
1a0027cc:	1a0027f1 	.word	0x1a0027f1
1a0027d0:	1a0027f1 	.word	0x1a0027f1
1a0027d4:	1a002789 	.word	0x1a002789
1a0027d8:	1a002839 	.word	0x1a002839
1a0027dc:	1a00285f 	.word	0x1a00285f
1a0027e0:	1a0027f1 	.word	0x1a0027f1
1a0027e4:	1a0027f1 	.word	0x1a0027f1
1a0027e8:	1a002789 	.word	0x1a002789
1a0027ec:	1a002839 	.word	0x1a002839
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0027f0:	9905      	ldr	r1, [sp, #20]
1a0027f2:	69a5      	ldr	r5, [r4, #24]
1a0027f4:	460b      	mov	r3, r1
1a0027f6:	4602      	mov	r2, r0
1a0027f8:	4429      	add	r1, r5
1a0027fa:	4620      	mov	r0, r4
1a0027fc:	f7ff fdf8 	bl	1a0023f0 <prvInsertTimerInActiveList>
1a002800:	2800      	cmp	r0, #0
1a002802:	d0c1      	beq.n	1a002788 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002804:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002806:	4620      	mov	r0, r4
1a002808:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00280a:	69e3      	ldr	r3, [r4, #28]
1a00280c:	2b01      	cmp	r3, #1
1a00280e:	d1bb      	bne.n	1a002788 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002810:	69a2      	ldr	r2, [r4, #24]
1a002812:	2100      	movs	r1, #0
1a002814:	9100      	str	r1, [sp, #0]
1a002816:	460b      	mov	r3, r1
1a002818:	9805      	ldr	r0, [sp, #20]
1a00281a:	4402      	add	r2, r0
1a00281c:	4620      	mov	r0, r4
1a00281e:	f7ff febb 	bl	1a002598 <xTimerGenericCommand>
							configASSERT( xResult );
1a002822:	2800      	cmp	r0, #0
1a002824:	d1b0      	bne.n	1a002788 <prvProcessReceivedCommands+0xc>
1a002826:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00282a:	f383 8811 	msr	BASEPRI, r3
1a00282e:	f3bf 8f6f 	isb	sy
1a002832:	f3bf 8f4f 	dsb	sy
1a002836:	e7fe      	b.n	1a002836 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002838:	9905      	ldr	r1, [sp, #20]
1a00283a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00283c:	b131      	cbz	r1, 1a00284c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00283e:	4603      	mov	r3, r0
1a002840:	4602      	mov	r2, r0
1a002842:	4401      	add	r1, r0
1a002844:	4620      	mov	r0, r4
1a002846:	f7ff fdd3 	bl	1a0023f0 <prvInsertTimerInActiveList>
					break;
1a00284a:	e79d      	b.n	1a002788 <prvProcessReceivedCommands+0xc>
1a00284c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002850:	f383 8811 	msr	BASEPRI, r3
1a002854:	f3bf 8f6f 	isb	sy
1a002858:	f3bf 8f4f 	dsb	sy
1a00285c:	e7fe      	b.n	1a00285c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00285e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002862:	2b00      	cmp	r3, #0
1a002864:	d190      	bne.n	1a002788 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002866:	4620      	mov	r0, r4
1a002868:	f7fe fa8a 	bl	1a000d80 <vPortFree>
1a00286c:	e78c      	b.n	1a002788 <prvProcessReceivedCommands+0xc>
}
1a00286e:	b009      	add	sp, #36	; 0x24
1a002870:	bd30      	pop	{r4, r5, pc}
1a002872:	bf00      	nop
1a002874:	10002bd0 	.word	0x10002bd0

1a002878 <prvTimerTask>:
{
1a002878:	b500      	push	{lr}
1a00287a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a00287c:	a801      	add	r0, sp, #4
1a00287e:	f7ff fda7 	bl	1a0023d0 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002882:	9901      	ldr	r1, [sp, #4]
1a002884:	f7ff ff40 	bl	1a002708 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002888:	f7ff ff78 	bl	1a00277c <prvProcessReceivedCommands>
1a00288c:	e7f6      	b.n	1a00287c <prvTimerTask+0x4>
1a00288e:	Address 0x000000001a00288e is out of bounds.


1a002890 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002890:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002892:	2300      	movs	r3, #0
1a002894:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002896:	4b0d      	ldr	r3, [pc, #52]	; (1a0028cc <prvTaskExitError+0x3c>)
1a002898:	681b      	ldr	r3, [r3, #0]
1a00289a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00289e:	d008      	beq.n	1a0028b2 <prvTaskExitError+0x22>
1a0028a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028a4:	f383 8811 	msr	BASEPRI, r3
1a0028a8:	f3bf 8f6f 	isb	sy
1a0028ac:	f3bf 8f4f 	dsb	sy
1a0028b0:	e7fe      	b.n	1a0028b0 <prvTaskExitError+0x20>
1a0028b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028b6:	f383 8811 	msr	BASEPRI, r3
1a0028ba:	f3bf 8f6f 	isb	sy
1a0028be:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0028c2:	9b01      	ldr	r3, [sp, #4]
1a0028c4:	2b00      	cmp	r3, #0
1a0028c6:	d0fc      	beq.n	1a0028c2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0028c8:	b002      	add	sp, #8
1a0028ca:	4770      	bx	lr
1a0028cc:	10000004 	.word	0x10000004

1a0028d0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0028d0:	4808      	ldr	r0, [pc, #32]	; (1a0028f4 <prvPortStartFirstTask+0x24>)
1a0028d2:	6800      	ldr	r0, [r0, #0]
1a0028d4:	6800      	ldr	r0, [r0, #0]
1a0028d6:	f380 8808 	msr	MSP, r0
1a0028da:	f04f 0000 	mov.w	r0, #0
1a0028de:	f380 8814 	msr	CONTROL, r0
1a0028e2:	b662      	cpsie	i
1a0028e4:	b661      	cpsie	f
1a0028e6:	f3bf 8f4f 	dsb	sy
1a0028ea:	f3bf 8f6f 	isb	sy
1a0028ee:	df00      	svc	0
1a0028f0:	bf00      	nop
1a0028f2:	0000      	.short	0x0000
1a0028f4:	e000ed08 	.word	0xe000ed08

1a0028f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0028f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002908 <vPortEnableVFP+0x10>
1a0028fc:	6801      	ldr	r1, [r0, #0]
1a0028fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002902:	6001      	str	r1, [r0, #0]
1a002904:	4770      	bx	lr
1a002906:	0000      	.short	0x0000
1a002908:	e000ed88 	.word	0xe000ed88

1a00290c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a00290c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002910:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002914:	f021 0101 	bic.w	r1, r1, #1
1a002918:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00291c:	4b05      	ldr	r3, [pc, #20]	; (1a002934 <pxPortInitialiseStack+0x28>)
1a00291e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002922:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002926:	f06f 0302 	mvn.w	r3, #2
1a00292a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00292e:	3844      	subs	r0, #68	; 0x44
1a002930:	4770      	bx	lr
1a002932:	bf00      	nop
1a002934:	1a002891 	.word	0x1a002891
1a002938:	ffffffff 	.word	0xffffffff
1a00293c:	ffffffff 	.word	0xffffffff

1a002940 <SVC_Handler>:
	__asm volatile (
1a002940:	4b07      	ldr	r3, [pc, #28]	; (1a002960 <pxCurrentTCBConst2>)
1a002942:	6819      	ldr	r1, [r3, #0]
1a002944:	6808      	ldr	r0, [r1, #0]
1a002946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00294a:	f380 8809 	msr	PSP, r0
1a00294e:	f3bf 8f6f 	isb	sy
1a002952:	f04f 0000 	mov.w	r0, #0
1a002956:	f380 8811 	msr	BASEPRI, r0
1a00295a:	4770      	bx	lr
1a00295c:	f3af 8000 	nop.w

1a002960 <pxCurrentTCBConst2>:
1a002960:	10002984 	.word	0x10002984

1a002964 <vPortEnterCritical>:
1a002964:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002968:	f383 8811 	msr	BASEPRI, r3
1a00296c:	f3bf 8f6f 	isb	sy
1a002970:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002974:	4a0a      	ldr	r2, [pc, #40]	; (1a0029a0 <vPortEnterCritical+0x3c>)
1a002976:	6813      	ldr	r3, [r2, #0]
1a002978:	3301      	adds	r3, #1
1a00297a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00297c:	2b01      	cmp	r3, #1
1a00297e:	d000      	beq.n	1a002982 <vPortEnterCritical+0x1e>
}
1a002980:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002982:	4b08      	ldr	r3, [pc, #32]	; (1a0029a4 <vPortEnterCritical+0x40>)
1a002984:	681b      	ldr	r3, [r3, #0]
1a002986:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00298a:	d0f9      	beq.n	1a002980 <vPortEnterCritical+0x1c>
1a00298c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002990:	f383 8811 	msr	BASEPRI, r3
1a002994:	f3bf 8f6f 	isb	sy
1a002998:	f3bf 8f4f 	dsb	sy
1a00299c:	e7fe      	b.n	1a00299c <vPortEnterCritical+0x38>
1a00299e:	bf00      	nop
1a0029a0:	10000004 	.word	0x10000004
1a0029a4:	e000ed04 	.word	0xe000ed04

1a0029a8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0029a8:	4b09      	ldr	r3, [pc, #36]	; (1a0029d0 <vPortExitCritical+0x28>)
1a0029aa:	681b      	ldr	r3, [r3, #0]
1a0029ac:	b943      	cbnz	r3, 1a0029c0 <vPortExitCritical+0x18>
1a0029ae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029b2:	f383 8811 	msr	BASEPRI, r3
1a0029b6:	f3bf 8f6f 	isb	sy
1a0029ba:	f3bf 8f4f 	dsb	sy
1a0029be:	e7fe      	b.n	1a0029be <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0029c0:	3b01      	subs	r3, #1
1a0029c2:	4a03      	ldr	r2, [pc, #12]	; (1a0029d0 <vPortExitCritical+0x28>)
1a0029c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0029c6:	b90b      	cbnz	r3, 1a0029cc <vPortExitCritical+0x24>
	__asm volatile
1a0029c8:	f383 8811 	msr	BASEPRI, r3
}
1a0029cc:	4770      	bx	lr
1a0029ce:	bf00      	nop
1a0029d0:	10000004 	.word	0x10000004
1a0029d4:	ffffffff 	.word	0xffffffff
1a0029d8:	ffffffff 	.word	0xffffffff
1a0029dc:	ffffffff 	.word	0xffffffff

1a0029e0 <PendSV_Handler>:
	__asm volatile
1a0029e0:	f3ef 8009 	mrs	r0, PSP
1a0029e4:	f3bf 8f6f 	isb	sy
1a0029e8:	4b15      	ldr	r3, [pc, #84]	; (1a002a40 <pxCurrentTCBConst>)
1a0029ea:	681a      	ldr	r2, [r3, #0]
1a0029ec:	f01e 0f10 	tst.w	lr, #16
1a0029f0:	bf08      	it	eq
1a0029f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0029f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0029fa:	6010      	str	r0, [r2, #0]
1a0029fc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002a00:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002a04:	f380 8811 	msr	BASEPRI, r0
1a002a08:	f3bf 8f4f 	dsb	sy
1a002a0c:	f3bf 8f6f 	isb	sy
1a002a10:	f7ff fa7c 	bl	1a001f0c <vTaskSwitchContext>
1a002a14:	f04f 0000 	mov.w	r0, #0
1a002a18:	f380 8811 	msr	BASEPRI, r0
1a002a1c:	bc09      	pop	{r0, r3}
1a002a1e:	6819      	ldr	r1, [r3, #0]
1a002a20:	6808      	ldr	r0, [r1, #0]
1a002a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a26:	f01e 0f10 	tst.w	lr, #16
1a002a2a:	bf08      	it	eq
1a002a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002a30:	f380 8809 	msr	PSP, r0
1a002a34:	f3bf 8f6f 	isb	sy
1a002a38:	4770      	bx	lr
1a002a3a:	bf00      	nop
1a002a3c:	f3af 8000 	nop.w

1a002a40 <pxCurrentTCBConst>:
1a002a40:	10002984 	.word	0x10002984

1a002a44 <SysTick_Handler>:
{
1a002a44:	b508      	push	{r3, lr}
	__asm volatile
1a002a46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a4a:	f383 8811 	msr	BASEPRI, r3
1a002a4e:	f3bf 8f6f 	isb	sy
1a002a52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002a56:	f7ff f8db 	bl	1a001c10 <xTaskIncrementTick>
1a002a5a:	b118      	cbz	r0, 1a002a64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002a5c:	4b03      	ldr	r3, [pc, #12]	; (1a002a6c <SysTick_Handler+0x28>)
1a002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002a62:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002a64:	2300      	movs	r3, #0
1a002a66:	f383 8811 	msr	BASEPRI, r3
}
1a002a6a:	bd08      	pop	{r3, pc}
1a002a6c:	e000ed04 	.word	0xe000ed04

1a002a70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002a70:	4a08      	ldr	r2, [pc, #32]	; (1a002a94 <vPortSetupTimerInterrupt+0x24>)
1a002a72:	2300      	movs	r3, #0
1a002a74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002a76:	4908      	ldr	r1, [pc, #32]	; (1a002a98 <vPortSetupTimerInterrupt+0x28>)
1a002a78:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002a7a:	4b08      	ldr	r3, [pc, #32]	; (1a002a9c <vPortSetupTimerInterrupt+0x2c>)
1a002a7c:	681b      	ldr	r3, [r3, #0]
1a002a7e:	4908      	ldr	r1, [pc, #32]	; (1a002aa0 <vPortSetupTimerInterrupt+0x30>)
1a002a80:	fba1 1303 	umull	r1, r3, r1, r3
1a002a84:	099b      	lsrs	r3, r3, #6
1a002a86:	3b01      	subs	r3, #1
1a002a88:	4906      	ldr	r1, [pc, #24]	; (1a002aa4 <vPortSetupTimerInterrupt+0x34>)
1a002a8a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002a8c:	2307      	movs	r3, #7
1a002a8e:	6013      	str	r3, [r2, #0]
}
1a002a90:	4770      	bx	lr
1a002a92:	bf00      	nop
1a002a94:	e000e010 	.word	0xe000e010
1a002a98:	e000e018 	.word	0xe000e018
1a002a9c:	10002c8c 	.word	0x10002c8c
1a002aa0:	10624dd3 	.word	0x10624dd3
1a002aa4:	e000e014 	.word	0xe000e014

1a002aa8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002aa8:	4b3a      	ldr	r3, [pc, #232]	; (1a002b94 <xPortStartScheduler+0xec>)
1a002aaa:	681a      	ldr	r2, [r3, #0]
1a002aac:	4b3a      	ldr	r3, [pc, #232]	; (1a002b98 <xPortStartScheduler+0xf0>)
1a002aae:	429a      	cmp	r2, r3
1a002ab0:	d00d      	beq.n	1a002ace <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002ab2:	4b38      	ldr	r3, [pc, #224]	; (1a002b94 <xPortStartScheduler+0xec>)
1a002ab4:	681a      	ldr	r2, [r3, #0]
1a002ab6:	4b39      	ldr	r3, [pc, #228]	; (1a002b9c <xPortStartScheduler+0xf4>)
1a002ab8:	429a      	cmp	r2, r3
1a002aba:	d111      	bne.n	1a002ae0 <xPortStartScheduler+0x38>
	__asm volatile
1a002abc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ac0:	f383 8811 	msr	BASEPRI, r3
1a002ac4:	f3bf 8f6f 	isb	sy
1a002ac8:	f3bf 8f4f 	dsb	sy
1a002acc:	e7fe      	b.n	1a002acc <xPortStartScheduler+0x24>
1a002ace:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ad2:	f383 8811 	msr	BASEPRI, r3
1a002ad6:	f3bf 8f6f 	isb	sy
1a002ada:	f3bf 8f4f 	dsb	sy
1a002ade:	e7fe      	b.n	1a002ade <xPortStartScheduler+0x36>
{
1a002ae0:	b510      	push	{r4, lr}
1a002ae2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002ae4:	4b2e      	ldr	r3, [pc, #184]	; (1a002ba0 <xPortStartScheduler+0xf8>)
1a002ae6:	781a      	ldrb	r2, [r3, #0]
1a002ae8:	b2d2      	uxtb	r2, r2
1a002aea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002aec:	22ff      	movs	r2, #255	; 0xff
1a002aee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002af0:	781b      	ldrb	r3, [r3, #0]
1a002af2:	b2db      	uxtb	r3, r3
1a002af4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002af8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002afc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002b00:	4a28      	ldr	r2, [pc, #160]	; (1a002ba4 <xPortStartScheduler+0xfc>)
1a002b02:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002b04:	4b28      	ldr	r3, [pc, #160]	; (1a002ba8 <xPortStartScheduler+0x100>)
1a002b06:	2207      	movs	r2, #7
1a002b08:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002b0a:	e009      	b.n	1a002b20 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a002b0c:	4a26      	ldr	r2, [pc, #152]	; (1a002ba8 <xPortStartScheduler+0x100>)
1a002b0e:	6813      	ldr	r3, [r2, #0]
1a002b10:	3b01      	subs	r3, #1
1a002b12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002b14:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b18:	005b      	lsls	r3, r3, #1
1a002b1a:	b2db      	uxtb	r3, r3
1a002b1c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002b20:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b24:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b28:	d1f0      	bne.n	1a002b0c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002b2a:	4b1f      	ldr	r3, [pc, #124]	; (1a002ba8 <xPortStartScheduler+0x100>)
1a002b2c:	681b      	ldr	r3, [r3, #0]
1a002b2e:	2b04      	cmp	r3, #4
1a002b30:	d008      	beq.n	1a002b44 <xPortStartScheduler+0x9c>
1a002b32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b36:	f383 8811 	msr	BASEPRI, r3
1a002b3a:	f3bf 8f6f 	isb	sy
1a002b3e:	f3bf 8f4f 	dsb	sy
1a002b42:	e7fe      	b.n	1a002b42 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002b44:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002b4a:	4a17      	ldr	r2, [pc, #92]	; (1a002ba8 <xPortStartScheduler+0x100>)
1a002b4c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002b4e:	9b01      	ldr	r3, [sp, #4]
1a002b50:	b2db      	uxtb	r3, r3
1a002b52:	4a13      	ldr	r2, [pc, #76]	; (1a002ba0 <xPortStartScheduler+0xf8>)
1a002b54:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002b56:	4b15      	ldr	r3, [pc, #84]	; (1a002bac <xPortStartScheduler+0x104>)
1a002b58:	681a      	ldr	r2, [r3, #0]
1a002b5a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002b5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002b60:	681a      	ldr	r2, [r3, #0]
1a002b62:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002b66:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002b68:	f7ff ff82 	bl	1a002a70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002b6c:	2400      	movs	r4, #0
1a002b6e:	4b10      	ldr	r3, [pc, #64]	; (1a002bb0 <xPortStartScheduler+0x108>)
1a002b70:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002b72:	f7ff fec1 	bl	1a0028f8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002b76:	4a0f      	ldr	r2, [pc, #60]	; (1a002bb4 <xPortStartScheduler+0x10c>)
1a002b78:	6813      	ldr	r3, [r2, #0]
1a002b7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002b7e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002b80:	f7ff fea6 	bl	1a0028d0 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002b84:	f7ff f9c2 	bl	1a001f0c <vTaskSwitchContext>
	prvTaskExitError();
1a002b88:	f7ff fe82 	bl	1a002890 <prvTaskExitError>
}
1a002b8c:	4620      	mov	r0, r4
1a002b8e:	b002      	add	sp, #8
1a002b90:	bd10      	pop	{r4, pc}
1a002b92:	bf00      	nop
1a002b94:	e000ed00 	.word	0xe000ed00
1a002b98:	410fc271 	.word	0x410fc271
1a002b9c:	410fc270 	.word	0x410fc270
1a002ba0:	e000e400 	.word	0xe000e400
1a002ba4:	10002bd8 	.word	0x10002bd8
1a002ba8:	10002bdc 	.word	0x10002bdc
1a002bac:	e000ed20 	.word	0xe000ed20
1a002bb0:	10000004 	.word	0x10000004
1a002bb4:	e000ef34 	.word	0xe000ef34

1a002bb8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002bb8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002bbc:	2b0f      	cmp	r3, #15
1a002bbe:	d90f      	bls.n	1a002be0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002bc0:	4a10      	ldr	r2, [pc, #64]	; (1a002c04 <vPortValidateInterruptPriority+0x4c>)
1a002bc2:	5c9b      	ldrb	r3, [r3, r2]
1a002bc4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002bc6:	4a10      	ldr	r2, [pc, #64]	; (1a002c08 <vPortValidateInterruptPriority+0x50>)
1a002bc8:	7812      	ldrb	r2, [r2, #0]
1a002bca:	429a      	cmp	r2, r3
1a002bcc:	d908      	bls.n	1a002be0 <vPortValidateInterruptPriority+0x28>
1a002bce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bd2:	f383 8811 	msr	BASEPRI, r3
1a002bd6:	f3bf 8f6f 	isb	sy
1a002bda:	f3bf 8f4f 	dsb	sy
1a002bde:	e7fe      	b.n	1a002bde <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002be0:	4b0a      	ldr	r3, [pc, #40]	; (1a002c0c <vPortValidateInterruptPriority+0x54>)
1a002be2:	681b      	ldr	r3, [r3, #0]
1a002be4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002be8:	4a09      	ldr	r2, [pc, #36]	; (1a002c10 <vPortValidateInterruptPriority+0x58>)
1a002bea:	6812      	ldr	r2, [r2, #0]
1a002bec:	4293      	cmp	r3, r2
1a002bee:	d908      	bls.n	1a002c02 <vPortValidateInterruptPriority+0x4a>
1a002bf0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bf4:	f383 8811 	msr	BASEPRI, r3
1a002bf8:	f3bf 8f6f 	isb	sy
1a002bfc:	f3bf 8f4f 	dsb	sy
1a002c00:	e7fe      	b.n	1a002c00 <vPortValidateInterruptPriority+0x48>
	}
1a002c02:	4770      	bx	lr
1a002c04:	e000e3f0 	.word	0xe000e3f0
1a002c08:	10002bd8 	.word	0x10002bd8
1a002c0c:	e000ed0c 	.word	0xe000ed0c
1a002c10:	10002bdc 	.word	0x10002bdc

1a002c14 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002c14:	2200      	movs	r2, #0
1a002c16:	2a05      	cmp	r2, #5
1a002c18:	d819      	bhi.n	1a002c4e <Board_LED_Init+0x3a>
{
1a002c1a:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002c1c:	490c      	ldr	r1, [pc, #48]	; (1a002c50 <Board_LED_Init+0x3c>)
1a002c1e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002c22:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002c26:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002c28:	4b0a      	ldr	r3, [pc, #40]	; (1a002c54 <Board_LED_Init+0x40>)
1a002c2a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002c2e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002c32:	2001      	movs	r0, #1
1a002c34:	40a0      	lsls	r0, r4
1a002c36:	4301      	orrs	r1, r0
1a002c38:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002c3c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002c40:	2100      	movs	r1, #0
1a002c42:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002c44:	3201      	adds	r2, #1
1a002c46:	2a05      	cmp	r2, #5
1a002c48:	d9e8      	bls.n	1a002c1c <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a002c4a:	bc70      	pop	{r4, r5, r6}
1a002c4c:	4770      	bx	lr
1a002c4e:	4770      	bx	lr
1a002c50:	1a005a84 	.word	0x1a005a84
1a002c54:	400f4000 	.word	0x400f4000

1a002c58 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002c58:	2300      	movs	r3, #0
1a002c5a:	2b03      	cmp	r3, #3
1a002c5c:	d816      	bhi.n	1a002c8c <Board_TEC_Init+0x34>
{
1a002c5e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002c60:	490b      	ldr	r1, [pc, #44]	; (1a002c90 <Board_TEC_Init+0x38>)
1a002c62:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002c66:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002c6a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002c6c:	4c09      	ldr	r4, [pc, #36]	; (1a002c94 <Board_TEC_Init+0x3c>)
1a002c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002c72:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002c76:	2001      	movs	r0, #1
1a002c78:	40a8      	lsls	r0, r5
1a002c7a:	ea21 0100 	bic.w	r1, r1, r0
1a002c7e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002c82:	3301      	adds	r3, #1
1a002c84:	2b03      	cmp	r3, #3
1a002c86:	d9eb      	bls.n	1a002c60 <Board_TEC_Init+0x8>
    }
}
1a002c88:	bc30      	pop	{r4, r5}
1a002c8a:	4770      	bx	lr
1a002c8c:	4770      	bx	lr
1a002c8e:	bf00      	nop
1a002c90:	1a005a7c 	.word	0x1a005a7c
1a002c94:	400f4000 	.word	0x400f4000

1a002c98 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002c98:	2300      	movs	r3, #0
1a002c9a:	2b08      	cmp	r3, #8
1a002c9c:	d816      	bhi.n	1a002ccc <Board_GPIO_Init+0x34>
{
1a002c9e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002ca0:	490b      	ldr	r1, [pc, #44]	; (1a002cd0 <Board_GPIO_Init+0x38>)
1a002ca2:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002ca6:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002caa:	784d      	ldrb	r5, [r1, #1]
1a002cac:	4c09      	ldr	r4, [pc, #36]	; (1a002cd4 <Board_GPIO_Init+0x3c>)
1a002cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002cb2:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002cb6:	2001      	movs	r0, #1
1a002cb8:	40a8      	lsls	r0, r5
1a002cba:	ea21 0100 	bic.w	r1, r1, r0
1a002cbe:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002cc2:	3301      	adds	r3, #1
1a002cc4:	2b08      	cmp	r3, #8
1a002cc6:	d9eb      	bls.n	1a002ca0 <Board_GPIO_Init+0x8>
    }
}
1a002cc8:	bc30      	pop	{r4, r5}
1a002cca:	4770      	bx	lr
1a002ccc:	4770      	bx	lr
1a002cce:	bf00      	nop
1a002cd0:	1a005a90 	.word	0x1a005a90
1a002cd4:	400f4000 	.word	0x400f4000

1a002cd8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002cd8:	b510      	push	{r4, lr}
1a002cda:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002cdc:	4c08      	ldr	r4, [pc, #32]	; (1a002d00 <Board_ADC_Init+0x28>)
1a002cde:	4669      	mov	r1, sp
1a002ce0:	4620      	mov	r0, r4
1a002ce2:	f000 f9bd 	bl	1a003060 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002ce6:	4a07      	ldr	r2, [pc, #28]	; (1a002d04 <Board_ADC_Init+0x2c>)
1a002ce8:	4669      	mov	r1, sp
1a002cea:	4620      	mov	r0, r4
1a002cec:	f000 f9d8 	bl	1a0030a0 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002cf0:	2200      	movs	r2, #0
1a002cf2:	4669      	mov	r1, sp
1a002cf4:	4620      	mov	r0, r4
1a002cf6:	f000 f9ec 	bl	1a0030d2 <Chip_ADC_SetResolution>
}
1a002cfa:	b002      	add	sp, #8
1a002cfc:	bd10      	pop	{r4, pc}
1a002cfe:	bf00      	nop
1a002d00:	400e3000 	.word	0x400e3000
1a002d04:	00061a80 	.word	0x00061a80

1a002d08 <Board_SPI_Init>:
{
1a002d08:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002d0a:	4c0b      	ldr	r4, [pc, #44]	; (1a002d38 <Board_SPI_Init+0x30>)
1a002d0c:	4620      	mov	r0, r4
1a002d0e:	f000 fda3 	bl	1a003858 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002d12:	6863      	ldr	r3, [r4, #4]
1a002d14:	f023 0304 	bic.w	r3, r3, #4
1a002d18:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002d1a:	6823      	ldr	r3, [r4, #0]
1a002d1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002d20:	f043 0307 	orr.w	r3, r3, #7
1a002d24:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002d26:	4905      	ldr	r1, [pc, #20]	; (1a002d3c <Board_SPI_Init+0x34>)
1a002d28:	4620      	mov	r0, r4
1a002d2a:	f000 fd76 	bl	1a00381a <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002d2e:	6863      	ldr	r3, [r4, #4]
1a002d30:	f043 0302 	orr.w	r3, r3, #2
1a002d34:	6063      	str	r3, [r4, #4]
}
1a002d36:	bd10      	pop	{r4, pc}
1a002d38:	400c5000 	.word	0x400c5000
1a002d3c:	000186a0 	.word	0x000186a0

1a002d40 <Board_I2C_Init>:
{
1a002d40:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002d42:	2000      	movs	r0, #0
1a002d44:	f000 fdb4 	bl	1a0038b0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002d48:	4b04      	ldr	r3, [pc, #16]	; (1a002d5c <Board_I2C_Init+0x1c>)
1a002d4a:	f640 0208 	movw	r2, #2056	; 0x808
1a002d4e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002d52:	4903      	ldr	r1, [pc, #12]	; (1a002d60 <Board_I2C_Init+0x20>)
1a002d54:	2000      	movs	r0, #0
1a002d56:	f000 fdbd 	bl	1a0038d4 <Chip_I2C_SetClockRate>
}
1a002d5a:	bd08      	pop	{r3, pc}
1a002d5c:	40086000 	.word	0x40086000
1a002d60:	000f4240 	.word	0x000f4240

1a002d64 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002d64:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002d66:	4c07      	ldr	r4, [pc, #28]	; (1a002d84 <Board_Debug_Init+0x20>)
1a002d68:	4620      	mov	r0, r4
1a002d6a:	f000 f8b7 	bl	1a002edc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002d6e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002d72:	4620      	mov	r0, r4
1a002d74:	f000 f8dc 	bl	1a002f30 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002d78:	2303      	movs	r3, #3
1a002d7a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002d7c:	2301      	movs	r3, #1
1a002d7e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a002d80:	bd10      	pop	{r4, pc}
1a002d82:	bf00      	nop
1a002d84:	400c1000 	.word	0x400c1000

1a002d88 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002d88:	4b03      	ldr	r3, [pc, #12]	; (1a002d98 <Board_UARTPutChar+0x10>)
1a002d8a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002d8c:	f013 0f20 	tst.w	r3, #32
1a002d90:	d0fa      	beq.n	1a002d88 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002d92:	4b01      	ldr	r3, [pc, #4]	; (1a002d98 <Board_UARTPutChar+0x10>)
1a002d94:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002d96:	4770      	bx	lr
1a002d98:	400c1000 	.word	0x400c1000

1a002d9c <Board_UARTGetChar>:
	return pUART->LSR;
1a002d9c:	4b05      	ldr	r3, [pc, #20]	; (1a002db4 <Board_UARTGetChar+0x18>)
1a002d9e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002da0:	f013 0f01 	tst.w	r3, #1
1a002da4:	d003      	beq.n	1a002dae <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002da6:	4b03      	ldr	r3, [pc, #12]	; (1a002db4 <Board_UARTGetChar+0x18>)
1a002da8:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002daa:	b2c0      	uxtb	r0, r0
1a002dac:	4770      	bx	lr
    }
    return EOF;
1a002dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002db2:	4770      	bx	lr
1a002db4:	400c1000 	.word	0x400c1000

1a002db8 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002db8:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002dba:	f7ff ffd3 	bl	1a002d64 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002dbe:	4808      	ldr	r0, [pc, #32]	; (1a002de0 <Board_Init+0x28>)
1a002dc0:	f000 fd0a 	bl	1a0037d8 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a002dc4:	f7ff ff68 	bl	1a002c98 <Board_GPIO_Init>
   Board_ADC_Init();
1a002dc8:	f7ff ff86 	bl	1a002cd8 <Board_ADC_Init>
   Board_SPI_Init();
1a002dcc:	f7ff ff9c 	bl	1a002d08 <Board_SPI_Init>
   Board_I2C_Init();
1a002dd0:	f7ff ffb6 	bl	1a002d40 <Board_I2C_Init>

   Board_LED_Init();
1a002dd4:	f7ff ff1e 	bl	1a002c14 <Board_LED_Init>
   Board_TEC_Init();
1a002dd8:	f7ff ff3e 	bl	1a002c58 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a002ddc:	bd08      	pop	{r3, pc}
1a002dde:	bf00      	nop
1a002de0:	400f4000 	.word	0x400f4000

1a002de4 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a002de4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002de6:	b2c0      	uxtb	r0, r0
1a002de8:	f7ff ffce 	bl	1a002d88 <Board_UARTPutChar>
}
1a002dec:	bd08      	pop	{r3, pc}

1a002dee <__stdio_getchar>:

int __stdio_getchar() {
1a002dee:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002df0:	f7ff ffd4 	bl	1a002d9c <Board_UARTGetChar>
}
1a002df4:	bd08      	pop	{r3, pc}

1a002df6 <__stdio_init>:

void __stdio_init() {
1a002df6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002df8:	f7ff ffb4 	bl	1a002d64 <Board_Debug_Init>
1a002dfc:	bd08      	pop	{r3, pc}
1a002dfe:	Address 0x000000001a002dfe is out of bounds.


1a002e00 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002e00:	2300      	movs	r3, #0
1a002e02:	2b1c      	cmp	r3, #28
1a002e04:	d812      	bhi.n	1a002e2c <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002e06:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002e08:	4a09      	ldr	r2, [pc, #36]	; (1a002e30 <Board_SetupMuxing+0x30>)
1a002e0a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002e0e:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002e12:	784a      	ldrb	r2, [r1, #1]
1a002e14:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002e16:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002e1a:	4906      	ldr	r1, [pc, #24]	; (1a002e34 <Board_SetupMuxing+0x34>)
1a002e1c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002e20:	3301      	adds	r3, #1
1a002e22:	2b1c      	cmp	r3, #28
1a002e24:	d9f0      	bls.n	1a002e08 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002e26:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002e2a:	4770      	bx	lr
1a002e2c:	4770      	bx	lr
1a002e2e:	bf00      	nop
1a002e30:	1a005aac 	.word	0x1a005aac
1a002e34:	40086000 	.word	0x40086000

1a002e38 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002e38:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002e3a:	4a17      	ldr	r2, [pc, #92]	; (1a002e98 <Board_SetupClocking+0x60>)
1a002e3c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002e44:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002e48:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002e4c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002e54:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002e58:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002e5c:	2201      	movs	r2, #1
1a002e5e:	490f      	ldr	r1, [pc, #60]	; (1a002e9c <Board_SetupClocking+0x64>)
1a002e60:	2006      	movs	r0, #6
1a002e62:	f000 fc0f 	bl	1a003684 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002e66:	2400      	movs	r4, #0
1a002e68:	b14c      	cbz	r4, 1a002e7e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002e6a:	4b0b      	ldr	r3, [pc, #44]	; (1a002e98 <Board_SetupClocking+0x60>)
1a002e6c:	685a      	ldr	r2, [r3, #4]
1a002e6e:	f022 020c 	bic.w	r2, r2, #12
1a002e72:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002e74:	685a      	ldr	r2, [r3, #4]
1a002e76:	f042 0203 	orr.w	r2, r2, #3
1a002e7a:	605a      	str	r2, [r3, #4]
}
1a002e7c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002e7e:	4808      	ldr	r0, [pc, #32]	; (1a002ea0 <Board_SetupClocking+0x68>)
1a002e80:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002e84:	2301      	movs	r3, #1
1a002e86:	788a      	ldrb	r2, [r1, #2]
1a002e88:	7849      	ldrb	r1, [r1, #1]
1a002e8a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002e8e:	f000 fb55 	bl	1a00353c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002e92:	3401      	adds	r4, #1
1a002e94:	e7e8      	b.n	1a002e68 <Board_SetupClocking+0x30>
1a002e96:	bf00      	nop
1a002e98:	40043000 	.word	0x40043000
1a002e9c:	0c28cb00 	.word	0x0c28cb00
1a002ea0:	1a005aa8 	.word	0x1a005aa8

1a002ea4 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002ea4:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002ea6:	f7ff ffab 	bl	1a002e00 <Board_SetupMuxing>
    Board_SetupClocking();
1a002eaa:	f7ff ffc5 	bl	1a002e38 <Board_SetupClocking>
}
1a002eae:	bd08      	pop	{r3, pc}

1a002eb0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002eb0:	4b09      	ldr	r3, [pc, #36]	; (1a002ed8 <Chip_UART_GetIndex+0x28>)
1a002eb2:	4298      	cmp	r0, r3
1a002eb4:	d009      	beq.n	1a002eca <Chip_UART_GetIndex+0x1a>
1a002eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002eba:	4298      	cmp	r0, r3
1a002ebc:	d007      	beq.n	1a002ece <Chip_UART_GetIndex+0x1e>
1a002ebe:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002ec2:	4298      	cmp	r0, r3
1a002ec4:	d005      	beq.n	1a002ed2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002ec6:	2000      	movs	r0, #0
1a002ec8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002eca:	2002      	movs	r0, #2
1a002ecc:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002ece:	2003      	movs	r0, #3
1a002ed0:	4770      	bx	lr
			return 1;
1a002ed2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002ed4:	4770      	bx	lr
1a002ed6:	bf00      	nop
1a002ed8:	400c1000 	.word	0x400c1000

1a002edc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002edc:	b530      	push	{r4, r5, lr}
1a002ede:	b083      	sub	sp, #12
1a002ee0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002ee2:	f7ff ffe5 	bl	1a002eb0 <Chip_UART_GetIndex>
1a002ee6:	2301      	movs	r3, #1
1a002ee8:	461a      	mov	r2, r3
1a002eea:	4619      	mov	r1, r3
1a002eec:	4d0e      	ldr	r5, [pc, #56]	; (1a002f28 <Chip_UART_Init+0x4c>)
1a002eee:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002ef2:	f000 fb69 	bl	1a0035c8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002ef6:	2307      	movs	r3, #7
1a002ef8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002efa:	2300      	movs	r3, #0
1a002efc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002efe:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002f00:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002f02:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002f04:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002f06:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002f08:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002f0a:	4b08      	ldr	r3, [pc, #32]	; (1a002f2c <Chip_UART_Init+0x50>)
1a002f0c:	429c      	cmp	r4, r3
1a002f0e:	d006      	beq.n	1a002f1e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002f10:	2303      	movs	r3, #3
1a002f12:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002f14:	2310      	movs	r3, #16
1a002f16:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002f18:	9b01      	ldr	r3, [sp, #4]
}
1a002f1a:	b003      	add	sp, #12
1a002f1c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002f1e:	2300      	movs	r3, #0
1a002f20:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002f22:	69a3      	ldr	r3, [r4, #24]
1a002f24:	9301      	str	r3, [sp, #4]
1a002f26:	e7f3      	b.n	1a002f10 <Chip_UART_Init+0x34>
1a002f28:	1a005b28 	.word	0x1a005b28
1a002f2c:	40082000 	.word	0x40082000

1a002f30 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002f34:	b083      	sub	sp, #12
1a002f36:	4683      	mov	fp, r0
1a002f38:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002f3a:	f7ff ffb9 	bl	1a002eb0 <Chip_UART_GetIndex>
1a002f3e:	4b35      	ldr	r3, [pc, #212]	; (1a003014 <Chip_UART_SetBaudFDR+0xe4>)
1a002f40:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002f44:	f000 fb78 	bl	1a003638 <Chip_Clock_GetRate>
1a002f48:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a002f4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002f4e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002f50:	2300      	movs	r3, #0
1a002f52:	9301      	str	r3, [sp, #4]
1a002f54:	46a2      	mov	sl, r4
1a002f56:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002f58:	e02a      	b.n	1a002fb0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a002f5a:	4242      	negs	r2, r0
				div ++;
1a002f5c:	1c4b      	adds	r3, r1, #1
1a002f5e:	e017      	b.n	1a002f90 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002f60:	b30a      	cbz	r2, 1a002fa6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002f62:	4617      	mov	r7, r2
			sd = d;
1a002f64:	9501      	str	r5, [sp, #4]
			sm = m;
1a002f66:	46a2      	mov	sl, r4
			sdiv = div;
1a002f68:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a002f6a:	3501      	adds	r5, #1
1a002f6c:	42ac      	cmp	r4, r5
1a002f6e:	d91e      	bls.n	1a002fae <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002f70:	0933      	lsrs	r3, r6, #4
1a002f72:	0730      	lsls	r0, r6, #28
1a002f74:	fba4 0100 	umull	r0, r1, r4, r0
1a002f78:	fb04 1103 	mla	r1, r4, r3, r1
1a002f7c:	1962      	adds	r2, r4, r5
1a002f7e:	fb08 f202 	mul.w	r2, r8, r2
1a002f82:	2300      	movs	r3, #0
1a002f84:	f001 fb52 	bl	1a00462c <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002f88:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a002f8a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a002f8c:	2800      	cmp	r0, #0
1a002f8e:	dbe4      	blt.n	1a002f5a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002f90:	4297      	cmp	r7, r2
1a002f92:	d3ea      	bcc.n	1a002f6a <Chip_UART_SetBaudFDR+0x3a>
1a002f94:	2b00      	cmp	r3, #0
1a002f96:	d0e8      	beq.n	1a002f6a <Chip_UART_SetBaudFDR+0x3a>
1a002f98:	0c19      	lsrs	r1, r3, #16
1a002f9a:	d1e6      	bne.n	1a002f6a <Chip_UART_SetBaudFDR+0x3a>
1a002f9c:	2b02      	cmp	r3, #2
1a002f9e:	d8df      	bhi.n	1a002f60 <Chip_UART_SetBaudFDR+0x30>
1a002fa0:	2d00      	cmp	r5, #0
1a002fa2:	d0dd      	beq.n	1a002f60 <Chip_UART_SetBaudFDR+0x30>
1a002fa4:	e7e1      	b.n	1a002f6a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002fa6:	4617      	mov	r7, r2
			sd = d;
1a002fa8:	9501      	str	r5, [sp, #4]
			sm = m;
1a002faa:	46a2      	mov	sl, r4
			sdiv = div;
1a002fac:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a002fae:	3401      	adds	r4, #1
1a002fb0:	b11f      	cbz	r7, 1a002fba <Chip_UART_SetBaudFDR+0x8a>
1a002fb2:	2c0f      	cmp	r4, #15
1a002fb4:	d801      	bhi.n	1a002fba <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002fb6:	2500      	movs	r5, #0
1a002fb8:	e7d8      	b.n	1a002f6c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002fba:	f1b9 0f00 	cmp.w	r9, #0
1a002fbe:	d024      	beq.n	1a00300a <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002fc0:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002fc8:	f8cb 300c 	str.w	r3, [fp, #12]
1a002fcc:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a002fd0:	f8cb 3000 	str.w	r3, [fp]
1a002fd4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a002fd8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002fdc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002fe4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002fe8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002fec:	b2db      	uxtb	r3, r3
1a002fee:	9901      	ldr	r1, [sp, #4]
1a002ff0:	f001 020f 	and.w	r2, r1, #15
1a002ff4:	4313      	orrs	r3, r2
1a002ff6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002ffa:	0933      	lsrs	r3, r6, #4
1a002ffc:	fb0a f303 	mul.w	r3, sl, r3
1a003000:	448a      	add	sl, r1
1a003002:	fb09 f90a 	mul.w	r9, r9, sl
1a003006:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00300a:	4648      	mov	r0, r9
1a00300c:	b003      	add	sp, #12
1a00300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003012:	bf00      	nop
1a003014:	1a005b20 	.word	0x1a005b20

1a003018 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003018:	4b03      	ldr	r3, [pc, #12]	; (1a003028 <Chip_ADC_GetClockIndex+0x10>)
1a00301a:	4298      	cmp	r0, r3
1a00301c:	d001      	beq.n	1a003022 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00301e:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003020:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a003022:	2004      	movs	r0, #4
1a003024:	4770      	bx	lr
1a003026:	bf00      	nop
1a003028:	400e4000 	.word	0x400e4000

1a00302c <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a00302c:	b570      	push	{r4, r5, r6, lr}
1a00302e:	460d      	mov	r5, r1
1a003030:	4614      	mov	r4, r2
1a003032:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a003034:	f7ff fff0 	bl	1a003018 <Chip_ADC_GetClockIndex>
1a003038:	f000 fafe 	bl	1a003638 <Chip_Clock_GetRate>
	if (burstMode) {
1a00303c:	b965      	cbnz	r5, 1a003058 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00303e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a003042:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a003046:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00304a:	0064      	lsls	r4, r4, #1
1a00304c:	fbb0 f0f4 	udiv	r0, r0, r4
1a003050:	b2c0      	uxtb	r0, r0
1a003052:	3801      	subs	r0, #1
	return div;
}
1a003054:	b2c0      	uxtb	r0, r0
1a003056:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003058:	fb04 f406 	mul.w	r4, r4, r6
1a00305c:	e7f3      	b.n	1a003046 <getClkDiv+0x1a>
1a00305e:	Address 0x000000001a00305e is out of bounds.


1a003060 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a003060:	b538      	push	{r3, r4, r5, lr}
1a003062:	4605      	mov	r5, r0
1a003064:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003066:	f7ff ffd7 	bl	1a003018 <Chip_ADC_GetClockIndex>
1a00306a:	2301      	movs	r3, #1
1a00306c:	461a      	mov	r2, r3
1a00306e:	4619      	mov	r1, r3
1a003070:	f000 faaa 	bl	1a0035c8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003074:	2100      	movs	r1, #0
1a003076:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003078:	4a08      	ldr	r2, [pc, #32]	; (1a00309c <Chip_ADC_Init+0x3c>)
1a00307a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00307c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00307e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a003080:	230b      	movs	r3, #11
1a003082:	4628      	mov	r0, r5
1a003084:	f7ff ffd2 	bl	1a00302c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a003088:	0200      	lsls	r0, r0, #8
1a00308a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00308e:	7920      	ldrb	r0, [r4, #4]
1a003090:	0440      	lsls	r0, r0, #17
1a003092:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003096:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a003098:	6028      	str	r0, [r5, #0]
}
1a00309a:	bd38      	pop	{r3, r4, r5, pc}
1a00309c:	00061a80 	.word	0x00061a80

1a0030a0 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0030a0:	b570      	push	{r4, r5, r6, lr}
1a0030a2:	4605      	mov	r5, r0
1a0030a4:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0030a6:	6804      	ldr	r4, [r0, #0]
1a0030a8:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0030ac:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0030b0:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0030b2:	790b      	ldrb	r3, [r1, #4]
1a0030b4:	f1c3 030b 	rsb	r3, r3, #11
1a0030b8:	b2db      	uxtb	r3, r3
1a0030ba:	7949      	ldrb	r1, [r1, #5]
1a0030bc:	f7ff ffb6 	bl	1a00302c <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0030c0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0030c4:	7930      	ldrb	r0, [r6, #4]
1a0030c6:	0440      	lsls	r0, r0, #17
1a0030c8:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0030cc:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a0030ce:	6028      	str	r0, [r5, #0]
}
1a0030d0:	bd70      	pop	{r4, r5, r6, pc}

1a0030d2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0030d2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0030d4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0030d6:	680a      	ldr	r2, [r1, #0]
1a0030d8:	f7ff ffe2 	bl	1a0030a0 <Chip_ADC_SetSampleRate>
}
1a0030dc:	bd08      	pop	{r3, pc}
1a0030de:	Address 0x000000001a0030de is out of bounds.


1a0030e0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0030e0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0030e2:	2069      	movs	r0, #105	; 0x69
1a0030e4:	f000 faa8 	bl	1a003638 <Chip_Clock_GetRate>
1a0030e8:	4b01      	ldr	r3, [pc, #4]	; (1a0030f0 <SystemCoreClockUpdate+0x10>)
1a0030ea:	6018      	str	r0, [r3, #0]
}
1a0030ec:	bd08      	pop	{r3, pc}
1a0030ee:	bf00      	nop
1a0030f0:	10002c8c 	.word	0x10002c8c

1a0030f4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0030f4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0030f6:	680b      	ldr	r3, [r1, #0]
1a0030f8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0030fc:	d002      	beq.n	1a003104 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0030fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a003102:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003104:	4607      	mov	r7, r0
1a003106:	2501      	movs	r5, #1
1a003108:	e03b      	b.n	1a003182 <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a00310a:	694b      	ldr	r3, [r1, #20]
1a00310c:	fb03 f302 	mul.w	r3, r3, r2
1a003110:	fbb3 f3f5 	udiv	r3, r3, r5
1a003114:	e014      	b.n	1a003140 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a003116:	461c      	mov	r4, r3
1a003118:	e020      	b.n	1a00315c <pll_calc_divs+0x68>
		return -val;
1a00311a:	f1cc 0c00 	rsb	ip, ip, #0
1a00311e:	e020      	b.n	1a003162 <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a003120:	3201      	adds	r2, #1
1a003122:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a003126:	dc26      	bgt.n	1a003176 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a003128:	680c      	ldr	r4, [r1, #0]
1a00312a:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00312e:	d0ec      	beq.n	1a00310a <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a003130:	1c73      	adds	r3, r6, #1
1a003132:	fa02 fc03 	lsl.w	ip, r2, r3
1a003136:	694b      	ldr	r3, [r1, #20]
1a003138:	fb03 f30c 	mul.w	r3, r3, ip
1a00313c:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a003140:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a003190 <pll_calc_divs+0x9c>
1a003144:	4563      	cmp	r3, ip
1a003146:	d9eb      	bls.n	1a003120 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a003148:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003194 <pll_calc_divs+0xa0>
1a00314c:	4563      	cmp	r3, ip
1a00314e:	d812      	bhi.n	1a003176 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a003150:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003154:	d1df      	bne.n	1a003116 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a003156:	1c74      	adds	r4, r6, #1
1a003158:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a00315c:	ebb0 0c04 	subs.w	ip, r0, r4
1a003160:	d4db      	bmi.n	1a00311a <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a003162:	4567      	cmp	r7, ip
1a003164:	d9dc      	bls.n	1a003120 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a003166:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a003168:	1c77      	adds	r7, r6, #1
1a00316a:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a00316c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00316e:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a003170:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a003172:	4667      	mov	r7, ip
1a003174:	e7d4      	b.n	1a003120 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003176:	3601      	adds	r6, #1
1a003178:	2e03      	cmp	r6, #3
1a00317a:	dc01      	bgt.n	1a003180 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a00317c:	2201      	movs	r2, #1
1a00317e:	e7d0      	b.n	1a003122 <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a003180:	3501      	adds	r5, #1
1a003182:	2d04      	cmp	r5, #4
1a003184:	dc01      	bgt.n	1a00318a <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003186:	2600      	movs	r6, #0
1a003188:	e7f6      	b.n	1a003178 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a00318a:	bcf0      	pop	{r4, r5, r6, r7}
1a00318c:	4770      	bx	lr
1a00318e:	bf00      	nop
1a003190:	094c5eff 	.word	0x094c5eff
1a003194:	1312d000 	.word	0x1312d000

1a003198 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003198:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00319a:	b099      	sub	sp, #100	; 0x64
1a00319c:	4605      	mov	r5, r0
1a00319e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0031a0:	225c      	movs	r2, #92	; 0x5c
1a0031a2:	2100      	movs	r1, #0
1a0031a4:	a801      	add	r0, sp, #4
1a0031a6:	f001 fd7c 	bl	1a004ca2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0031aa:	2380      	movs	r3, #128	; 0x80
1a0031ac:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0031ae:	6963      	ldr	r3, [r4, #20]
1a0031b0:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0031b2:	7923      	ldrb	r3, [r4, #4]
1a0031b4:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0031b8:	4669      	mov	r1, sp
1a0031ba:	4628      	mov	r0, r5
1a0031bc:	f7ff ff9a 	bl	1a0030f4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0031c0:	9b06      	ldr	r3, [sp, #24]
1a0031c2:	42ab      	cmp	r3, r5
1a0031c4:	d027      	beq.n	1a003216 <pll_get_frac+0x7e>
	if (val < 0)
1a0031c6:	1aeb      	subs	r3, r5, r3
1a0031c8:	d42e      	bmi.n	1a003228 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0031ca:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0031cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0031ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0031d2:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0031d4:	6963      	ldr	r3, [r4, #20]
1a0031d6:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0031d8:	7923      	ldrb	r3, [r4, #4]
1a0031da:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0031de:	a910      	add	r1, sp, #64	; 0x40
1a0031e0:	4628      	mov	r0, r5
1a0031e2:	f7ff ff87 	bl	1a0030f4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0031e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0031e8:	42ab      	cmp	r3, r5
1a0031ea:	d01f      	beq.n	1a00322c <pll_get_frac+0x94>
	if (val < 0)
1a0031ec:	1aeb      	subs	r3, r5, r3
1a0031ee:	d425      	bmi.n	1a00323c <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0031f0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0031f2:	4b2b      	ldr	r3, [pc, #172]	; (1a0032a0 <pll_get_frac+0x108>)
1a0031f4:	429d      	cmp	r5, r3
1a0031f6:	d923      	bls.n	1a003240 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0031f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0031fa:	1aed      	subs	r5, r5, r3
1a0031fc:	d433      	bmi.n	1a003266 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0031fe:	42ae      	cmp	r6, r5
1a003200:	dc3b      	bgt.n	1a00327a <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a003202:	42be      	cmp	r6, r7
1a003204:	dc31      	bgt.n	1a00326a <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003206:	466d      	mov	r5, sp
1a003208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00320a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00320c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003214:	e006      	b.n	1a003224 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a003216:	466d      	mov	r5, sp
1a003218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00321a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00321c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a003224:	b019      	add	sp, #100	; 0x64
1a003226:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a003228:	425b      	negs	r3, r3
1a00322a:	e7ce      	b.n	1a0031ca <pll_get_frac+0x32>
		*ppll = pll[2];
1a00322c:	ad10      	add	r5, sp, #64	; 0x40
1a00322e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003232:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00323a:	e7f3      	b.n	1a003224 <pll_get_frac+0x8c>
		return -val;
1a00323c:	425b      	negs	r3, r3
1a00323e:	e7d7      	b.n	1a0031f0 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a003240:	2340      	movs	r3, #64	; 0x40
1a003242:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a003244:	6963      	ldr	r3, [r4, #20]
1a003246:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003248:	a908      	add	r1, sp, #32
1a00324a:	4628      	mov	r0, r5
1a00324c:	f7ff ff52 	bl	1a0030f4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003250:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a003252:	42ab      	cmp	r3, r5
1a003254:	d1d0      	bne.n	1a0031f8 <pll_get_frac+0x60>
			*ppll = pll[1];
1a003256:	ad08      	add	r5, sp, #32
1a003258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00325a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00325c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a003264:	e7de      	b.n	1a003224 <pll_get_frac+0x8c>
		return -val;
1a003266:	426d      	negs	r5, r5
1a003268:	e7c9      	b.n	1a0031fe <pll_get_frac+0x66>
			*ppll = pll[2];
1a00326a:	ad10      	add	r5, sp, #64	; 0x40
1a00326c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00326e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003270:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003278:	e7d4      	b.n	1a003224 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a00327a:	42af      	cmp	r7, r5
1a00327c:	db07      	blt.n	1a00328e <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00327e:	ad08      	add	r5, sp, #32
1a003280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003284:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00328c:	e7ca      	b.n	1a003224 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00328e:	ad10      	add	r5, sp, #64	; 0x40
1a003290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003294:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00329c:	e7c2      	b.n	1a003224 <pll_get_frac+0x8c>
1a00329e:	bf00      	nop
1a0032a0:	068e7780 	.word	0x068e7780

1a0032a4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0032a4:	b430      	push	{r4, r5}
1a0032a6:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0032a8:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0032aa:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0032ac:	e000      	b.n	1a0032b0 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0032ae:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0032b0:	281c      	cmp	r0, #28
1a0032b2:	d118      	bne.n	1a0032e6 <Chip_Clock_FindBaseClock+0x42>
1a0032b4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0032b8:	0051      	lsls	r1, r2, #1
1a0032ba:	4a0c      	ldr	r2, [pc, #48]	; (1a0032ec <Chip_Clock_FindBaseClock+0x48>)
1a0032bc:	440a      	add	r2, r1
1a0032be:	7914      	ldrb	r4, [r2, #4]
1a0032c0:	4284      	cmp	r4, r0
1a0032c2:	d010      	beq.n	1a0032e6 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0032c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0032c8:	004a      	lsls	r2, r1, #1
1a0032ca:	4908      	ldr	r1, [pc, #32]	; (1a0032ec <Chip_Clock_FindBaseClock+0x48>)
1a0032cc:	5a8a      	ldrh	r2, [r1, r2]
1a0032ce:	42aa      	cmp	r2, r5
1a0032d0:	d8ed      	bhi.n	1a0032ae <Chip_Clock_FindBaseClock+0xa>
1a0032d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0032d6:	0051      	lsls	r1, r2, #1
1a0032d8:	4a04      	ldr	r2, [pc, #16]	; (1a0032ec <Chip_Clock_FindBaseClock+0x48>)
1a0032da:	440a      	add	r2, r1
1a0032dc:	8852      	ldrh	r2, [r2, #2]
1a0032de:	42aa      	cmp	r2, r5
1a0032e0:	d3e5      	bcc.n	1a0032ae <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0032e2:	4620      	mov	r0, r4
1a0032e4:	e7e4      	b.n	1a0032b0 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0032e6:	bc30      	pop	{r4, r5}
1a0032e8:	4770      	bx	lr
1a0032ea:	bf00      	nop
1a0032ec:	1a005b3c 	.word	0x1a005b3c

1a0032f0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0032f0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0032f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0032f6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0032f8:	4a0d      	ldr	r2, [pc, #52]	; (1a003330 <Chip_Clock_EnableCrystal+0x40>)
1a0032fa:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0032fc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a003300:	6992      	ldr	r2, [r2, #24]
1a003302:	428a      	cmp	r2, r1
1a003304:	d001      	beq.n	1a00330a <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003306:	4a0a      	ldr	r2, [pc, #40]	; (1a003330 <Chip_Clock_EnableCrystal+0x40>)
1a003308:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00330a:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00330e:	4a09      	ldr	r2, [pc, #36]	; (1a003334 <Chip_Clock_EnableCrystal+0x44>)
1a003310:	6811      	ldr	r1, [r2, #0]
1a003312:	4a09      	ldr	r2, [pc, #36]	; (1a003338 <Chip_Clock_EnableCrystal+0x48>)
1a003314:	4291      	cmp	r1, r2
1a003316:	d901      	bls.n	1a00331c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a003318:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00331c:	4a04      	ldr	r2, [pc, #16]	; (1a003330 <Chip_Clock_EnableCrystal+0x40>)
1a00331e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a003320:	9b01      	ldr	r3, [sp, #4]
1a003322:	1e5a      	subs	r2, r3, #1
1a003324:	9201      	str	r2, [sp, #4]
1a003326:	2b00      	cmp	r3, #0
1a003328:	d1fa      	bne.n	1a003320 <Chip_Clock_EnableCrystal+0x30>
}
1a00332a:	b002      	add	sp, #8
1a00332c:	4770      	bx	lr
1a00332e:	bf00      	nop
1a003330:	40050000 	.word	0x40050000
1a003334:	1a005aa4 	.word	0x1a005aa4
1a003338:	01312cff 	.word	0x01312cff

1a00333c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00333c:	3012      	adds	r0, #18
1a00333e:	4b05      	ldr	r3, [pc, #20]	; (1a003354 <Chip_Clock_GetDividerSource+0x18>)
1a003340:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003344:	f010 0f01 	tst.w	r0, #1
1a003348:	d102      	bne.n	1a003350 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00334a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00334e:	4770      	bx	lr
		return CLKINPUT_PD;
1a003350:	2011      	movs	r0, #17
}
1a003352:	4770      	bx	lr
1a003354:	40050000 	.word	0x40050000

1a003358 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003358:	f100 0212 	add.w	r2, r0, #18
1a00335c:	4b03      	ldr	r3, [pc, #12]	; (1a00336c <Chip_Clock_GetDividerDivisor+0x14>)
1a00335e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003362:	4b03      	ldr	r3, [pc, #12]	; (1a003370 <Chip_Clock_GetDividerDivisor+0x18>)
1a003364:	5c18      	ldrb	r0, [r3, r0]
}
1a003366:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00336a:	4770      	bx	lr
1a00336c:	40050000 	.word	0x40050000
1a003370:	1a005b34 	.word	0x1a005b34

1a003374 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003374:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003376:	2810      	cmp	r0, #16
1a003378:	d80a      	bhi.n	1a003390 <Chip_Clock_GetClockInputHz+0x1c>
1a00337a:	e8df f000 	tbb	[pc, r0]
1a00337e:	0b42      	.short	0x0b42
1a003380:	091f160d 	.word	0x091f160d
1a003384:	2b282522 	.word	0x2b282522
1a003388:	322e0909 	.word	0x322e0909
1a00338c:	3a36      	.short	0x3a36
1a00338e:	3e          	.byte	0x3e
1a00338f:	00          	.byte	0x00
	uint32_t rate = 0;
1a003390:	2000      	movs	r0, #0
1a003392:	e038      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003394:	481e      	ldr	r0, [pc, #120]	; (1a003410 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003396:	e036      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003398:	4b1e      	ldr	r3, [pc, #120]	; (1a003414 <Chip_Clock_GetClockInputHz+0xa0>)
1a00339a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00339e:	f003 0307 	and.w	r3, r3, #7
1a0033a2:	2b04      	cmp	r3, #4
1a0033a4:	d130      	bne.n	1a003408 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a0033a6:	2000      	movs	r0, #0
1a0033a8:	e02d      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0033aa:	4b1a      	ldr	r3, [pc, #104]	; (1a003414 <Chip_Clock_GetClockInputHz+0xa0>)
1a0033ac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0033b0:	f003 0307 	and.w	r3, r3, #7
1a0033b4:	2b04      	cmp	r3, #4
1a0033b6:	d029      	beq.n	1a00340c <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0033b8:	4817      	ldr	r0, [pc, #92]	; (1a003418 <Chip_Clock_GetClockInputHz+0xa4>)
1a0033ba:	e024      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0033bc:	4b17      	ldr	r3, [pc, #92]	; (1a00341c <Chip_Clock_GetClockInputHz+0xa8>)
1a0033be:	6818      	ldr	r0, [r3, #0]
		break;
1a0033c0:	e021      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0033c2:	4b17      	ldr	r3, [pc, #92]	; (1a003420 <Chip_Clock_GetClockInputHz+0xac>)
1a0033c4:	6818      	ldr	r0, [r3, #0]
		break;
1a0033c6:	e01e      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0033c8:	4b16      	ldr	r3, [pc, #88]	; (1a003424 <Chip_Clock_GetClockInputHz+0xb0>)
1a0033ca:	6818      	ldr	r0, [r3, #0]
		break;
1a0033cc:	e01b      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0033ce:	4b15      	ldr	r3, [pc, #84]	; (1a003424 <Chip_Clock_GetClockInputHz+0xb0>)
1a0033d0:	6858      	ldr	r0, [r3, #4]
		break;
1a0033d2:	e018      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0033d4:	f000 f86a 	bl	1a0034ac <Chip_Clock_GetMainPLLHz>
		break;
1a0033d8:	e015      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0033da:	2100      	movs	r1, #0
1a0033dc:	f000 f89c 	bl	1a003518 <Chip_Clock_GetDivRate>
		break;
1a0033e0:	e011      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0033e2:	2101      	movs	r1, #1
1a0033e4:	f000 f898 	bl	1a003518 <Chip_Clock_GetDivRate>
		break;
1a0033e8:	e00d      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0033ea:	2102      	movs	r1, #2
1a0033ec:	f000 f894 	bl	1a003518 <Chip_Clock_GetDivRate>
		break;
1a0033f0:	e009      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0033f2:	2103      	movs	r1, #3
1a0033f4:	f000 f890 	bl	1a003518 <Chip_Clock_GetDivRate>
		break;
1a0033f8:	e005      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0033fa:	2104      	movs	r1, #4
1a0033fc:	f000 f88c 	bl	1a003518 <Chip_Clock_GetDivRate>
		break;
1a003400:	e001      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a003402:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003406:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003408:	4803      	ldr	r0, [pc, #12]	; (1a003418 <Chip_Clock_GetClockInputHz+0xa4>)
1a00340a:	e7fc      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a00340c:	4806      	ldr	r0, [pc, #24]	; (1a003428 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00340e:	e7fa      	b.n	1a003406 <Chip_Clock_GetClockInputHz+0x92>
1a003410:	00b71b00 	.word	0x00b71b00
1a003414:	40043000 	.word	0x40043000
1a003418:	017d7840 	.word	0x017d7840
1a00341c:	1a005a78 	.word	0x1a005a78
1a003420:	1a005aa4 	.word	0x1a005aa4
1a003424:	10002be0 	.word	0x10002be0
1a003428:	02faf080 	.word	0x02faf080

1a00342c <Chip_Clock_CalcMainPLLValue>:
{
1a00342c:	b538      	push	{r3, r4, r5, lr}
1a00342e:	4605      	mov	r5, r0
1a003430:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003432:	7908      	ldrb	r0, [r1, #4]
1a003434:	f7ff ff9e 	bl	1a003374 <Chip_Clock_GetClockInputHz>
1a003438:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00343a:	4b19      	ldr	r3, [pc, #100]	; (1a0034a0 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00343c:	442b      	add	r3, r5
1a00343e:	4a19      	ldr	r2, [pc, #100]	; (1a0034a4 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003440:	4293      	cmp	r3, r2
1a003442:	d821      	bhi.n	1a003488 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003444:	b318      	cbz	r0, 1a00348e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003446:	2380      	movs	r3, #128	; 0x80
1a003448:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00344a:	2300      	movs	r3, #0
1a00344c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00344e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003450:	fbb5 f3f0 	udiv	r3, r5, r0
1a003454:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003456:	4a14      	ldr	r2, [pc, #80]	; (1a0034a8 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003458:	4295      	cmp	r5, r2
1a00345a:	d903      	bls.n	1a003464 <Chip_Clock_CalcMainPLLValue+0x38>
1a00345c:	fb03 f000 	mul.w	r0, r3, r0
1a003460:	42a8      	cmp	r0, r5
1a003462:	d007      	beq.n	1a003474 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003464:	4621      	mov	r1, r4
1a003466:	4628      	mov	r0, r5
1a003468:	f7ff fe96 	bl	1a003198 <pll_get_frac>
		if (!ppll->nsel) {
1a00346c:	68a3      	ldr	r3, [r4, #8]
1a00346e:	b18b      	cbz	r3, 1a003494 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a003470:	3b01      	subs	r3, #1
1a003472:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003474:	6923      	ldr	r3, [r4, #16]
1a003476:	b183      	cbz	r3, 1a00349a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003478:	68e2      	ldr	r2, [r4, #12]
1a00347a:	b10a      	cbz	r2, 1a003480 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00347c:	3a01      	subs	r2, #1
1a00347e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a003480:	3b01      	subs	r3, #1
1a003482:	6123      	str	r3, [r4, #16]
	return 0;
1a003484:	2000      	movs	r0, #0
}
1a003486:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00348c:	e7fb      	b.n	1a003486 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00348e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003492:	e7f8      	b.n	1a003486 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003498:	e7f5      	b.n	1a003486 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a00349a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00349e:	e7f2      	b.n	1a003486 <Chip_Clock_CalcMainPLLValue+0x5a>
1a0034a0:	ff6b3a10 	.word	0xff6b3a10
1a0034a4:	0b940510 	.word	0x0b940510
1a0034a8:	094c5eff 	.word	0x094c5eff

1a0034ac <Chip_Clock_GetMainPLLHz>:
{
1a0034ac:	b530      	push	{r4, r5, lr}
1a0034ae:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0034b0:	4d17      	ldr	r5, [pc, #92]	; (1a003510 <Chip_Clock_GetMainPLLHz+0x64>)
1a0034b2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0034b4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0034b8:	f7ff ff5c 	bl	1a003374 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0034bc:	4b15      	ldr	r3, [pc, #84]	; (1a003514 <Chip_Clock_GetMainPLLHz+0x68>)
1a0034be:	681b      	ldr	r3, [r3, #0]
1a0034c0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0034c2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0034c4:	f013 0f01 	tst.w	r3, #1
1a0034c8:	d01f      	beq.n	1a00350a <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a0034ca:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0034ce:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0034d2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0034d6:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0034da:	3301      	adds	r3, #1
	n = nsel + 1;
1a0034dc:	3201      	adds	r2, #1
	p = ptab[psel];
1a0034de:	f10d 0c08 	add.w	ip, sp, #8
1a0034e2:	4461      	add	r1, ip
1a0034e4:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0034e8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0034ec:	d108      	bne.n	1a003500 <Chip_Clock_GetMainPLLHz+0x54>
1a0034ee:	b93d      	cbnz	r5, 1a003500 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0034f0:	0049      	lsls	r1, r1, #1
1a0034f2:	fbb3 f3f1 	udiv	r3, r3, r1
1a0034f6:	fbb0 f0f2 	udiv	r0, r0, r2
1a0034fa:	fb00 f003 	mul.w	r0, r0, r3
1a0034fe:	e005      	b.n	1a00350c <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a003500:	fbb0 f0f2 	udiv	r0, r0, r2
1a003504:	fb03 f000 	mul.w	r0, r3, r0
1a003508:	e000      	b.n	1a00350c <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a00350a:	2000      	movs	r0, #0
}
1a00350c:	b003      	add	sp, #12
1a00350e:	bd30      	pop	{r4, r5, pc}
1a003510:	40050000 	.word	0x40050000
1a003514:	1a005b30 	.word	0x1a005b30

1a003518 <Chip_Clock_GetDivRate>:
{
1a003518:	b538      	push	{r3, r4, r5, lr}
1a00351a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a00351c:	4608      	mov	r0, r1
1a00351e:	f7ff ff0d 	bl	1a00333c <Chip_Clock_GetDividerSource>
1a003522:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a003524:	4620      	mov	r0, r4
1a003526:	f7ff ff17 	bl	1a003358 <Chip_Clock_GetDividerDivisor>
1a00352a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a00352c:	4628      	mov	r0, r5
1a00352e:	f7ff ff21 	bl	1a003374 <Chip_Clock_GetClockInputHz>
1a003532:	3401      	adds	r4, #1
}
1a003534:	fbb0 f0f4 	udiv	r0, r0, r4
1a003538:	bd38      	pop	{r3, r4, r5, pc}
1a00353a:	Address 0x000000001a00353a is out of bounds.


1a00353c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a00353c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00353e:	f100 0416 	add.w	r4, r0, #22
1a003542:	00a4      	lsls	r4, r4, #2
1a003544:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a003548:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a00354c:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00354e:	281b      	cmp	r0, #27
1a003550:	d813      	bhi.n	1a00357a <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a003552:	2911      	cmp	r1, #17
1a003554:	d01a      	beq.n	1a00358c <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003556:	4d0e      	ldr	r5, [pc, #56]	; (1a003590 <Chip_Clock_SetBaseClock+0x54>)
1a003558:	4025      	ands	r5, r4

			if (autoblocken) {
1a00355a:	b10a      	cbz	r2, 1a003560 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a00355c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a003560:	b10b      	cbz	r3, 1a003566 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a003562:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003566:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00356a:	3016      	adds	r0, #22
1a00356c:	0080      	lsls	r0, r0, #2
1a00356e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003572:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003576:	6045      	str	r5, [r0, #4]
1a003578:	e008      	b.n	1a00358c <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a00357a:	f044 0401 	orr.w	r4, r4, #1
1a00357e:	3016      	adds	r0, #22
1a003580:	0080      	lsls	r0, r0, #2
1a003582:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003586:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00358a:	6044      	str	r4, [r0, #4]
	}
}
1a00358c:	bc30      	pop	{r4, r5}
1a00358e:	4770      	bx	lr
1a003590:	e0fff7fe 	.word	0xe0fff7fe

1a003594 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003594:	281b      	cmp	r0, #27
1a003596:	d80c      	bhi.n	1a0035b2 <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003598:	3016      	adds	r0, #22
1a00359a:	0080      	lsls	r0, r0, #2
1a00359c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0035a0:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a0035a4:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a0035a6:	f010 0f01 	tst.w	r0, #1
1a0035aa:	d104      	bne.n	1a0035b6 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0035ac:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0035b0:	4770      	bx	lr
		return CLKINPUT_PD;
1a0035b2:	2011      	movs	r0, #17
1a0035b4:	4770      	bx	lr
		return CLKINPUT_PD;
1a0035b6:	2011      	movs	r0, #17
}
1a0035b8:	4770      	bx	lr

1a0035ba <Chip_Clock_GetBaseClocktHz>:
{
1a0035ba:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0035bc:	f7ff ffea 	bl	1a003594 <Chip_Clock_GetBaseClock>
1a0035c0:	f7ff fed8 	bl	1a003374 <Chip_Clock_GetClockInputHz>
}
1a0035c4:	bd08      	pop	{r3, pc}
1a0035c6:	Address 0x000000001a0035c6 is out of bounds.


1a0035c8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0035c8:	b969      	cbnz	r1, 1a0035e6 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a0035ca:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0035cc:	b10a      	cbz	r2, 1a0035d2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0035ce:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0035d2:	2b02      	cmp	r3, #2
1a0035d4:	d009      	beq.n	1a0035ea <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0035d6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0035da:	d209      	bcs.n	1a0035f0 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0035dc:	3020      	adds	r0, #32
1a0035de:	4b07      	ldr	r3, [pc, #28]	; (1a0035fc <Chip_Clock_EnableOpts+0x34>)
1a0035e0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0035e4:	4770      	bx	lr
		reg |= (1 << 1);
1a0035e6:	2103      	movs	r1, #3
1a0035e8:	e7f0      	b.n	1a0035cc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0035ea:	f041 0120 	orr.w	r1, r1, #32
1a0035ee:	e7f2      	b.n	1a0035d6 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0035f0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0035f4:	4b02      	ldr	r3, [pc, #8]	; (1a003600 <Chip_Clock_EnableOpts+0x38>)
1a0035f6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0035fa:	4770      	bx	lr
1a0035fc:	40051000 	.word	0x40051000
1a003600:	40052000 	.word	0x40052000

1a003604 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003604:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003608:	d208      	bcs.n	1a00361c <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00360a:	4a09      	ldr	r2, [pc, #36]	; (1a003630 <Chip_Clock_Enable+0x2c>)
1a00360c:	3020      	adds	r0, #32
1a00360e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003612:	f043 0301 	orr.w	r3, r3, #1
1a003616:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a00361a:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00361c:	4a05      	ldr	r2, [pc, #20]	; (1a003634 <Chip_Clock_Enable+0x30>)
1a00361e:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003622:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003626:	f043 0301 	orr.w	r3, r3, #1
1a00362a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00362e:	4770      	bx	lr
1a003630:	40051000 	.word	0x40051000
1a003634:	40052000 	.word	0x40052000

1a003638 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003638:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00363a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00363e:	d309      	bcc.n	1a003654 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003640:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003644:	4a0d      	ldr	r2, [pc, #52]	; (1a00367c <Chip_Clock_GetRate+0x44>)
1a003646:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a00364a:	f014 0f01 	tst.w	r4, #1
1a00364e:	d107      	bne.n	1a003660 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a003650:	2000      	movs	r0, #0
	}

	return rate;
}
1a003652:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a003654:	f100 0320 	add.w	r3, r0, #32
1a003658:	4a09      	ldr	r2, [pc, #36]	; (1a003680 <Chip_Clock_GetRate+0x48>)
1a00365a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00365e:	e7f4      	b.n	1a00364a <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003660:	f7ff fe20 	bl	1a0032a4 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003664:	f7ff ffa9 	bl	1a0035ba <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a003668:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00366c:	d103      	bne.n	1a003676 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00366e:	2301      	movs	r3, #1
		rate = rate / div;
1a003670:	fbb0 f0f3 	udiv	r0, r0, r3
1a003674:	e7ed      	b.n	1a003652 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a003676:	2302      	movs	r3, #2
1a003678:	e7fa      	b.n	1a003670 <Chip_Clock_GetRate+0x38>
1a00367a:	bf00      	nop
1a00367c:	40052000 	.word	0x40052000
1a003680:	40051000 	.word	0x40051000

1a003684 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003684:	b570      	push	{r4, r5, r6, lr}
1a003686:	b08a      	sub	sp, #40	; 0x28
1a003688:	4605      	mov	r5, r0
1a00368a:	460e      	mov	r6, r1
1a00368c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00368e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003692:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003694:	2806      	cmp	r0, #6
1a003696:	d018      	beq.n	1a0036ca <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003698:	2300      	movs	r3, #0
1a00369a:	2201      	movs	r2, #1
1a00369c:	4629      	mov	r1, r5
1a00369e:	2004      	movs	r0, #4
1a0036a0:	f7ff ff4c 	bl	1a00353c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0036a4:	4a49      	ldr	r2, [pc, #292]	; (1a0037cc <Chip_SetupCoreClock+0x148>)
1a0036a6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0036a8:	f043 0301 	orr.w	r3, r3, #1
1a0036ac:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0036ae:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0036b2:	a901      	add	r1, sp, #4
1a0036b4:	4630      	mov	r0, r6
1a0036b6:	f7ff feb9 	bl	1a00342c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0036ba:	4b45      	ldr	r3, [pc, #276]	; (1a0037d0 <Chip_SetupCoreClock+0x14c>)
1a0036bc:	429e      	cmp	r6, r3
1a0036be:	d916      	bls.n	1a0036ee <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0036c0:	9b01      	ldr	r3, [sp, #4]
1a0036c2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0036c6:	d003      	beq.n	1a0036d0 <Chip_SetupCoreClock+0x4c>
1a0036c8:	e7fe      	b.n	1a0036c8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0036ca:	f7ff fe11 	bl	1a0032f0 <Chip_Clock_EnableCrystal>
1a0036ce:	e7e3      	b.n	1a003698 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0036d0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0036d4:	d005      	beq.n	1a0036e2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0036d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0036da:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0036dc:	2500      	movs	r5, #0
			direct = 1;
1a0036de:	2601      	movs	r6, #1
1a0036e0:	e007      	b.n	1a0036f2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0036e2:	9b04      	ldr	r3, [sp, #16]
1a0036e4:	3301      	adds	r3, #1
1a0036e6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0036e8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0036ea:	2600      	movs	r6, #0
1a0036ec:	e001      	b.n	1a0036f2 <Chip_SetupCoreClock+0x6e>
1a0036ee:	2500      	movs	r5, #0
1a0036f0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0036f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0036f6:	9b01      	ldr	r3, [sp, #4]
1a0036f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0036fc:	9a05      	ldr	r2, [sp, #20]
1a0036fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003702:	9a03      	ldr	r2, [sp, #12]
1a003704:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003708:	9a04      	ldr	r2, [sp, #16]
1a00370a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00370e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003712:	4a2e      	ldr	r2, [pc, #184]	; (1a0037cc <Chip_SetupCoreClock+0x148>)
1a003714:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003716:	4b2d      	ldr	r3, [pc, #180]	; (1a0037cc <Chip_SetupCoreClock+0x148>)
1a003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00371a:	f013 0f01 	tst.w	r3, #1
1a00371e:	d0fa      	beq.n	1a003716 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a003720:	2300      	movs	r3, #0
1a003722:	2201      	movs	r2, #1
1a003724:	2109      	movs	r1, #9
1a003726:	2004      	movs	r0, #4
1a003728:	f7ff ff08 	bl	1a00353c <Chip_Clock_SetBaseClock>

	if (direct) {
1a00372c:	b1fe      	cbz	r6, 1a00376e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00372e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003732:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003734:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003736:	1e5a      	subs	r2, r3, #1
1a003738:	9209      	str	r2, [sp, #36]	; 0x24
1a00373a:	2b00      	cmp	r3, #0
1a00373c:	d1fa      	bne.n	1a003734 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00373e:	9b01      	ldr	r3, [sp, #4]
1a003740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003744:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003746:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00374a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00374e:	9a05      	ldr	r2, [sp, #20]
1a003750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003754:	9a03      	ldr	r2, [sp, #12]
1a003756:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00375a:	9a04      	ldr	r2, [sp, #16]
1a00375c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003764:	4a19      	ldr	r2, [pc, #100]	; (1a0037cc <Chip_SetupCoreClock+0x148>)
1a003766:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003768:	b36c      	cbz	r4, 1a0037c6 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00376a:	2400      	movs	r4, #0
1a00376c:	e029      	b.n	1a0037c2 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00376e:	2d00      	cmp	r5, #0
1a003770:	d0fa      	beq.n	1a003768 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a003772:	f242 7310 	movw	r3, #10000	; 0x2710
1a003776:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003778:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00377a:	1e5a      	subs	r2, r3, #1
1a00377c:	9209      	str	r2, [sp, #36]	; 0x24
1a00377e:	2b00      	cmp	r3, #0
1a003780:	d1fa      	bne.n	1a003778 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a003782:	9b04      	ldr	r3, [sp, #16]
1a003784:	1e5a      	subs	r2, r3, #1
1a003786:	9204      	str	r2, [sp, #16]
1a003788:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00378c:	9b01      	ldr	r3, [sp, #4]
1a00378e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a003792:	9905      	ldr	r1, [sp, #20]
1a003794:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003798:	9903      	ldr	r1, [sp, #12]
1a00379a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00379e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0037a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0037a6:	4a09      	ldr	r2, [pc, #36]	; (1a0037cc <Chip_SetupCoreClock+0x148>)
1a0037a8:	6453      	str	r3, [r2, #68]	; 0x44
1a0037aa:	e7dd      	b.n	1a003768 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0037ac:	4809      	ldr	r0, [pc, #36]	; (1a0037d4 <Chip_SetupCoreClock+0x150>)
1a0037ae:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0037b2:	78cb      	ldrb	r3, [r1, #3]
1a0037b4:	788a      	ldrb	r2, [r1, #2]
1a0037b6:	7849      	ldrb	r1, [r1, #1]
1a0037b8:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0037bc:	f7ff febe 	bl	1a00353c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0037c0:	3401      	adds	r4, #1
1a0037c2:	2c11      	cmp	r4, #17
1a0037c4:	d9f2      	bls.n	1a0037ac <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0037c6:	b00a      	add	sp, #40	; 0x28
1a0037c8:	bd70      	pop	{r4, r5, r6, pc}
1a0037ca:	bf00      	nop
1a0037cc:	40050000 	.word	0x40050000
1a0037d0:	068e7780 	.word	0x068e7780
1a0037d4:	1a005ba8 	.word	0x1a005ba8

1a0037d8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0037d8:	4770      	bx	lr
1a0037da:	Address 0x000000001a0037da is out of bounds.


1a0037dc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0037dc:	4b03      	ldr	r3, [pc, #12]	; (1a0037ec <Chip_SSP_GetClockIndex+0x10>)
1a0037de:	4298      	cmp	r0, r3
1a0037e0:	d001      	beq.n	1a0037e6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0037e2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0037e4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0037e6:	20a5      	movs	r0, #165	; 0xa5
1a0037e8:	4770      	bx	lr
1a0037ea:	bf00      	nop
1a0037ec:	400c5000 	.word	0x400c5000

1a0037f0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0037f0:	4b04      	ldr	r3, [pc, #16]	; (1a003804 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0037f2:	4298      	cmp	r0, r3
1a0037f4:	d002      	beq.n	1a0037fc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0037f6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0037fa:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0037fc:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003800:	4770      	bx	lr
1a003802:	bf00      	nop
1a003804:	400c5000 	.word	0x400c5000

1a003808 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003808:	6803      	ldr	r3, [r0, #0]
1a00380a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00380e:	0209      	lsls	r1, r1, #8
1a003810:	b289      	uxth	r1, r1
1a003812:	4319      	orrs	r1, r3
1a003814:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003816:	6102      	str	r2, [r0, #16]
}
1a003818:	4770      	bx	lr

1a00381a <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00381a:	b570      	push	{r4, r5, r6, lr}
1a00381c:	4606      	mov	r6, r0
1a00381e:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003820:	f7ff ffe6 	bl	1a0037f0 <Chip_SSP_GetPeriphClockIndex>
1a003824:	f7ff ff08 	bl	1a003638 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003828:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a00382a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a00382e:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003830:	e000      	b.n	1a003834 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003832:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003834:	42ab      	cmp	r3, r5
1a003836:	d90b      	bls.n	1a003850 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003838:	1c4c      	adds	r4, r1, #1
1a00383a:	fb02 f304 	mul.w	r3, r2, r4
1a00383e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003842:	429d      	cmp	r5, r3
1a003844:	d2f6      	bcs.n	1a003834 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003846:	2cff      	cmp	r4, #255	; 0xff
1a003848:	d9f3      	bls.n	1a003832 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a00384a:	3202      	adds	r2, #2
				cr0_div = 0;
1a00384c:	2100      	movs	r1, #0
1a00384e:	e7f1      	b.n	1a003834 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003850:	4630      	mov	r0, r6
1a003852:	f7ff ffd9 	bl	1a003808 <Chip_SSP_SetClockRate>
}
1a003856:	bd70      	pop	{r4, r5, r6, pc}

1a003858 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003858:	b510      	push	{r4, lr}
1a00385a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00385c:	f7ff ffbe 	bl	1a0037dc <Chip_SSP_GetClockIndex>
1a003860:	f7ff fed0 	bl	1a003604 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003864:	4620      	mov	r0, r4
1a003866:	f7ff ffc3 	bl	1a0037f0 <Chip_SSP_GetPeriphClockIndex>
1a00386a:	f7ff fecb 	bl	1a003604 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00386e:	6863      	ldr	r3, [r4, #4]
1a003870:	f023 0304 	bic.w	r3, r3, #4
1a003874:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003876:	6823      	ldr	r3, [r4, #0]
1a003878:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00387c:	f043 0307 	orr.w	r3, r3, #7
1a003880:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003882:	4902      	ldr	r1, [pc, #8]	; (1a00388c <Chip_SSP_Init+0x34>)
1a003884:	4620      	mov	r0, r4
1a003886:	f7ff ffc8 	bl	1a00381a <Chip_SSP_SetBitRate>
}
1a00388a:	bd10      	pop	{r4, pc}
1a00388c:	000186a0 	.word	0x000186a0

1a003890 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003890:	2901      	cmp	r1, #1
1a003892:	d000      	beq.n	1a003896 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003894:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003896:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00389a:	0082      	lsls	r2, r0, #2
1a00389c:	4b03      	ldr	r3, [pc, #12]	; (1a0038ac <Chip_I2C_EventHandler+0x1c>)
1a00389e:	4413      	add	r3, r2
1a0038a0:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0038a2:	7d13      	ldrb	r3, [r2, #20]
1a0038a4:	b2db      	uxtb	r3, r3
1a0038a6:	2b04      	cmp	r3, #4
1a0038a8:	d0fb      	beq.n	1a0038a2 <Chip_I2C_EventHandler+0x12>
1a0038aa:	e7f3      	b.n	1a003894 <Chip_I2C_EventHandler+0x4>
1a0038ac:	10000008 	.word	0x10000008

1a0038b0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0038b0:	b570      	push	{r4, r5, r6, lr}
1a0038b2:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0038b4:	4e06      	ldr	r6, [pc, #24]	; (1a0038d0 <Chip_I2C_Init+0x20>)
1a0038b6:	00c4      	lsls	r4, r0, #3
1a0038b8:	1a22      	subs	r2, r4, r0
1a0038ba:	0093      	lsls	r3, r2, #2
1a0038bc:	4433      	add	r3, r6
1a0038be:	8898      	ldrh	r0, [r3, #4]
1a0038c0:	f7ff fea0 	bl	1a003604 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0038c4:	1b64      	subs	r4, r4, r5
1a0038c6:	00a3      	lsls	r3, r4, #2
1a0038c8:	58f3      	ldr	r3, [r6, r3]
1a0038ca:	226c      	movs	r2, #108	; 0x6c
1a0038cc:	619a      	str	r2, [r3, #24]
}
1a0038ce:	bd70      	pop	{r4, r5, r6, pc}
1a0038d0:	10000008 	.word	0x10000008

1a0038d4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0038d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0038d8:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0038da:	4e0b      	ldr	r6, [pc, #44]	; (1a003908 <Chip_I2C_SetClockRate+0x34>)
1a0038dc:	00c5      	lsls	r5, r0, #3
1a0038de:	1a2b      	subs	r3, r5, r0
1a0038e0:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0038e4:	eb06 0308 	add.w	r3, r6, r8
1a0038e8:	8898      	ldrh	r0, [r3, #4]
1a0038ea:	f7ff fea5 	bl	1a003638 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0038ee:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0038f2:	f856 3008 	ldr.w	r3, [r6, r8]
1a0038f6:	0842      	lsrs	r2, r0, #1
1a0038f8:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0038fa:	f856 3008 	ldr.w	r3, [r6, r8]
1a0038fe:	691a      	ldr	r2, [r3, #16]
1a003900:	1a80      	subs	r0, r0, r2
1a003902:	6158      	str	r0, [r3, #20]
}
1a003904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003908:	10000008 	.word	0x10000008

1a00390c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00390c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00390e:	4a0b      	ldr	r2, [pc, #44]	; (1a00393c <SystemInit+0x30>)
1a003910:	4b0b      	ldr	r3, [pc, #44]	; (1a003940 <SystemInit+0x34>)
1a003912:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003914:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003918:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00391a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00391e:	2b20      	cmp	r3, #32
1a003920:	d004      	beq.n	1a00392c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003922:	f7ff fabf 	bl	1a002ea4 <Board_SystemInit>
   Board_Init();
1a003926:	f7ff fa47 	bl	1a002db8 <Board_Init>
}
1a00392a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00392c:	4a04      	ldr	r2, [pc, #16]	; (1a003940 <SystemInit+0x34>)
1a00392e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003932:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003936:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00393a:	e7f2      	b.n	1a003922 <SystemInit+0x16>
1a00393c:	1a000000 	.word	0x1a000000
1a003940:	e000ed00 	.word	0xe000ed00

1a003944 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003944:	4b04      	ldr	r3, [pc, #16]	; (1a003958 <cyclesCounterInit+0x14>)
1a003946:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003948:	4a04      	ldr	r2, [pc, #16]	; (1a00395c <cyclesCounterInit+0x18>)
1a00394a:	6813      	ldr	r3, [r2, #0]
1a00394c:	f043 0301 	orr.w	r3, r3, #1
1a003950:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003952:	2001      	movs	r0, #1
1a003954:	4770      	bx	lr
1a003956:	bf00      	nop
1a003958:	10000040 	.word	0x10000040
1a00395c:	e0001000 	.word	0xe0001000

1a003960 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a003960:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a003964:	4908      	ldr	r1, [pc, #32]	; (1a003988 <tickerCallback+0x28>)
1a003966:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00396a:	f112 0b01 	adds.w	fp, r2, #1
1a00396e:	f143 0c00 	adc.w	ip, r3, #0
1a003972:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a003976:	4b05      	ldr	r3, [pc, #20]	; (1a00398c <tickerCallback+0x2c>)
1a003978:	681b      	ldr	r3, [r3, #0]
1a00397a:	b113      	cbz	r3, 1a003982 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00397c:	4a04      	ldr	r2, [pc, #16]	; (1a003990 <tickerCallback+0x30>)
1a00397e:	6810      	ldr	r0, [r2, #0]
1a003980:	4798      	blx	r3
   }
}
1a003982:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a003986:	bf00      	nop
1a003988:	10002bf0 	.word	0x10002bf0
1a00398c:	10002bf8 	.word	0x10002bf8
1a003990:	10002be8 	.word	0x10002be8

1a003994 <tickInit>:
{
1a003994:	b510      	push	{r4, lr}
1a003996:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a003998:	4b0e      	ldr	r3, [pc, #56]	; (1a0039d4 <tickInit+0x40>)
1a00399a:	9301      	str	r3, [sp, #4]
1a00399c:	4b0e      	ldr	r3, [pc, #56]	; (1a0039d8 <tickInit+0x44>)
1a00399e:	9300      	str	r3, [sp, #0]
1a0039a0:	2300      	movs	r3, #0
1a0039a2:	2201      	movs	r2, #1
1a0039a4:	4601      	mov	r1, r0
1a0039a6:	480d      	ldr	r0, [pc, #52]	; (1a0039dc <tickInit+0x48>)
1a0039a8:	f7fe fdd0 	bl	1a00254c <xTimerCreateStatic>
         if (h == NULL)
1a0039ac:	b178      	cbz	r0, 1a0039ce <tickInit+0x3a>
1a0039ae:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a0039b0:	f7fe f928 	bl	1a001c04 <xTaskGetTickCount>
1a0039b4:	2300      	movs	r3, #0
1a0039b6:	9300      	str	r3, [sp, #0]
1a0039b8:	4602      	mov	r2, r0
1a0039ba:	2101      	movs	r1, #1
1a0039bc:	4620      	mov	r0, r4
1a0039be:	f7fe fdeb 	bl	1a002598 <xTimerGenericCommand>
1a0039c2:	2801      	cmp	r0, #1
1a0039c4:	bf14      	ite	ne
1a0039c6:	2000      	movne	r0, #0
1a0039c8:	2001      	moveq	r0, #1
}
1a0039ca:	b002      	add	sp, #8
1a0039cc:	bd10      	pop	{r4, pc}
            return 0;
1a0039ce:	2000      	movs	r0, #0
1a0039d0:	e7fb      	b.n	1a0039ca <tickInit+0x36>
1a0039d2:	bf00      	nop
1a0039d4:	10002bfc 	.word	0x10002bfc
1a0039d8:	1a003961 	.word	0x1a003961
1a0039dc:	1a005bf0 	.word	0x1a005bf0

1a0039e0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0039e0:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0039e2:	4d0b      	ldr	r5, [pc, #44]	; (1a003a10 <gpioObtainPinInit+0x30>)
1a0039e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0039e8:	182c      	adds	r4, r5, r0
1a0039ea:	5628      	ldrsb	r0, [r5, r0]
1a0039ec:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0039ee:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0039f2:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0039f4:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a0039f8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0039fa:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a0039fe:	9b02      	ldr	r3, [sp, #8]
1a003a00:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a003a02:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a003a06:	9b03      	ldr	r3, [sp, #12]
1a003a08:	701a      	strb	r2, [r3, #0]
}
1a003a0a:	bc30      	pop	{r4, r5}
1a003a0c:	4770      	bx	lr
1a003a0e:	bf00      	nop
1a003a10:	1a005bfc 	.word	0x1a005bfc

1a003a14 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a003a14:	b570      	push	{r4, r5, r6, lr}
1a003a16:	b084      	sub	sp, #16
1a003a18:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003a1a:	2300      	movs	r3, #0
1a003a1c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003a20:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003a24:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003a28:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003a2c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003a30:	f10d 030b 	add.w	r3, sp, #11
1a003a34:	9301      	str	r3, [sp, #4]
1a003a36:	ab03      	add	r3, sp, #12
1a003a38:	9300      	str	r3, [sp, #0]
1a003a3a:	f10d 030d 	add.w	r3, sp, #13
1a003a3e:	f10d 020e 	add.w	r2, sp, #14
1a003a42:	f10d 010f 	add.w	r1, sp, #15
1a003a46:	f7ff ffcb 	bl	1a0039e0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003a4a:	2c05      	cmp	r4, #5
1a003a4c:	f200 80a5 	bhi.w	1a003b9a <gpioInit+0x186>
1a003a50:	e8df f004 	tbb	[pc, r4]
1a003a54:	45278109 	.word	0x45278109
1a003a58:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003a5a:	4851      	ldr	r0, [pc, #324]	; (1a003ba0 <gpioInit+0x18c>)
1a003a5c:	f7ff febc 	bl	1a0037d8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a003a60:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a003a62:	b004      	add	sp, #16
1a003a64:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a003a66:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003a6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003a6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003a72:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003a76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003a7a:	494a      	ldr	r1, [pc, #296]	; (1a003ba4 <gpioInit+0x190>)
1a003a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003a80:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003a84:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003a88:	2001      	movs	r0, #1
1a003a8a:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a003a8e:	4c44      	ldr	r4, [pc, #272]	; (1a003ba0 <gpioInit+0x18c>)
1a003a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003a94:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003a98:	ea22 0201 	bic.w	r2, r2, r1
1a003a9c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003aa0:	e7df      	b.n	1a003a62 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003aa2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003aa6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003aaa:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003aae:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a003ab2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003ab6:	493b      	ldr	r1, [pc, #236]	; (1a003ba4 <gpioInit+0x190>)
1a003ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003abc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003ac0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003ac4:	2001      	movs	r0, #1
1a003ac6:	fa00 f102 	lsl.w	r1, r0, r2
1a003aca:	4c35      	ldr	r4, [pc, #212]	; (1a003ba0 <gpioInit+0x18c>)
1a003acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003ad0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003ad4:	ea22 0201 	bic.w	r2, r2, r1
1a003ad8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003adc:	e7c1      	b.n	1a003a62 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003ade:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003ae2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003ae6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003aea:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a003aee:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003af2:	492c      	ldr	r1, [pc, #176]	; (1a003ba4 <gpioInit+0x190>)
1a003af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003af8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003afc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003b00:	2001      	movs	r0, #1
1a003b02:	fa00 f102 	lsl.w	r1, r0, r2
1a003b06:	4c26      	ldr	r4, [pc, #152]	; (1a003ba0 <gpioInit+0x18c>)
1a003b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003b0c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003b10:	ea22 0201 	bic.w	r2, r2, r1
1a003b14:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003b18:	e7a3      	b.n	1a003a62 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003b1a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003b1e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003b22:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003b26:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a003b2a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003b2e:	491d      	ldr	r1, [pc, #116]	; (1a003ba4 <gpioInit+0x190>)
1a003b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003b34:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003b38:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003b3c:	2001      	movs	r0, #1
1a003b3e:	fa00 f102 	lsl.w	r1, r0, r2
1a003b42:	4c17      	ldr	r4, [pc, #92]	; (1a003ba0 <gpioInit+0x18c>)
1a003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003b48:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a003b4c:	ea22 0201 	bic.w	r2, r2, r1
1a003b50:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a003b54:	e785      	b.n	1a003a62 <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a003b56:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003b5a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003b5e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a003b62:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003b66:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003b6a:	490e      	ldr	r1, [pc, #56]	; (1a003ba4 <gpioInit+0x190>)
1a003b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a003b70:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a003b74:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003b78:	2001      	movs	r0, #1
1a003b7a:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a003b7e:	4b08      	ldr	r3, [pc, #32]	; (1a003ba0 <gpioInit+0x18c>)
1a003b80:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a003b84:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a003b88:	4331      	orrs	r1, r6
1a003b8a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a003b8e:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a003b90:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a003b94:	2100      	movs	r1, #0
1a003b96:	5499      	strb	r1, [r3, r2]
1a003b98:	e763      	b.n	1a003a62 <gpioInit+0x4e>
      ret_val = 0;
1a003b9a:	2000      	movs	r0, #0
1a003b9c:	e761      	b.n	1a003a62 <gpioInit+0x4e>
1a003b9e:	bf00      	nop
1a003ba0:	400f4000 	.word	0x400f4000
1a003ba4:	40086000 	.word	0x40086000

1a003ba8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a003ba8:	b510      	push	{r4, lr}
1a003baa:	b084      	sub	sp, #16
1a003bac:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003bae:	2300      	movs	r3, #0
1a003bb0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003bb4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003bb8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003bbc:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003bc0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003bc4:	f10d 030b 	add.w	r3, sp, #11
1a003bc8:	9301      	str	r3, [sp, #4]
1a003bca:	ab03      	add	r3, sp, #12
1a003bcc:	9300      	str	r3, [sp, #0]
1a003bce:	f10d 030d 	add.w	r3, sp, #13
1a003bd2:	f10d 020e 	add.w	r2, sp, #14
1a003bd6:	f10d 010f 	add.w	r1, sp, #15
1a003bda:	f7ff ff01 	bl	1a0039e0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a003bde:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003be2:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a003be6:	3400      	adds	r4, #0
1a003be8:	bf18      	it	ne
1a003bea:	2401      	movne	r4, #1
1a003bec:	015b      	lsls	r3, r3, #5
1a003bee:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003bf2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003bf6:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a003bf8:	2001      	movs	r0, #1
1a003bfa:	b004      	add	sp, #16
1a003bfc:	bd10      	pop	{r4, pc}

1a003bfe <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a003bfe:	b500      	push	{lr}
1a003c00:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a003c02:	2300      	movs	r3, #0
1a003c04:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003c08:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a003c0c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003c10:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003c14:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003c18:	f10d 030b 	add.w	r3, sp, #11
1a003c1c:	9301      	str	r3, [sp, #4]
1a003c1e:	ab03      	add	r3, sp, #12
1a003c20:	9300      	str	r3, [sp, #0]
1a003c22:	f10d 030d 	add.w	r3, sp, #13
1a003c26:	f10d 020e 	add.w	r2, sp, #14
1a003c2a:	f10d 010f 	add.w	r1, sp, #15
1a003c2e:	f7ff fed7 	bl	1a0039e0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a003c32:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a003c36:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a003c3a:	015b      	lsls	r3, r3, #5
1a003c3c:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a003c40:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a003c44:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a003c46:	3000      	adds	r0, #0
1a003c48:	bf18      	it	ne
1a003c4a:	2001      	movne	r0, #1
1a003c4c:	b005      	add	sp, #20
1a003c4e:	f85d fb04 	ldr.w	pc, [sp], #4
1a003c52:	Address 0x000000001a003c52 is out of bounds.


1a003c54 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003c54:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003c56:	4b04      	ldr	r3, [pc, #16]	; (1a003c68 <USB0_IRQHandler+0x14>)
1a003c58:	681b      	ldr	r3, [r3, #0]
1a003c5a:	681b      	ldr	r3, [r3, #0]
1a003c5c:	68db      	ldr	r3, [r3, #12]
1a003c5e:	4a03      	ldr	r2, [pc, #12]	; (1a003c6c <USB0_IRQHandler+0x18>)
1a003c60:	6810      	ldr	r0, [r2, #0]
1a003c62:	4798      	blx	r3
}
1a003c64:	bd08      	pop	{r3, pc}
1a003c66:	bf00      	nop
1a003c68:	10002c90 	.word	0x10002c90
1a003c6c:	10002c2c 	.word	0x10002c2c

1a003c70 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a003c70:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a003c72:	f7ff fa35 	bl	1a0030e0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003c76:	4b3a      	ldr	r3, [pc, #232]	; (1a003d60 <boardInit+0xf0>)
1a003c78:	6818      	ldr	r0, [r3, #0]
1a003c7a:	f7ff fe63 	bl	1a003944 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a003c7e:	2001      	movs	r0, #1
1a003c80:	2100      	movs	r1, #0
1a003c82:	f7ff fe87 	bl	1a003994 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a003c86:	2105      	movs	r1, #5
1a003c88:	2000      	movs	r0, #0
1a003c8a:	f7ff fec3 	bl	1a003a14 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a003c8e:	2100      	movs	r1, #0
1a003c90:	2024      	movs	r0, #36	; 0x24
1a003c92:	f7ff febf 	bl	1a003a14 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a003c96:	2100      	movs	r1, #0
1a003c98:	2025      	movs	r0, #37	; 0x25
1a003c9a:	f7ff febb 	bl	1a003a14 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a003c9e:	2100      	movs	r1, #0
1a003ca0:	2026      	movs	r0, #38	; 0x26
1a003ca2:	f7ff feb7 	bl	1a003a14 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003ca6:	2100      	movs	r1, #0
1a003ca8:	2027      	movs	r0, #39	; 0x27
1a003caa:	f7ff feb3 	bl	1a003a14 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a003cae:	2101      	movs	r1, #1
1a003cb0:	2028      	movs	r0, #40	; 0x28
1a003cb2:	f7ff feaf 	bl	1a003a14 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003cb6:	2101      	movs	r1, #1
1a003cb8:	2029      	movs	r0, #41	; 0x29
1a003cba:	f7ff feab 	bl	1a003a14 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a003cbe:	2101      	movs	r1, #1
1a003cc0:	202a      	movs	r0, #42	; 0x2a
1a003cc2:	f7ff fea7 	bl	1a003a14 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a003cc6:	2101      	movs	r1, #1
1a003cc8:	202b      	movs	r0, #43	; 0x2b
1a003cca:	f7ff fea3 	bl	1a003a14 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a003cce:	2101      	movs	r1, #1
1a003cd0:	202c      	movs	r0, #44	; 0x2c
1a003cd2:	f7ff fe9f 	bl	1a003a14 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a003cd6:	2101      	movs	r1, #1
1a003cd8:	202d      	movs	r0, #45	; 0x2d
1a003cda:	f7ff fe9b 	bl	1a003a14 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a003cde:	2100      	movs	r1, #0
1a003ce0:	202e      	movs	r0, #46	; 0x2e
1a003ce2:	f7ff fe97 	bl	1a003a14 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a003ce6:	2100      	movs	r1, #0
1a003ce8:	202f      	movs	r0, #47	; 0x2f
1a003cea:	f7ff fe93 	bl	1a003a14 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a003cee:	2100      	movs	r1, #0
1a003cf0:	2030      	movs	r0, #48	; 0x30
1a003cf2:	f7ff fe8f 	bl	1a003a14 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a003cf6:	2100      	movs	r1, #0
1a003cf8:	2031      	movs	r0, #49	; 0x31
1a003cfa:	f7ff fe8b 	bl	1a003a14 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a003cfe:	2100      	movs	r1, #0
1a003d00:	2032      	movs	r0, #50	; 0x32
1a003d02:	f7ff fe87 	bl	1a003a14 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a003d06:	2100      	movs	r1, #0
1a003d08:	2033      	movs	r0, #51	; 0x33
1a003d0a:	f7ff fe83 	bl	1a003a14 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a003d0e:	2100      	movs	r1, #0
1a003d10:	2034      	movs	r0, #52	; 0x34
1a003d12:	f7ff fe7f 	bl	1a003a14 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a003d16:	2100      	movs	r1, #0
1a003d18:	2035      	movs	r0, #53	; 0x35
1a003d1a:	f7ff fe7b 	bl	1a003a14 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a003d1e:	2101      	movs	r1, #1
1a003d20:	2036      	movs	r0, #54	; 0x36
1a003d22:	f7ff fe77 	bl	1a003a14 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003d26:	2101      	movs	r1, #1
1a003d28:	2037      	movs	r0, #55	; 0x37
1a003d2a:	f7ff fe73 	bl	1a003a14 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a003d2e:	2101      	movs	r1, #1
1a003d30:	2038      	movs	r0, #56	; 0x38
1a003d32:	f7ff fe6f 	bl	1a003a14 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003d36:	2101      	movs	r1, #1
1a003d38:	2039      	movs	r0, #57	; 0x39
1a003d3a:	f7ff fe6b 	bl	1a003a14 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a003d3e:	2101      	movs	r1, #1
1a003d40:	203a      	movs	r0, #58	; 0x3a
1a003d42:	f7ff fe67 	bl	1a003a14 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003d46:	2101      	movs	r1, #1
1a003d48:	203b      	movs	r0, #59	; 0x3b
1a003d4a:	f7ff fe63 	bl	1a003a14 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a003d4e:	2101      	movs	r1, #1
1a003d50:	203c      	movs	r0, #60	; 0x3c
1a003d52:	f7ff fe5f 	bl	1a003a14 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003d56:	2101      	movs	r1, #1
1a003d58:	203d      	movs	r0, #61	; 0x3d
1a003d5a:	f7ff fe5b 	bl	1a003a14 <gpioInit>

}
1a003d5e:	bd08      	pop	{r3, pc}
1a003d60:	10002c8c 	.word	0x10002c8c

1a003d64 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003d64:	2301      	movs	r3, #1
1a003d66:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a003d6a:	4b01      	ldr	r3, [pc, #4]	; (1a003d70 <clearInterrupt+0xc>)
1a003d6c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a003d6e:	4770      	bx	lr
1a003d70:	40087000 	.word	0x40087000

1a003d74 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a003d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a003d76:	4b12      	ldr	r3, [pc, #72]	; (1a003dc0 <serveInterrupt+0x4c>)
1a003d78:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a003d7a:	4b12      	ldr	r3, [pc, #72]	; (1a003dc4 <serveInterrupt+0x50>)
1a003d7c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a003d7e:	2301      	movs	r3, #1
1a003d80:	4083      	lsls	r3, r0
1a003d82:	420b      	tst	r3, r1
1a003d84:	d111      	bne.n	1a003daa <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a003d86:	4910      	ldr	r1, [pc, #64]	; (1a003dc8 <serveInterrupt+0x54>)
1a003d88:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a003d8a:	4d10      	ldr	r5, [pc, #64]	; (1a003dcc <serveInterrupt+0x58>)
1a003d8c:	0051      	lsls	r1, r2, #1
1a003d8e:	188f      	adds	r7, r1, r2
1a003d90:	00fc      	lsls	r4, r7, #3
1a003d92:	4627      	mov	r7, r4
1a003d94:	442c      	add	r4, r5
1a003d96:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a003d98:	6864      	ldr	r4, [r4, #4]
1a003d9a:	1b36      	subs	r6, r6, r4
1a003d9c:	443d      	add	r5, r7
1a003d9e:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a003da0:	4a08      	ldr	r2, [pc, #32]	; (1a003dc4 <serveInterrupt+0x50>)
1a003da2:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a003da4:	f7ff ffde 	bl	1a003d64 <clearInterrupt>
}
1a003da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003daa:	4907      	ldr	r1, [pc, #28]	; (1a003dc8 <serveInterrupt+0x54>)
1a003dac:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a003dae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a003db2:	00d1      	lsls	r1, r2, #3
1a003db4:	4a05      	ldr	r2, [pc, #20]	; (1a003dcc <serveInterrupt+0x58>)
1a003db6:	440a      	add	r2, r1
1a003db8:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a003dba:	4a02      	ldr	r2, [pc, #8]	; (1a003dc4 <serveInterrupt+0x50>)
1a003dbc:	61d3      	str	r3, [r2, #28]
1a003dbe:	e7f1      	b.n	1a003da4 <serveInterrupt+0x30>
1a003dc0:	1a005d34 	.word	0x1a005d34
1a003dc4:	40087000 	.word	0x40087000
1a003dc8:	40084000 	.word	0x40084000
1a003dcc:	10000044 	.word	0x10000044

1a003dd0 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a003dd0:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a003dd2:	2000      	movs	r0, #0
1a003dd4:	f7ff ffce 	bl	1a003d74 <serveInterrupt>
}
1a003dd8:	bd08      	pop	{r3, pc}

1a003dda <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a003dda:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a003ddc:	2001      	movs	r0, #1
1a003dde:	f7ff ffc9 	bl	1a003d74 <serveInterrupt>
}
1a003de2:	bd08      	pop	{r3, pc}

1a003de4 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a003de4:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a003de6:	2002      	movs	r0, #2
1a003de8:	f7ff ffc4 	bl	1a003d74 <serveInterrupt>
}
1a003dec:	bd08      	pop	{r3, pc}
1a003dee:	Address 0x000000001a003dee is out of bounds.


1a003df0 <__aeabi_drsub>:
1a003df0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a003df4:	e002      	b.n	1a003dfc <__adddf3>
1a003df6:	bf00      	nop

1a003df8 <__aeabi_dsub>:
1a003df8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a003dfc <__adddf3>:
1a003dfc:	b530      	push	{r4, r5, lr}
1a003dfe:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a003e02:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a003e06:	ea94 0f05 	teq	r4, r5
1a003e0a:	bf08      	it	eq
1a003e0c:	ea90 0f02 	teqeq	r0, r2
1a003e10:	bf1f      	itttt	ne
1a003e12:	ea54 0c00 	orrsne.w	ip, r4, r0
1a003e16:	ea55 0c02 	orrsne.w	ip, r5, r2
1a003e1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a003e1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003e22:	f000 80e2 	beq.w	1a003fea <__adddf3+0x1ee>
1a003e26:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a003e2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a003e2e:	bfb8      	it	lt
1a003e30:	426d      	neglt	r5, r5
1a003e32:	dd0c      	ble.n	1a003e4e <__adddf3+0x52>
1a003e34:	442c      	add	r4, r5
1a003e36:	ea80 0202 	eor.w	r2, r0, r2
1a003e3a:	ea81 0303 	eor.w	r3, r1, r3
1a003e3e:	ea82 0000 	eor.w	r0, r2, r0
1a003e42:	ea83 0101 	eor.w	r1, r3, r1
1a003e46:	ea80 0202 	eor.w	r2, r0, r2
1a003e4a:	ea81 0303 	eor.w	r3, r1, r3
1a003e4e:	2d36      	cmp	r5, #54	; 0x36
1a003e50:	bf88      	it	hi
1a003e52:	bd30      	pophi	{r4, r5, pc}
1a003e54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a003e58:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a003e5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a003e60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a003e64:	d002      	beq.n	1a003e6c <__adddf3+0x70>
1a003e66:	4240      	negs	r0, r0
1a003e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003e6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a003e70:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a003e74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a003e78:	d002      	beq.n	1a003e80 <__adddf3+0x84>
1a003e7a:	4252      	negs	r2, r2
1a003e7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003e80:	ea94 0f05 	teq	r4, r5
1a003e84:	f000 80a7 	beq.w	1a003fd6 <__adddf3+0x1da>
1a003e88:	f1a4 0401 	sub.w	r4, r4, #1
1a003e8c:	f1d5 0e20 	rsbs	lr, r5, #32
1a003e90:	db0d      	blt.n	1a003eae <__adddf3+0xb2>
1a003e92:	fa02 fc0e 	lsl.w	ip, r2, lr
1a003e96:	fa22 f205 	lsr.w	r2, r2, r5
1a003e9a:	1880      	adds	r0, r0, r2
1a003e9c:	f141 0100 	adc.w	r1, r1, #0
1a003ea0:	fa03 f20e 	lsl.w	r2, r3, lr
1a003ea4:	1880      	adds	r0, r0, r2
1a003ea6:	fa43 f305 	asr.w	r3, r3, r5
1a003eaa:	4159      	adcs	r1, r3
1a003eac:	e00e      	b.n	1a003ecc <__adddf3+0xd0>
1a003eae:	f1a5 0520 	sub.w	r5, r5, #32
1a003eb2:	f10e 0e20 	add.w	lr, lr, #32
1a003eb6:	2a01      	cmp	r2, #1
1a003eb8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a003ebc:	bf28      	it	cs
1a003ebe:	f04c 0c02 	orrcs.w	ip, ip, #2
1a003ec2:	fa43 f305 	asr.w	r3, r3, r5
1a003ec6:	18c0      	adds	r0, r0, r3
1a003ec8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a003ecc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a003ed0:	d507      	bpl.n	1a003ee2 <__adddf3+0xe6>
1a003ed2:	f04f 0e00 	mov.w	lr, #0
1a003ed6:	f1dc 0c00 	rsbs	ip, ip, #0
1a003eda:	eb7e 0000 	sbcs.w	r0, lr, r0
1a003ede:	eb6e 0101 	sbc.w	r1, lr, r1
1a003ee2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a003ee6:	d31b      	bcc.n	1a003f20 <__adddf3+0x124>
1a003ee8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a003eec:	d30c      	bcc.n	1a003f08 <__adddf3+0x10c>
1a003eee:	0849      	lsrs	r1, r1, #1
1a003ef0:	ea5f 0030 	movs.w	r0, r0, rrx
1a003ef4:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a003ef8:	f104 0401 	add.w	r4, r4, #1
1a003efc:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a003f00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a003f04:	f080 809a 	bcs.w	1a00403c <__adddf3+0x240>
1a003f08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a003f0c:	bf08      	it	eq
1a003f0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a003f12:	f150 0000 	adcs.w	r0, r0, #0
1a003f16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a003f1a:	ea41 0105 	orr.w	r1, r1, r5
1a003f1e:	bd30      	pop	{r4, r5, pc}
1a003f20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a003f24:	4140      	adcs	r0, r0
1a003f26:	eb41 0101 	adc.w	r1, r1, r1
1a003f2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a003f2e:	f1a4 0401 	sub.w	r4, r4, #1
1a003f32:	d1e9      	bne.n	1a003f08 <__adddf3+0x10c>
1a003f34:	f091 0f00 	teq	r1, #0
1a003f38:	bf04      	itt	eq
1a003f3a:	4601      	moveq	r1, r0
1a003f3c:	2000      	moveq	r0, #0
1a003f3e:	fab1 f381 	clz	r3, r1
1a003f42:	bf08      	it	eq
1a003f44:	3320      	addeq	r3, #32
1a003f46:	f1a3 030b 	sub.w	r3, r3, #11
1a003f4a:	f1b3 0220 	subs.w	r2, r3, #32
1a003f4e:	da0c      	bge.n	1a003f6a <__adddf3+0x16e>
1a003f50:	320c      	adds	r2, #12
1a003f52:	dd08      	ble.n	1a003f66 <__adddf3+0x16a>
1a003f54:	f102 0c14 	add.w	ip, r2, #20
1a003f58:	f1c2 020c 	rsb	r2, r2, #12
1a003f5c:	fa01 f00c 	lsl.w	r0, r1, ip
1a003f60:	fa21 f102 	lsr.w	r1, r1, r2
1a003f64:	e00c      	b.n	1a003f80 <__adddf3+0x184>
1a003f66:	f102 0214 	add.w	r2, r2, #20
1a003f6a:	bfd8      	it	le
1a003f6c:	f1c2 0c20 	rsble	ip, r2, #32
1a003f70:	fa01 f102 	lsl.w	r1, r1, r2
1a003f74:	fa20 fc0c 	lsr.w	ip, r0, ip
1a003f78:	bfdc      	itt	le
1a003f7a:	ea41 010c 	orrle.w	r1, r1, ip
1a003f7e:	4090      	lslle	r0, r2
1a003f80:	1ae4      	subs	r4, r4, r3
1a003f82:	bfa2      	ittt	ge
1a003f84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a003f88:	4329      	orrge	r1, r5
1a003f8a:	bd30      	popge	{r4, r5, pc}
1a003f8c:	ea6f 0404 	mvn.w	r4, r4
1a003f90:	3c1f      	subs	r4, #31
1a003f92:	da1c      	bge.n	1a003fce <__adddf3+0x1d2>
1a003f94:	340c      	adds	r4, #12
1a003f96:	dc0e      	bgt.n	1a003fb6 <__adddf3+0x1ba>
1a003f98:	f104 0414 	add.w	r4, r4, #20
1a003f9c:	f1c4 0220 	rsb	r2, r4, #32
1a003fa0:	fa20 f004 	lsr.w	r0, r0, r4
1a003fa4:	fa01 f302 	lsl.w	r3, r1, r2
1a003fa8:	ea40 0003 	orr.w	r0, r0, r3
1a003fac:	fa21 f304 	lsr.w	r3, r1, r4
1a003fb0:	ea45 0103 	orr.w	r1, r5, r3
1a003fb4:	bd30      	pop	{r4, r5, pc}
1a003fb6:	f1c4 040c 	rsb	r4, r4, #12
1a003fba:	f1c4 0220 	rsb	r2, r4, #32
1a003fbe:	fa20 f002 	lsr.w	r0, r0, r2
1a003fc2:	fa01 f304 	lsl.w	r3, r1, r4
1a003fc6:	ea40 0003 	orr.w	r0, r0, r3
1a003fca:	4629      	mov	r1, r5
1a003fcc:	bd30      	pop	{r4, r5, pc}
1a003fce:	fa21 f004 	lsr.w	r0, r1, r4
1a003fd2:	4629      	mov	r1, r5
1a003fd4:	bd30      	pop	{r4, r5, pc}
1a003fd6:	f094 0f00 	teq	r4, #0
1a003fda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a003fde:	bf06      	itte	eq
1a003fe0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a003fe4:	3401      	addeq	r4, #1
1a003fe6:	3d01      	subne	r5, #1
1a003fe8:	e74e      	b.n	1a003e88 <__adddf3+0x8c>
1a003fea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a003fee:	bf18      	it	ne
1a003ff0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a003ff4:	d029      	beq.n	1a00404a <__adddf3+0x24e>
1a003ff6:	ea94 0f05 	teq	r4, r5
1a003ffa:	bf08      	it	eq
1a003ffc:	ea90 0f02 	teqeq	r0, r2
1a004000:	d005      	beq.n	1a00400e <__adddf3+0x212>
1a004002:	ea54 0c00 	orrs.w	ip, r4, r0
1a004006:	bf04      	itt	eq
1a004008:	4619      	moveq	r1, r3
1a00400a:	4610      	moveq	r0, r2
1a00400c:	bd30      	pop	{r4, r5, pc}
1a00400e:	ea91 0f03 	teq	r1, r3
1a004012:	bf1e      	ittt	ne
1a004014:	2100      	movne	r1, #0
1a004016:	2000      	movne	r0, #0
1a004018:	bd30      	popne	{r4, r5, pc}
1a00401a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a00401e:	d105      	bne.n	1a00402c <__adddf3+0x230>
1a004020:	0040      	lsls	r0, r0, #1
1a004022:	4149      	adcs	r1, r1
1a004024:	bf28      	it	cs
1a004026:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00402a:	bd30      	pop	{r4, r5, pc}
1a00402c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a004030:	bf3c      	itt	cc
1a004032:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a004036:	bd30      	popcc	{r4, r5, pc}
1a004038:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00403c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a004040:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004044:	f04f 0000 	mov.w	r0, #0
1a004048:	bd30      	pop	{r4, r5, pc}
1a00404a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a00404e:	bf1a      	itte	ne
1a004050:	4619      	movne	r1, r3
1a004052:	4610      	movne	r0, r2
1a004054:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a004058:	bf1c      	itt	ne
1a00405a:	460b      	movne	r3, r1
1a00405c:	4602      	movne	r2, r0
1a00405e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004062:	bf06      	itte	eq
1a004064:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a004068:	ea91 0f03 	teqeq	r1, r3
1a00406c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a004070:	bd30      	pop	{r4, r5, pc}
1a004072:	bf00      	nop

1a004074 <__aeabi_ui2d>:
1a004074:	f090 0f00 	teq	r0, #0
1a004078:	bf04      	itt	eq
1a00407a:	2100      	moveq	r1, #0
1a00407c:	4770      	bxeq	lr
1a00407e:	b530      	push	{r4, r5, lr}
1a004080:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004084:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a004088:	f04f 0500 	mov.w	r5, #0
1a00408c:	f04f 0100 	mov.w	r1, #0
1a004090:	e750      	b.n	1a003f34 <__adddf3+0x138>
1a004092:	bf00      	nop

1a004094 <__aeabi_i2d>:
1a004094:	f090 0f00 	teq	r0, #0
1a004098:	bf04      	itt	eq
1a00409a:	2100      	moveq	r1, #0
1a00409c:	4770      	bxeq	lr
1a00409e:	b530      	push	{r4, r5, lr}
1a0040a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0040a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0040a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a0040ac:	bf48      	it	mi
1a0040ae:	4240      	negmi	r0, r0
1a0040b0:	f04f 0100 	mov.w	r1, #0
1a0040b4:	e73e      	b.n	1a003f34 <__adddf3+0x138>
1a0040b6:	bf00      	nop

1a0040b8 <__aeabi_f2d>:
1a0040b8:	0042      	lsls	r2, r0, #1
1a0040ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a0040be:	ea4f 0131 	mov.w	r1, r1, rrx
1a0040c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a0040c6:	bf1f      	itttt	ne
1a0040c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a0040cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a0040d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a0040d4:	4770      	bxne	lr
1a0040d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a0040da:	bf08      	it	eq
1a0040dc:	4770      	bxeq	lr
1a0040de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a0040e2:	bf04      	itt	eq
1a0040e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a0040e8:	4770      	bxeq	lr
1a0040ea:	b530      	push	{r4, r5, lr}
1a0040ec:	f44f 7460 	mov.w	r4, #896	; 0x380
1a0040f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0040f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0040f8:	e71c      	b.n	1a003f34 <__adddf3+0x138>
1a0040fa:	bf00      	nop

1a0040fc <__aeabi_ul2d>:
1a0040fc:	ea50 0201 	orrs.w	r2, r0, r1
1a004100:	bf08      	it	eq
1a004102:	4770      	bxeq	lr
1a004104:	b530      	push	{r4, r5, lr}
1a004106:	f04f 0500 	mov.w	r5, #0
1a00410a:	e00a      	b.n	1a004122 <__aeabi_l2d+0x16>

1a00410c <__aeabi_l2d>:
1a00410c:	ea50 0201 	orrs.w	r2, r0, r1
1a004110:	bf08      	it	eq
1a004112:	4770      	bxeq	lr
1a004114:	b530      	push	{r4, r5, lr}
1a004116:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00411a:	d502      	bpl.n	1a004122 <__aeabi_l2d+0x16>
1a00411c:	4240      	negs	r0, r0
1a00411e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a004122:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a004126:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00412a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a00412e:	f43f aed8 	beq.w	1a003ee2 <__adddf3+0xe6>
1a004132:	f04f 0203 	mov.w	r2, #3
1a004136:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a00413a:	bf18      	it	ne
1a00413c:	3203      	addne	r2, #3
1a00413e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a004142:	bf18      	it	ne
1a004144:	3203      	addne	r2, #3
1a004146:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a00414a:	f1c2 0320 	rsb	r3, r2, #32
1a00414e:	fa00 fc03 	lsl.w	ip, r0, r3
1a004152:	fa20 f002 	lsr.w	r0, r0, r2
1a004156:	fa01 fe03 	lsl.w	lr, r1, r3
1a00415a:	ea40 000e 	orr.w	r0, r0, lr
1a00415e:	fa21 f102 	lsr.w	r1, r1, r2
1a004162:	4414      	add	r4, r2
1a004164:	e6bd      	b.n	1a003ee2 <__adddf3+0xe6>
1a004166:	bf00      	nop

1a004168 <__aeabi_dmul>:
1a004168:	b570      	push	{r4, r5, r6, lr}
1a00416a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00416e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a004172:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a004176:	bf1d      	ittte	ne
1a004178:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a00417c:	ea94 0f0c 	teqne	r4, ip
1a004180:	ea95 0f0c 	teqne	r5, ip
1a004184:	f000 f8de 	bleq	1a004344 <__aeabi_dmul+0x1dc>
1a004188:	442c      	add	r4, r5
1a00418a:	ea81 0603 	eor.w	r6, r1, r3
1a00418e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a004192:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a004196:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a00419a:	bf18      	it	ne
1a00419c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a0041a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0041a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0041a8:	d038      	beq.n	1a00421c <__aeabi_dmul+0xb4>
1a0041aa:	fba0 ce02 	umull	ip, lr, r0, r2
1a0041ae:	f04f 0500 	mov.w	r5, #0
1a0041b2:	fbe1 e502 	umlal	lr, r5, r1, r2
1a0041b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a0041ba:	fbe0 e503 	umlal	lr, r5, r0, r3
1a0041be:	f04f 0600 	mov.w	r6, #0
1a0041c2:	fbe1 5603 	umlal	r5, r6, r1, r3
1a0041c6:	f09c 0f00 	teq	ip, #0
1a0041ca:	bf18      	it	ne
1a0041cc:	f04e 0e01 	orrne.w	lr, lr, #1
1a0041d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a0041d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a0041d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a0041dc:	d204      	bcs.n	1a0041e8 <__aeabi_dmul+0x80>
1a0041de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a0041e2:	416d      	adcs	r5, r5
1a0041e4:	eb46 0606 	adc.w	r6, r6, r6
1a0041e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a0041ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a0041f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a0041f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0041f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0041fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a004200:	bf88      	it	hi
1a004202:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a004206:	d81e      	bhi.n	1a004246 <__aeabi_dmul+0xde>
1a004208:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a00420c:	bf08      	it	eq
1a00420e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a004212:	f150 0000 	adcs.w	r0, r0, #0
1a004216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00421a:	bd70      	pop	{r4, r5, r6, pc}
1a00421c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a004220:	ea46 0101 	orr.w	r1, r6, r1
1a004224:	ea40 0002 	orr.w	r0, r0, r2
1a004228:	ea81 0103 	eor.w	r1, r1, r3
1a00422c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a004230:	bfc2      	ittt	gt
1a004232:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004236:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a00423a:	bd70      	popgt	{r4, r5, r6, pc}
1a00423c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a004240:	f04f 0e00 	mov.w	lr, #0
1a004244:	3c01      	subs	r4, #1
1a004246:	f300 80ab 	bgt.w	1a0043a0 <__aeabi_dmul+0x238>
1a00424a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a00424e:	bfde      	ittt	le
1a004250:	2000      	movle	r0, #0
1a004252:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a004256:	bd70      	pople	{r4, r5, r6, pc}
1a004258:	f1c4 0400 	rsb	r4, r4, #0
1a00425c:	3c20      	subs	r4, #32
1a00425e:	da35      	bge.n	1a0042cc <__aeabi_dmul+0x164>
1a004260:	340c      	adds	r4, #12
1a004262:	dc1b      	bgt.n	1a00429c <__aeabi_dmul+0x134>
1a004264:	f104 0414 	add.w	r4, r4, #20
1a004268:	f1c4 0520 	rsb	r5, r4, #32
1a00426c:	fa00 f305 	lsl.w	r3, r0, r5
1a004270:	fa20 f004 	lsr.w	r0, r0, r4
1a004274:	fa01 f205 	lsl.w	r2, r1, r5
1a004278:	ea40 0002 	orr.w	r0, r0, r2
1a00427c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a004280:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a004284:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a004288:	fa21 f604 	lsr.w	r6, r1, r4
1a00428c:	eb42 0106 	adc.w	r1, r2, r6
1a004290:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a004294:	bf08      	it	eq
1a004296:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a00429a:	bd70      	pop	{r4, r5, r6, pc}
1a00429c:	f1c4 040c 	rsb	r4, r4, #12
1a0042a0:	f1c4 0520 	rsb	r5, r4, #32
1a0042a4:	fa00 f304 	lsl.w	r3, r0, r4
1a0042a8:	fa20 f005 	lsr.w	r0, r0, r5
1a0042ac:	fa01 f204 	lsl.w	r2, r1, r4
1a0042b0:	ea40 0002 	orr.w	r0, r0, r2
1a0042b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0042b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a0042bc:	f141 0100 	adc.w	r1, r1, #0
1a0042c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0042c4:	bf08      	it	eq
1a0042c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0042ca:	bd70      	pop	{r4, r5, r6, pc}
1a0042cc:	f1c4 0520 	rsb	r5, r4, #32
1a0042d0:	fa00 f205 	lsl.w	r2, r0, r5
1a0042d4:	ea4e 0e02 	orr.w	lr, lr, r2
1a0042d8:	fa20 f304 	lsr.w	r3, r0, r4
1a0042dc:	fa01 f205 	lsl.w	r2, r1, r5
1a0042e0:	ea43 0302 	orr.w	r3, r3, r2
1a0042e4:	fa21 f004 	lsr.w	r0, r1, r4
1a0042e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0042ec:	fa21 f204 	lsr.w	r2, r1, r4
1a0042f0:	ea20 0002 	bic.w	r0, r0, r2
1a0042f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0042f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0042fc:	bf08      	it	eq
1a0042fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a004302:	bd70      	pop	{r4, r5, r6, pc}
1a004304:	f094 0f00 	teq	r4, #0
1a004308:	d10f      	bne.n	1a00432a <__aeabi_dmul+0x1c2>
1a00430a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a00430e:	0040      	lsls	r0, r0, #1
1a004310:	eb41 0101 	adc.w	r1, r1, r1
1a004314:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a004318:	bf08      	it	eq
1a00431a:	3c01      	subeq	r4, #1
1a00431c:	d0f7      	beq.n	1a00430e <__aeabi_dmul+0x1a6>
1a00431e:	ea41 0106 	orr.w	r1, r1, r6
1a004322:	f095 0f00 	teq	r5, #0
1a004326:	bf18      	it	ne
1a004328:	4770      	bxne	lr
1a00432a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a00432e:	0052      	lsls	r2, r2, #1
1a004330:	eb43 0303 	adc.w	r3, r3, r3
1a004334:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a004338:	bf08      	it	eq
1a00433a:	3d01      	subeq	r5, #1
1a00433c:	d0f7      	beq.n	1a00432e <__aeabi_dmul+0x1c6>
1a00433e:	ea43 0306 	orr.w	r3, r3, r6
1a004342:	4770      	bx	lr
1a004344:	ea94 0f0c 	teq	r4, ip
1a004348:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00434c:	bf18      	it	ne
1a00434e:	ea95 0f0c 	teqne	r5, ip
1a004352:	d00c      	beq.n	1a00436e <__aeabi_dmul+0x206>
1a004354:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004358:	bf18      	it	ne
1a00435a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00435e:	d1d1      	bne.n	1a004304 <__aeabi_dmul+0x19c>
1a004360:	ea81 0103 	eor.w	r1, r1, r3
1a004364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a004368:	f04f 0000 	mov.w	r0, #0
1a00436c:	bd70      	pop	{r4, r5, r6, pc}
1a00436e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004372:	bf06      	itte	eq
1a004374:	4610      	moveq	r0, r2
1a004376:	4619      	moveq	r1, r3
1a004378:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00437c:	d019      	beq.n	1a0043b2 <__aeabi_dmul+0x24a>
1a00437e:	ea94 0f0c 	teq	r4, ip
1a004382:	d102      	bne.n	1a00438a <__aeabi_dmul+0x222>
1a004384:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a004388:	d113      	bne.n	1a0043b2 <__aeabi_dmul+0x24a>
1a00438a:	ea95 0f0c 	teq	r5, ip
1a00438e:	d105      	bne.n	1a00439c <__aeabi_dmul+0x234>
1a004390:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a004394:	bf1c      	itt	ne
1a004396:	4610      	movne	r0, r2
1a004398:	4619      	movne	r1, r3
1a00439a:	d10a      	bne.n	1a0043b2 <__aeabi_dmul+0x24a>
1a00439c:	ea81 0103 	eor.w	r1, r1, r3
1a0043a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a0043a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0043a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0043ac:	f04f 0000 	mov.w	r0, #0
1a0043b0:	bd70      	pop	{r4, r5, r6, pc}
1a0043b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a0043b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a0043ba:	bd70      	pop	{r4, r5, r6, pc}

1a0043bc <__aeabi_ddiv>:
1a0043bc:	b570      	push	{r4, r5, r6, lr}
1a0043be:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a0043c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a0043c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a0043ca:	bf1d      	ittte	ne
1a0043cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a0043d0:	ea94 0f0c 	teqne	r4, ip
1a0043d4:	ea95 0f0c 	teqne	r5, ip
1a0043d8:	f000 f8a7 	bleq	1a00452a <__aeabi_ddiv+0x16e>
1a0043dc:	eba4 0405 	sub.w	r4, r4, r5
1a0043e0:	ea81 0e03 	eor.w	lr, r1, r3
1a0043e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a0043e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0043ec:	f000 8088 	beq.w	1a004500 <__aeabi_ddiv+0x144>
1a0043f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0043f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0043f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0043fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a004400:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a004404:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a004408:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a00440c:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a004410:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a004414:	429d      	cmp	r5, r3
1a004416:	bf08      	it	eq
1a004418:	4296      	cmpeq	r6, r2
1a00441a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a00441e:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a004422:	d202      	bcs.n	1a00442a <__aeabi_ddiv+0x6e>
1a004424:	085b      	lsrs	r3, r3, #1
1a004426:	ea4f 0232 	mov.w	r2, r2, rrx
1a00442a:	1ab6      	subs	r6, r6, r2
1a00442c:	eb65 0503 	sbc.w	r5, r5, r3
1a004430:	085b      	lsrs	r3, r3, #1
1a004432:	ea4f 0232 	mov.w	r2, r2, rrx
1a004436:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a00443a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a00443e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004442:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004446:	bf22      	ittt	cs
1a004448:	1ab6      	subcs	r6, r6, r2
1a00444a:	4675      	movcs	r5, lr
1a00444c:	ea40 000c 	orrcs.w	r0, r0, ip
1a004450:	085b      	lsrs	r3, r3, #1
1a004452:	ea4f 0232 	mov.w	r2, r2, rrx
1a004456:	ebb6 0e02 	subs.w	lr, r6, r2
1a00445a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00445e:	bf22      	ittt	cs
1a004460:	1ab6      	subcs	r6, r6, r2
1a004462:	4675      	movcs	r5, lr
1a004464:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a004468:	085b      	lsrs	r3, r3, #1
1a00446a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00446e:	ebb6 0e02 	subs.w	lr, r6, r2
1a004472:	eb75 0e03 	sbcs.w	lr, r5, r3
1a004476:	bf22      	ittt	cs
1a004478:	1ab6      	subcs	r6, r6, r2
1a00447a:	4675      	movcs	r5, lr
1a00447c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a004480:	085b      	lsrs	r3, r3, #1
1a004482:	ea4f 0232 	mov.w	r2, r2, rrx
1a004486:	ebb6 0e02 	subs.w	lr, r6, r2
1a00448a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00448e:	bf22      	ittt	cs
1a004490:	1ab6      	subcs	r6, r6, r2
1a004492:	4675      	movcs	r5, lr
1a004494:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a004498:	ea55 0e06 	orrs.w	lr, r5, r6
1a00449c:	d018      	beq.n	1a0044d0 <__aeabi_ddiv+0x114>
1a00449e:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a0044a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a0044a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a0044aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a0044ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a0044b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a0044b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a0044ba:	d1c0      	bne.n	1a00443e <__aeabi_ddiv+0x82>
1a0044bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0044c0:	d10b      	bne.n	1a0044da <__aeabi_ddiv+0x11e>
1a0044c2:	ea41 0100 	orr.w	r1, r1, r0
1a0044c6:	f04f 0000 	mov.w	r0, #0
1a0044ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a0044ce:	e7b6      	b.n	1a00443e <__aeabi_ddiv+0x82>
1a0044d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0044d4:	bf04      	itt	eq
1a0044d6:	4301      	orreq	r1, r0
1a0044d8:	2000      	moveq	r0, #0
1a0044da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0044de:	bf88      	it	hi
1a0044e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0044e4:	f63f aeaf 	bhi.w	1a004246 <__aeabi_dmul+0xde>
1a0044e8:	ebb5 0c03 	subs.w	ip, r5, r3
1a0044ec:	bf04      	itt	eq
1a0044ee:	ebb6 0c02 	subseq.w	ip, r6, r2
1a0044f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0044f6:	f150 0000 	adcs.w	r0, r0, #0
1a0044fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0044fe:	bd70      	pop	{r4, r5, r6, pc}
1a004500:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a004504:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a004508:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a00450c:	bfc2      	ittt	gt
1a00450e:	ebd4 050c 	rsbsgt	r5, r4, ip
1a004512:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a004516:	bd70      	popgt	{r4, r5, r6, pc}
1a004518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00451c:	f04f 0e00 	mov.w	lr, #0
1a004520:	3c01      	subs	r4, #1
1a004522:	e690      	b.n	1a004246 <__aeabi_dmul+0xde>
1a004524:	ea45 0e06 	orr.w	lr, r5, r6
1a004528:	e68d      	b.n	1a004246 <__aeabi_dmul+0xde>
1a00452a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a00452e:	ea94 0f0c 	teq	r4, ip
1a004532:	bf08      	it	eq
1a004534:	ea95 0f0c 	teqeq	r5, ip
1a004538:	f43f af3b 	beq.w	1a0043b2 <__aeabi_dmul+0x24a>
1a00453c:	ea94 0f0c 	teq	r4, ip
1a004540:	d10a      	bne.n	1a004558 <__aeabi_ddiv+0x19c>
1a004542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a004546:	f47f af34 	bne.w	1a0043b2 <__aeabi_dmul+0x24a>
1a00454a:	ea95 0f0c 	teq	r5, ip
1a00454e:	f47f af25 	bne.w	1a00439c <__aeabi_dmul+0x234>
1a004552:	4610      	mov	r0, r2
1a004554:	4619      	mov	r1, r3
1a004556:	e72c      	b.n	1a0043b2 <__aeabi_dmul+0x24a>
1a004558:	ea95 0f0c 	teq	r5, ip
1a00455c:	d106      	bne.n	1a00456c <__aeabi_ddiv+0x1b0>
1a00455e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a004562:	f43f aefd 	beq.w	1a004360 <__aeabi_dmul+0x1f8>
1a004566:	4610      	mov	r0, r2
1a004568:	4619      	mov	r1, r3
1a00456a:	e722      	b.n	1a0043b2 <__aeabi_dmul+0x24a>
1a00456c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a004570:	bf18      	it	ne
1a004572:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a004576:	f47f aec5 	bne.w	1a004304 <__aeabi_dmul+0x19c>
1a00457a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00457e:	f47f af0d 	bne.w	1a00439c <__aeabi_dmul+0x234>
1a004582:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a004586:	f47f aeeb 	bne.w	1a004360 <__aeabi_dmul+0x1f8>
1a00458a:	e712      	b.n	1a0043b2 <__aeabi_dmul+0x24a>

1a00458c <__aeabi_d2f>:
1a00458c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a004590:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a004594:	bf24      	itt	cs
1a004596:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a00459a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a00459e:	d90d      	bls.n	1a0045bc <__aeabi_d2f+0x30>
1a0045a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0045a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0045a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0045ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0045b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0045b4:	bf08      	it	eq
1a0045b6:	f020 0001 	biceq.w	r0, r0, #1
1a0045ba:	4770      	bx	lr
1a0045bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0045c0:	d121      	bne.n	1a004606 <__aeabi_d2f+0x7a>
1a0045c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0045c6:	bfbc      	itt	lt
1a0045c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a0045cc:	4770      	bxlt	lr
1a0045ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0045d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a0045d6:	f1c2 0218 	rsb	r2, r2, #24
1a0045da:	f1c2 0c20 	rsb	ip, r2, #32
1a0045de:	fa10 f30c 	lsls.w	r3, r0, ip
1a0045e2:	fa20 f002 	lsr.w	r0, r0, r2
1a0045e6:	bf18      	it	ne
1a0045e8:	f040 0001 	orrne.w	r0, r0, #1
1a0045ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a0045f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a0045f4:	fa03 fc0c 	lsl.w	ip, r3, ip
1a0045f8:	ea40 000c 	orr.w	r0, r0, ip
1a0045fc:	fa23 f302 	lsr.w	r3, r3, r2
1a004600:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a004604:	e7cc      	b.n	1a0045a0 <__aeabi_d2f+0x14>
1a004606:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a00460a:	d107      	bne.n	1a00461c <__aeabi_d2f+0x90>
1a00460c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a004610:	bf1e      	ittt	ne
1a004612:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a004616:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a00461a:	4770      	bxne	lr
1a00461c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a004620:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a004624:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a004628:	4770      	bx	lr
1a00462a:	bf00      	nop

1a00462c <__aeabi_uldivmod>:
1a00462c:	b953      	cbnz	r3, 1a004644 <__aeabi_uldivmod+0x18>
1a00462e:	b94a      	cbnz	r2, 1a004644 <__aeabi_uldivmod+0x18>
1a004630:	2900      	cmp	r1, #0
1a004632:	bf08      	it	eq
1a004634:	2800      	cmpeq	r0, #0
1a004636:	bf1c      	itt	ne
1a004638:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a00463c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a004640:	f000 b972 	b.w	1a004928 <__aeabi_idiv0>
1a004644:	f1ad 0c08 	sub.w	ip, sp, #8
1a004648:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a00464c:	f000 f806 	bl	1a00465c <__udivmoddi4>
1a004650:	f8dd e004 	ldr.w	lr, [sp, #4]
1a004654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a004658:	b004      	add	sp, #16
1a00465a:	4770      	bx	lr

1a00465c <__udivmoddi4>:
1a00465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a004660:	9e08      	ldr	r6, [sp, #32]
1a004662:	4604      	mov	r4, r0
1a004664:	4688      	mov	r8, r1
1a004666:	2b00      	cmp	r3, #0
1a004668:	d14b      	bne.n	1a004702 <__udivmoddi4+0xa6>
1a00466a:	428a      	cmp	r2, r1
1a00466c:	4615      	mov	r5, r2
1a00466e:	d967      	bls.n	1a004740 <__udivmoddi4+0xe4>
1a004670:	fab2 f282 	clz	r2, r2
1a004674:	b14a      	cbz	r2, 1a00468a <__udivmoddi4+0x2e>
1a004676:	f1c2 0720 	rsb	r7, r2, #32
1a00467a:	fa01 f302 	lsl.w	r3, r1, r2
1a00467e:	fa20 f707 	lsr.w	r7, r0, r7
1a004682:	4095      	lsls	r5, r2
1a004684:	ea47 0803 	orr.w	r8, r7, r3
1a004688:	4094      	lsls	r4, r2
1a00468a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00468e:	0c23      	lsrs	r3, r4, #16
1a004690:	fbb8 f7fe 	udiv	r7, r8, lr
1a004694:	fa1f fc85 	uxth.w	ip, r5
1a004698:	fb0e 8817 	mls	r8, lr, r7, r8
1a00469c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0046a0:	fb07 f10c 	mul.w	r1, r7, ip
1a0046a4:	4299      	cmp	r1, r3
1a0046a6:	d909      	bls.n	1a0046bc <__udivmoddi4+0x60>
1a0046a8:	18eb      	adds	r3, r5, r3
1a0046aa:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0046ae:	f080 811b 	bcs.w	1a0048e8 <__udivmoddi4+0x28c>
1a0046b2:	4299      	cmp	r1, r3
1a0046b4:	f240 8118 	bls.w	1a0048e8 <__udivmoddi4+0x28c>
1a0046b8:	3f02      	subs	r7, #2
1a0046ba:	442b      	add	r3, r5
1a0046bc:	1a5b      	subs	r3, r3, r1
1a0046be:	b2a4      	uxth	r4, r4
1a0046c0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0046c4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0046c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0046cc:	fb00 fc0c 	mul.w	ip, r0, ip
1a0046d0:	45a4      	cmp	ip, r4
1a0046d2:	d909      	bls.n	1a0046e8 <__udivmoddi4+0x8c>
1a0046d4:	192c      	adds	r4, r5, r4
1a0046d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0046da:	f080 8107 	bcs.w	1a0048ec <__udivmoddi4+0x290>
1a0046de:	45a4      	cmp	ip, r4
1a0046e0:	f240 8104 	bls.w	1a0048ec <__udivmoddi4+0x290>
1a0046e4:	3802      	subs	r0, #2
1a0046e6:	442c      	add	r4, r5
1a0046e8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0046ec:	eba4 040c 	sub.w	r4, r4, ip
1a0046f0:	2700      	movs	r7, #0
1a0046f2:	b11e      	cbz	r6, 1a0046fc <__udivmoddi4+0xa0>
1a0046f4:	40d4      	lsrs	r4, r2
1a0046f6:	2300      	movs	r3, #0
1a0046f8:	e9c6 4300 	strd	r4, r3, [r6]
1a0046fc:	4639      	mov	r1, r7
1a0046fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004702:	428b      	cmp	r3, r1
1a004704:	d909      	bls.n	1a00471a <__udivmoddi4+0xbe>
1a004706:	2e00      	cmp	r6, #0
1a004708:	f000 80eb 	beq.w	1a0048e2 <__udivmoddi4+0x286>
1a00470c:	2700      	movs	r7, #0
1a00470e:	e9c6 0100 	strd	r0, r1, [r6]
1a004712:	4638      	mov	r0, r7
1a004714:	4639      	mov	r1, r7
1a004716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00471a:	fab3 f783 	clz	r7, r3
1a00471e:	2f00      	cmp	r7, #0
1a004720:	d147      	bne.n	1a0047b2 <__udivmoddi4+0x156>
1a004722:	428b      	cmp	r3, r1
1a004724:	d302      	bcc.n	1a00472c <__udivmoddi4+0xd0>
1a004726:	4282      	cmp	r2, r0
1a004728:	f200 80fa 	bhi.w	1a004920 <__udivmoddi4+0x2c4>
1a00472c:	1a84      	subs	r4, r0, r2
1a00472e:	eb61 0303 	sbc.w	r3, r1, r3
1a004732:	2001      	movs	r0, #1
1a004734:	4698      	mov	r8, r3
1a004736:	2e00      	cmp	r6, #0
1a004738:	d0e0      	beq.n	1a0046fc <__udivmoddi4+0xa0>
1a00473a:	e9c6 4800 	strd	r4, r8, [r6]
1a00473e:	e7dd      	b.n	1a0046fc <__udivmoddi4+0xa0>
1a004740:	b902      	cbnz	r2, 1a004744 <__udivmoddi4+0xe8>
1a004742:	deff      	udf	#255	; 0xff
1a004744:	fab2 f282 	clz	r2, r2
1a004748:	2a00      	cmp	r2, #0
1a00474a:	f040 808f 	bne.w	1a00486c <__udivmoddi4+0x210>
1a00474e:	1b49      	subs	r1, r1, r5
1a004750:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004754:	fa1f f885 	uxth.w	r8, r5
1a004758:	2701      	movs	r7, #1
1a00475a:	fbb1 fcfe 	udiv	ip, r1, lr
1a00475e:	0c23      	lsrs	r3, r4, #16
1a004760:	fb0e 111c 	mls	r1, lr, ip, r1
1a004764:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a004768:	fb08 f10c 	mul.w	r1, r8, ip
1a00476c:	4299      	cmp	r1, r3
1a00476e:	d907      	bls.n	1a004780 <__udivmoddi4+0x124>
1a004770:	18eb      	adds	r3, r5, r3
1a004772:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a004776:	d202      	bcs.n	1a00477e <__udivmoddi4+0x122>
1a004778:	4299      	cmp	r1, r3
1a00477a:	f200 80cd 	bhi.w	1a004918 <__udivmoddi4+0x2bc>
1a00477e:	4684      	mov	ip, r0
1a004780:	1a59      	subs	r1, r3, r1
1a004782:	b2a3      	uxth	r3, r4
1a004784:	fbb1 f0fe 	udiv	r0, r1, lr
1a004788:	fb0e 1410 	mls	r4, lr, r0, r1
1a00478c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a004790:	fb08 f800 	mul.w	r8, r8, r0
1a004794:	45a0      	cmp	r8, r4
1a004796:	d907      	bls.n	1a0047a8 <__udivmoddi4+0x14c>
1a004798:	192c      	adds	r4, r5, r4
1a00479a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00479e:	d202      	bcs.n	1a0047a6 <__udivmoddi4+0x14a>
1a0047a0:	45a0      	cmp	r8, r4
1a0047a2:	f200 80b6 	bhi.w	1a004912 <__udivmoddi4+0x2b6>
1a0047a6:	4618      	mov	r0, r3
1a0047a8:	eba4 0408 	sub.w	r4, r4, r8
1a0047ac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0047b0:	e79f      	b.n	1a0046f2 <__udivmoddi4+0x96>
1a0047b2:	f1c7 0c20 	rsb	ip, r7, #32
1a0047b6:	40bb      	lsls	r3, r7
1a0047b8:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0047bc:	ea4e 0e03 	orr.w	lr, lr, r3
1a0047c0:	fa01 f407 	lsl.w	r4, r1, r7
1a0047c4:	fa20 f50c 	lsr.w	r5, r0, ip
1a0047c8:	fa21 f30c 	lsr.w	r3, r1, ip
1a0047cc:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0047d0:	4325      	orrs	r5, r4
1a0047d2:	fbb3 f9f8 	udiv	r9, r3, r8
1a0047d6:	0c2c      	lsrs	r4, r5, #16
1a0047d8:	fb08 3319 	mls	r3, r8, r9, r3
1a0047dc:	fa1f fa8e 	uxth.w	sl, lr
1a0047e0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0047e4:	fb09 f40a 	mul.w	r4, r9, sl
1a0047e8:	429c      	cmp	r4, r3
1a0047ea:	fa02 f207 	lsl.w	r2, r2, r7
1a0047ee:	fa00 f107 	lsl.w	r1, r0, r7
1a0047f2:	d90b      	bls.n	1a00480c <__udivmoddi4+0x1b0>
1a0047f4:	eb1e 0303 	adds.w	r3, lr, r3
1a0047f8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0047fc:	f080 8087 	bcs.w	1a00490e <__udivmoddi4+0x2b2>
1a004800:	429c      	cmp	r4, r3
1a004802:	f240 8084 	bls.w	1a00490e <__udivmoddi4+0x2b2>
1a004806:	f1a9 0902 	sub.w	r9, r9, #2
1a00480a:	4473      	add	r3, lr
1a00480c:	1b1b      	subs	r3, r3, r4
1a00480e:	b2ad      	uxth	r5, r5
1a004810:	fbb3 f0f8 	udiv	r0, r3, r8
1a004814:	fb08 3310 	mls	r3, r8, r0, r3
1a004818:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a00481c:	fb00 fa0a 	mul.w	sl, r0, sl
1a004820:	45a2      	cmp	sl, r4
1a004822:	d908      	bls.n	1a004836 <__udivmoddi4+0x1da>
1a004824:	eb1e 0404 	adds.w	r4, lr, r4
1a004828:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00482c:	d26b      	bcs.n	1a004906 <__udivmoddi4+0x2aa>
1a00482e:	45a2      	cmp	sl, r4
1a004830:	d969      	bls.n	1a004906 <__udivmoddi4+0x2aa>
1a004832:	3802      	subs	r0, #2
1a004834:	4474      	add	r4, lr
1a004836:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00483a:	fba0 8902 	umull	r8, r9, r0, r2
1a00483e:	eba4 040a 	sub.w	r4, r4, sl
1a004842:	454c      	cmp	r4, r9
1a004844:	46c2      	mov	sl, r8
1a004846:	464b      	mov	r3, r9
1a004848:	d354      	bcc.n	1a0048f4 <__udivmoddi4+0x298>
1a00484a:	d051      	beq.n	1a0048f0 <__udivmoddi4+0x294>
1a00484c:	2e00      	cmp	r6, #0
1a00484e:	d069      	beq.n	1a004924 <__udivmoddi4+0x2c8>
1a004850:	ebb1 050a 	subs.w	r5, r1, sl
1a004854:	eb64 0403 	sbc.w	r4, r4, r3
1a004858:	fa04 fc0c 	lsl.w	ip, r4, ip
1a00485c:	40fd      	lsrs	r5, r7
1a00485e:	40fc      	lsrs	r4, r7
1a004860:	ea4c 0505 	orr.w	r5, ip, r5
1a004864:	e9c6 5400 	strd	r5, r4, [r6]
1a004868:	2700      	movs	r7, #0
1a00486a:	e747      	b.n	1a0046fc <__udivmoddi4+0xa0>
1a00486c:	f1c2 0320 	rsb	r3, r2, #32
1a004870:	fa20 f703 	lsr.w	r7, r0, r3
1a004874:	4095      	lsls	r5, r2
1a004876:	fa01 f002 	lsl.w	r0, r1, r2
1a00487a:	fa21 f303 	lsr.w	r3, r1, r3
1a00487e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a004882:	4338      	orrs	r0, r7
1a004884:	0c01      	lsrs	r1, r0, #16
1a004886:	fbb3 f7fe 	udiv	r7, r3, lr
1a00488a:	fa1f f885 	uxth.w	r8, r5
1a00488e:	fb0e 3317 	mls	r3, lr, r7, r3
1a004892:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004896:	fb07 f308 	mul.w	r3, r7, r8
1a00489a:	428b      	cmp	r3, r1
1a00489c:	fa04 f402 	lsl.w	r4, r4, r2
1a0048a0:	d907      	bls.n	1a0048b2 <__udivmoddi4+0x256>
1a0048a2:	1869      	adds	r1, r5, r1
1a0048a4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0048a8:	d22f      	bcs.n	1a00490a <__udivmoddi4+0x2ae>
1a0048aa:	428b      	cmp	r3, r1
1a0048ac:	d92d      	bls.n	1a00490a <__udivmoddi4+0x2ae>
1a0048ae:	3f02      	subs	r7, #2
1a0048b0:	4429      	add	r1, r5
1a0048b2:	1acb      	subs	r3, r1, r3
1a0048b4:	b281      	uxth	r1, r0
1a0048b6:	fbb3 f0fe 	udiv	r0, r3, lr
1a0048ba:	fb0e 3310 	mls	r3, lr, r0, r3
1a0048be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0048c2:	fb00 f308 	mul.w	r3, r0, r8
1a0048c6:	428b      	cmp	r3, r1
1a0048c8:	d907      	bls.n	1a0048da <__udivmoddi4+0x27e>
1a0048ca:	1869      	adds	r1, r5, r1
1a0048cc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0048d0:	d217      	bcs.n	1a004902 <__udivmoddi4+0x2a6>
1a0048d2:	428b      	cmp	r3, r1
1a0048d4:	d915      	bls.n	1a004902 <__udivmoddi4+0x2a6>
1a0048d6:	3802      	subs	r0, #2
1a0048d8:	4429      	add	r1, r5
1a0048da:	1ac9      	subs	r1, r1, r3
1a0048dc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0048e0:	e73b      	b.n	1a00475a <__udivmoddi4+0xfe>
1a0048e2:	4637      	mov	r7, r6
1a0048e4:	4630      	mov	r0, r6
1a0048e6:	e709      	b.n	1a0046fc <__udivmoddi4+0xa0>
1a0048e8:	4607      	mov	r7, r0
1a0048ea:	e6e7      	b.n	1a0046bc <__udivmoddi4+0x60>
1a0048ec:	4618      	mov	r0, r3
1a0048ee:	e6fb      	b.n	1a0046e8 <__udivmoddi4+0x8c>
1a0048f0:	4541      	cmp	r1, r8
1a0048f2:	d2ab      	bcs.n	1a00484c <__udivmoddi4+0x1f0>
1a0048f4:	ebb8 0a02 	subs.w	sl, r8, r2
1a0048f8:	eb69 020e 	sbc.w	r2, r9, lr
1a0048fc:	3801      	subs	r0, #1
1a0048fe:	4613      	mov	r3, r2
1a004900:	e7a4      	b.n	1a00484c <__udivmoddi4+0x1f0>
1a004902:	4660      	mov	r0, ip
1a004904:	e7e9      	b.n	1a0048da <__udivmoddi4+0x27e>
1a004906:	4618      	mov	r0, r3
1a004908:	e795      	b.n	1a004836 <__udivmoddi4+0x1da>
1a00490a:	4667      	mov	r7, ip
1a00490c:	e7d1      	b.n	1a0048b2 <__udivmoddi4+0x256>
1a00490e:	4681      	mov	r9, r0
1a004910:	e77c      	b.n	1a00480c <__udivmoddi4+0x1b0>
1a004912:	3802      	subs	r0, #2
1a004914:	442c      	add	r4, r5
1a004916:	e747      	b.n	1a0047a8 <__udivmoddi4+0x14c>
1a004918:	f1ac 0c02 	sub.w	ip, ip, #2
1a00491c:	442b      	add	r3, r5
1a00491e:	e72f      	b.n	1a004780 <__udivmoddi4+0x124>
1a004920:	4638      	mov	r0, r7
1a004922:	e708      	b.n	1a004736 <__udivmoddi4+0xda>
1a004924:	4637      	mov	r7, r6
1a004926:	e6e9      	b.n	1a0046fc <__udivmoddi4+0xa0>

1a004928 <__aeabi_idiv0>:
1a004928:	4770      	bx	lr
1a00492a:	bf00      	nop

1a00492c <__sflush_r>:
1a00492c:	898a      	ldrh	r2, [r1, #12]
1a00492e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004932:	4605      	mov	r5, r0
1a004934:	0710      	lsls	r0, r2, #28
1a004936:	460c      	mov	r4, r1
1a004938:	d458      	bmi.n	1a0049ec <__sflush_r+0xc0>
1a00493a:	684b      	ldr	r3, [r1, #4]
1a00493c:	2b00      	cmp	r3, #0
1a00493e:	dc05      	bgt.n	1a00494c <__sflush_r+0x20>
1a004940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a004942:	2b00      	cmp	r3, #0
1a004944:	dc02      	bgt.n	1a00494c <__sflush_r+0x20>
1a004946:	2000      	movs	r0, #0
1a004948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00494c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00494e:	2e00      	cmp	r6, #0
1a004950:	d0f9      	beq.n	1a004946 <__sflush_r+0x1a>
1a004952:	2300      	movs	r3, #0
1a004954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a004958:	682f      	ldr	r7, [r5, #0]
1a00495a:	6a21      	ldr	r1, [r4, #32]
1a00495c:	602b      	str	r3, [r5, #0]
1a00495e:	d032      	beq.n	1a0049c6 <__sflush_r+0x9a>
1a004960:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a004962:	89a3      	ldrh	r3, [r4, #12]
1a004964:	075a      	lsls	r2, r3, #29
1a004966:	d505      	bpl.n	1a004974 <__sflush_r+0x48>
1a004968:	6863      	ldr	r3, [r4, #4]
1a00496a:	1ac0      	subs	r0, r0, r3
1a00496c:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a00496e:	b10b      	cbz	r3, 1a004974 <__sflush_r+0x48>
1a004970:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a004972:	1ac0      	subs	r0, r0, r3
1a004974:	2300      	movs	r3, #0
1a004976:	4602      	mov	r2, r0
1a004978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00497a:	6a21      	ldr	r1, [r4, #32]
1a00497c:	4628      	mov	r0, r5
1a00497e:	47b0      	blx	r6
1a004980:	1c43      	adds	r3, r0, #1
1a004982:	89a3      	ldrh	r3, [r4, #12]
1a004984:	d106      	bne.n	1a004994 <__sflush_r+0x68>
1a004986:	6829      	ldr	r1, [r5, #0]
1a004988:	291d      	cmp	r1, #29
1a00498a:	d848      	bhi.n	1a004a1e <__sflush_r+0xf2>
1a00498c:	4a29      	ldr	r2, [pc, #164]	; (1a004a34 <__sflush_r+0x108>)
1a00498e:	40ca      	lsrs	r2, r1
1a004990:	07d6      	lsls	r6, r2, #31
1a004992:	d544      	bpl.n	1a004a1e <__sflush_r+0xf2>
1a004994:	2200      	movs	r2, #0
1a004996:	6062      	str	r2, [r4, #4]
1a004998:	04d9      	lsls	r1, r3, #19
1a00499a:	6922      	ldr	r2, [r4, #16]
1a00499c:	6022      	str	r2, [r4, #0]
1a00499e:	d504      	bpl.n	1a0049aa <__sflush_r+0x7e>
1a0049a0:	1c42      	adds	r2, r0, #1
1a0049a2:	d101      	bne.n	1a0049a8 <__sflush_r+0x7c>
1a0049a4:	682b      	ldr	r3, [r5, #0]
1a0049a6:	b903      	cbnz	r3, 1a0049aa <__sflush_r+0x7e>
1a0049a8:	6560      	str	r0, [r4, #84]	; 0x54
1a0049aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0049ac:	602f      	str	r7, [r5, #0]
1a0049ae:	2900      	cmp	r1, #0
1a0049b0:	d0c9      	beq.n	1a004946 <__sflush_r+0x1a>
1a0049b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0049b6:	4299      	cmp	r1, r3
1a0049b8:	d002      	beq.n	1a0049c0 <__sflush_r+0x94>
1a0049ba:	4628      	mov	r0, r5
1a0049bc:	f000 f97a 	bl	1a004cb4 <_free_r>
1a0049c0:	2000      	movs	r0, #0
1a0049c2:	6360      	str	r0, [r4, #52]	; 0x34
1a0049c4:	e7c0      	b.n	1a004948 <__sflush_r+0x1c>
1a0049c6:	2301      	movs	r3, #1
1a0049c8:	4628      	mov	r0, r5
1a0049ca:	47b0      	blx	r6
1a0049cc:	1c41      	adds	r1, r0, #1
1a0049ce:	d1c8      	bne.n	1a004962 <__sflush_r+0x36>
1a0049d0:	682b      	ldr	r3, [r5, #0]
1a0049d2:	2b00      	cmp	r3, #0
1a0049d4:	d0c5      	beq.n	1a004962 <__sflush_r+0x36>
1a0049d6:	2b1d      	cmp	r3, #29
1a0049d8:	d001      	beq.n	1a0049de <__sflush_r+0xb2>
1a0049da:	2b16      	cmp	r3, #22
1a0049dc:	d101      	bne.n	1a0049e2 <__sflush_r+0xb6>
1a0049de:	602f      	str	r7, [r5, #0]
1a0049e0:	e7b1      	b.n	1a004946 <__sflush_r+0x1a>
1a0049e2:	89a3      	ldrh	r3, [r4, #12]
1a0049e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0049e8:	81a3      	strh	r3, [r4, #12]
1a0049ea:	e7ad      	b.n	1a004948 <__sflush_r+0x1c>
1a0049ec:	690f      	ldr	r7, [r1, #16]
1a0049ee:	2f00      	cmp	r7, #0
1a0049f0:	d0a9      	beq.n	1a004946 <__sflush_r+0x1a>
1a0049f2:	0793      	lsls	r3, r2, #30
1a0049f4:	680e      	ldr	r6, [r1, #0]
1a0049f6:	bf08      	it	eq
1a0049f8:	694b      	ldreq	r3, [r1, #20]
1a0049fa:	600f      	str	r7, [r1, #0]
1a0049fc:	bf18      	it	ne
1a0049fe:	2300      	movne	r3, #0
1a004a00:	eba6 0807 	sub.w	r8, r6, r7
1a004a04:	608b      	str	r3, [r1, #8]
1a004a06:	f1b8 0f00 	cmp.w	r8, #0
1a004a0a:	dd9c      	ble.n	1a004946 <__sflush_r+0x1a>
1a004a0c:	4643      	mov	r3, r8
1a004a0e:	463a      	mov	r2, r7
1a004a10:	6a21      	ldr	r1, [r4, #32]
1a004a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a004a14:	4628      	mov	r0, r5
1a004a16:	47b0      	blx	r6
1a004a18:	2800      	cmp	r0, #0
1a004a1a:	dc06      	bgt.n	1a004a2a <__sflush_r+0xfe>
1a004a1c:	89a3      	ldrh	r3, [r4, #12]
1a004a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004a22:	81a3      	strh	r3, [r4, #12]
1a004a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a28:	e78e      	b.n	1a004948 <__sflush_r+0x1c>
1a004a2a:	4407      	add	r7, r0
1a004a2c:	eba8 0800 	sub.w	r8, r8, r0
1a004a30:	e7e9      	b.n	1a004a06 <__sflush_r+0xda>
1a004a32:	bf00      	nop
1a004a34:	20400001 	.word	0x20400001

1a004a38 <_fflush_r>:
1a004a38:	b538      	push	{r3, r4, r5, lr}
1a004a3a:	690b      	ldr	r3, [r1, #16]
1a004a3c:	4605      	mov	r5, r0
1a004a3e:	460c      	mov	r4, r1
1a004a40:	b1db      	cbz	r3, 1a004a7a <_fflush_r+0x42>
1a004a42:	b118      	cbz	r0, 1a004a4c <_fflush_r+0x14>
1a004a44:	6983      	ldr	r3, [r0, #24]
1a004a46:	b90b      	cbnz	r3, 1a004a4c <_fflush_r+0x14>
1a004a48:	f000 f872 	bl	1a004b30 <__sinit>
1a004a4c:	4b0c      	ldr	r3, [pc, #48]	; (1a004a80 <_fflush_r+0x48>)
1a004a4e:	429c      	cmp	r4, r3
1a004a50:	d109      	bne.n	1a004a66 <_fflush_r+0x2e>
1a004a52:	686c      	ldr	r4, [r5, #4]
1a004a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004a58:	b17b      	cbz	r3, 1a004a7a <_fflush_r+0x42>
1a004a5a:	4621      	mov	r1, r4
1a004a5c:	4628      	mov	r0, r5
1a004a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004a62:	f7ff bf63 	b.w	1a00492c <__sflush_r>
1a004a66:	4b07      	ldr	r3, [pc, #28]	; (1a004a84 <_fflush_r+0x4c>)
1a004a68:	429c      	cmp	r4, r3
1a004a6a:	d101      	bne.n	1a004a70 <_fflush_r+0x38>
1a004a6c:	68ac      	ldr	r4, [r5, #8]
1a004a6e:	e7f1      	b.n	1a004a54 <_fflush_r+0x1c>
1a004a70:	4b05      	ldr	r3, [pc, #20]	; (1a004a88 <_fflush_r+0x50>)
1a004a72:	429c      	cmp	r4, r3
1a004a74:	bf08      	it	eq
1a004a76:	68ec      	ldreq	r4, [r5, #12]
1a004a78:	e7ec      	b.n	1a004a54 <_fflush_r+0x1c>
1a004a7a:	2000      	movs	r0, #0
1a004a7c:	bd38      	pop	{r3, r4, r5, pc}
1a004a7e:	bf00      	nop
1a004a80:	1a005d58 	.word	0x1a005d58
1a004a84:	1a005d78 	.word	0x1a005d78
1a004a88:	1a005d38 	.word	0x1a005d38

1a004a8c <fflush>:
1a004a8c:	4601      	mov	r1, r0
1a004a8e:	b920      	cbnz	r0, 1a004a9a <fflush+0xe>
1a004a90:	4b04      	ldr	r3, [pc, #16]	; (1a004aa4 <fflush+0x18>)
1a004a92:	4905      	ldr	r1, [pc, #20]	; (1a004aa8 <fflush+0x1c>)
1a004a94:	6818      	ldr	r0, [r3, #0]
1a004a96:	f000 b8b7 	b.w	1a004c08 <_fwalk_reent>
1a004a9a:	4b04      	ldr	r3, [pc, #16]	; (1a004aac <fflush+0x20>)
1a004a9c:	6818      	ldr	r0, [r3, #0]
1a004a9e:	f7ff bfcb 	b.w	1a004a38 <_fflush_r>
1a004aa2:	bf00      	nop
1a004aa4:	1a005d98 	.word	0x1a005d98
1a004aa8:	1a004a39 	.word	0x1a004a39
1a004aac:	1000008c 	.word	0x1000008c

1a004ab0 <std>:
1a004ab0:	2300      	movs	r3, #0
1a004ab2:	b510      	push	{r4, lr}
1a004ab4:	4604      	mov	r4, r0
1a004ab6:	e9c0 3300 	strd	r3, r3, [r0]
1a004aba:	6083      	str	r3, [r0, #8]
1a004abc:	8181      	strh	r1, [r0, #12]
1a004abe:	6643      	str	r3, [r0, #100]	; 0x64
1a004ac0:	81c2      	strh	r2, [r0, #14]
1a004ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a004ac6:	6183      	str	r3, [r0, #24]
1a004ac8:	4619      	mov	r1, r3
1a004aca:	2208      	movs	r2, #8
1a004acc:	305c      	adds	r0, #92	; 0x5c
1a004ace:	f000 f8e8 	bl	1a004ca2 <memset>
1a004ad2:	4b05      	ldr	r3, [pc, #20]	; (1a004ae8 <std+0x38>)
1a004ad4:	6263      	str	r3, [r4, #36]	; 0x24
1a004ad6:	4b05      	ldr	r3, [pc, #20]	; (1a004aec <std+0x3c>)
1a004ad8:	62a3      	str	r3, [r4, #40]	; 0x28
1a004ada:	4b05      	ldr	r3, [pc, #20]	; (1a004af0 <std+0x40>)
1a004adc:	62e3      	str	r3, [r4, #44]	; 0x2c
1a004ade:	4b05      	ldr	r3, [pc, #20]	; (1a004af4 <std+0x44>)
1a004ae0:	6224      	str	r4, [r4, #32]
1a004ae2:	6323      	str	r3, [r4, #48]	; 0x30
1a004ae4:	bd10      	pop	{r4, pc}
1a004ae6:	bf00      	nop
1a004ae8:	1a004f25 	.word	0x1a004f25
1a004aec:	1a004f47 	.word	0x1a004f47
1a004af0:	1a004f7f 	.word	0x1a004f7f
1a004af4:	1a004fa3 	.word	0x1a004fa3

1a004af8 <_cleanup_r>:
1a004af8:	4901      	ldr	r1, [pc, #4]	; (1a004b00 <_cleanup_r+0x8>)
1a004afa:	f000 b885 	b.w	1a004c08 <_fwalk_reent>
1a004afe:	bf00      	nop
1a004b00:	1a004a39 	.word	0x1a004a39

1a004b04 <__sfmoreglue>:
1a004b04:	b570      	push	{r4, r5, r6, lr}
1a004b06:	1e4a      	subs	r2, r1, #1
1a004b08:	2568      	movs	r5, #104	; 0x68
1a004b0a:	4355      	muls	r5, r2
1a004b0c:	460e      	mov	r6, r1
1a004b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a004b12:	f000 f91d 	bl	1a004d50 <_malloc_r>
1a004b16:	4604      	mov	r4, r0
1a004b18:	b140      	cbz	r0, 1a004b2c <__sfmoreglue+0x28>
1a004b1a:	2100      	movs	r1, #0
1a004b1c:	e9c0 1600 	strd	r1, r6, [r0]
1a004b20:	300c      	adds	r0, #12
1a004b22:	60a0      	str	r0, [r4, #8]
1a004b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a004b28:	f000 f8bb 	bl	1a004ca2 <memset>
1a004b2c:	4620      	mov	r0, r4
1a004b2e:	bd70      	pop	{r4, r5, r6, pc}

1a004b30 <__sinit>:
1a004b30:	6983      	ldr	r3, [r0, #24]
1a004b32:	b510      	push	{r4, lr}
1a004b34:	4604      	mov	r4, r0
1a004b36:	bb33      	cbnz	r3, 1a004b86 <__sinit+0x56>
1a004b38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a004b3c:	6503      	str	r3, [r0, #80]	; 0x50
1a004b3e:	4b12      	ldr	r3, [pc, #72]	; (1a004b88 <__sinit+0x58>)
1a004b40:	4a12      	ldr	r2, [pc, #72]	; (1a004b8c <__sinit+0x5c>)
1a004b42:	681b      	ldr	r3, [r3, #0]
1a004b44:	6282      	str	r2, [r0, #40]	; 0x28
1a004b46:	4298      	cmp	r0, r3
1a004b48:	bf04      	itt	eq
1a004b4a:	2301      	moveq	r3, #1
1a004b4c:	6183      	streq	r3, [r0, #24]
1a004b4e:	f000 f81f 	bl	1a004b90 <__sfp>
1a004b52:	6060      	str	r0, [r4, #4]
1a004b54:	4620      	mov	r0, r4
1a004b56:	f000 f81b 	bl	1a004b90 <__sfp>
1a004b5a:	60a0      	str	r0, [r4, #8]
1a004b5c:	4620      	mov	r0, r4
1a004b5e:	f000 f817 	bl	1a004b90 <__sfp>
1a004b62:	2200      	movs	r2, #0
1a004b64:	60e0      	str	r0, [r4, #12]
1a004b66:	2104      	movs	r1, #4
1a004b68:	6860      	ldr	r0, [r4, #4]
1a004b6a:	f7ff ffa1 	bl	1a004ab0 <std>
1a004b6e:	2201      	movs	r2, #1
1a004b70:	2109      	movs	r1, #9
1a004b72:	68a0      	ldr	r0, [r4, #8]
1a004b74:	f7ff ff9c 	bl	1a004ab0 <std>
1a004b78:	2202      	movs	r2, #2
1a004b7a:	2112      	movs	r1, #18
1a004b7c:	68e0      	ldr	r0, [r4, #12]
1a004b7e:	f7ff ff97 	bl	1a004ab0 <std>
1a004b82:	2301      	movs	r3, #1
1a004b84:	61a3      	str	r3, [r4, #24]
1a004b86:	bd10      	pop	{r4, pc}
1a004b88:	1a005d98 	.word	0x1a005d98
1a004b8c:	1a004af9 	.word	0x1a004af9

1a004b90 <__sfp>:
1a004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004b92:	4b1b      	ldr	r3, [pc, #108]	; (1a004c00 <__sfp+0x70>)
1a004b94:	681e      	ldr	r6, [r3, #0]
1a004b96:	69b3      	ldr	r3, [r6, #24]
1a004b98:	4607      	mov	r7, r0
1a004b9a:	b913      	cbnz	r3, 1a004ba2 <__sfp+0x12>
1a004b9c:	4630      	mov	r0, r6
1a004b9e:	f7ff ffc7 	bl	1a004b30 <__sinit>
1a004ba2:	3648      	adds	r6, #72	; 0x48
1a004ba4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a004ba8:	3b01      	subs	r3, #1
1a004baa:	d503      	bpl.n	1a004bb4 <__sfp+0x24>
1a004bac:	6833      	ldr	r3, [r6, #0]
1a004bae:	b133      	cbz	r3, 1a004bbe <__sfp+0x2e>
1a004bb0:	6836      	ldr	r6, [r6, #0]
1a004bb2:	e7f7      	b.n	1a004ba4 <__sfp+0x14>
1a004bb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a004bb8:	b16d      	cbz	r5, 1a004bd6 <__sfp+0x46>
1a004bba:	3468      	adds	r4, #104	; 0x68
1a004bbc:	e7f4      	b.n	1a004ba8 <__sfp+0x18>
1a004bbe:	2104      	movs	r1, #4
1a004bc0:	4638      	mov	r0, r7
1a004bc2:	f7ff ff9f 	bl	1a004b04 <__sfmoreglue>
1a004bc6:	6030      	str	r0, [r6, #0]
1a004bc8:	2800      	cmp	r0, #0
1a004bca:	d1f1      	bne.n	1a004bb0 <__sfp+0x20>
1a004bcc:	230c      	movs	r3, #12
1a004bce:	603b      	str	r3, [r7, #0]
1a004bd0:	4604      	mov	r4, r0
1a004bd2:	4620      	mov	r0, r4
1a004bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004bd6:	4b0b      	ldr	r3, [pc, #44]	; (1a004c04 <__sfp+0x74>)
1a004bd8:	6665      	str	r5, [r4, #100]	; 0x64
1a004bda:	e9c4 5500 	strd	r5, r5, [r4]
1a004bde:	60a5      	str	r5, [r4, #8]
1a004be0:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a004be4:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a004be8:	2208      	movs	r2, #8
1a004bea:	4629      	mov	r1, r5
1a004bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a004bf0:	f000 f857 	bl	1a004ca2 <memset>
1a004bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a004bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a004bfc:	e7e9      	b.n	1a004bd2 <__sfp+0x42>
1a004bfe:	bf00      	nop
1a004c00:	1a005d98 	.word	0x1a005d98
1a004c04:	ffff0001 	.word	0xffff0001

1a004c08 <_fwalk_reent>:
1a004c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a004c0c:	4680      	mov	r8, r0
1a004c0e:	4689      	mov	r9, r1
1a004c10:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a004c14:	2600      	movs	r6, #0
1a004c16:	b914      	cbnz	r4, 1a004c1e <_fwalk_reent+0x16>
1a004c18:	4630      	mov	r0, r6
1a004c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a004c1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a004c22:	3f01      	subs	r7, #1
1a004c24:	d501      	bpl.n	1a004c2a <_fwalk_reent+0x22>
1a004c26:	6824      	ldr	r4, [r4, #0]
1a004c28:	e7f5      	b.n	1a004c16 <_fwalk_reent+0xe>
1a004c2a:	89ab      	ldrh	r3, [r5, #12]
1a004c2c:	2b01      	cmp	r3, #1
1a004c2e:	d907      	bls.n	1a004c40 <_fwalk_reent+0x38>
1a004c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a004c34:	3301      	adds	r3, #1
1a004c36:	d003      	beq.n	1a004c40 <_fwalk_reent+0x38>
1a004c38:	4629      	mov	r1, r5
1a004c3a:	4640      	mov	r0, r8
1a004c3c:	47c8      	blx	r9
1a004c3e:	4306      	orrs	r6, r0
1a004c40:	3568      	adds	r5, #104	; 0x68
1a004c42:	e7ee      	b.n	1a004c22 <_fwalk_reent+0x1a>

1a004c44 <__libc_init_array>:
1a004c44:	b570      	push	{r4, r5, r6, lr}
1a004c46:	4e0d      	ldr	r6, [pc, #52]	; (1a004c7c <__libc_init_array+0x38>)
1a004c48:	4c0d      	ldr	r4, [pc, #52]	; (1a004c80 <__libc_init_array+0x3c>)
1a004c4a:	1ba4      	subs	r4, r4, r6
1a004c4c:	10a4      	asrs	r4, r4, #2
1a004c4e:	2500      	movs	r5, #0
1a004c50:	42a5      	cmp	r5, r4
1a004c52:	d109      	bne.n	1a004c68 <__libc_init_array+0x24>
1a004c54:	4e0b      	ldr	r6, [pc, #44]	; (1a004c84 <__libc_init_array+0x40>)
1a004c56:	4c0c      	ldr	r4, [pc, #48]	; (1a004c88 <__libc_init_array+0x44>)
1a004c58:	f7fb fff5 	bl	1a000c46 <_init>
1a004c5c:	1ba4      	subs	r4, r4, r6
1a004c5e:	10a4      	asrs	r4, r4, #2
1a004c60:	2500      	movs	r5, #0
1a004c62:	42a5      	cmp	r5, r4
1a004c64:	d105      	bne.n	1a004c72 <__libc_init_array+0x2e>
1a004c66:	bd70      	pop	{r4, r5, r6, pc}
1a004c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004c6c:	4798      	blx	r3
1a004c6e:	3501      	adds	r5, #1
1a004c70:	e7ee      	b.n	1a004c50 <__libc_init_array+0xc>
1a004c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004c76:	4798      	blx	r3
1a004c78:	3501      	adds	r5, #1
1a004c7a:	e7f2      	b.n	1a004c62 <__libc_init_array+0x1e>
1a004c7c:	1a005dd0 	.word	0x1a005dd0
1a004c80:	1a005dd0 	.word	0x1a005dd0
1a004c84:	1a005dd0 	.word	0x1a005dd0
1a004c88:	1a005dd4 	.word	0x1a005dd4

1a004c8c <memcpy>:
1a004c8c:	b510      	push	{r4, lr}
1a004c8e:	1e43      	subs	r3, r0, #1
1a004c90:	440a      	add	r2, r1
1a004c92:	4291      	cmp	r1, r2
1a004c94:	d100      	bne.n	1a004c98 <memcpy+0xc>
1a004c96:	bd10      	pop	{r4, pc}
1a004c98:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004c9c:	f803 4f01 	strb.w	r4, [r3, #1]!
1a004ca0:	e7f7      	b.n	1a004c92 <memcpy+0x6>

1a004ca2 <memset>:
1a004ca2:	4402      	add	r2, r0
1a004ca4:	4603      	mov	r3, r0
1a004ca6:	4293      	cmp	r3, r2
1a004ca8:	d100      	bne.n	1a004cac <memset+0xa>
1a004caa:	4770      	bx	lr
1a004cac:	f803 1b01 	strb.w	r1, [r3], #1
1a004cb0:	e7f9      	b.n	1a004ca6 <memset+0x4>
1a004cb2:	Address 0x000000001a004cb2 is out of bounds.


1a004cb4 <_free_r>:
1a004cb4:	b538      	push	{r3, r4, r5, lr}
1a004cb6:	4605      	mov	r5, r0
1a004cb8:	2900      	cmp	r1, #0
1a004cba:	d045      	beq.n	1a004d48 <_free_r+0x94>
1a004cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004cc0:	1f0c      	subs	r4, r1, #4
1a004cc2:	2b00      	cmp	r3, #0
1a004cc4:	bfb8      	it	lt
1a004cc6:	18e4      	addlt	r4, r4, r3
1a004cc8:	f000 fa94 	bl	1a0051f4 <__malloc_lock>
1a004ccc:	4a1f      	ldr	r2, [pc, #124]	; (1a004d4c <_free_r+0x98>)
1a004cce:	6813      	ldr	r3, [r2, #0]
1a004cd0:	4610      	mov	r0, r2
1a004cd2:	b933      	cbnz	r3, 1a004ce2 <_free_r+0x2e>
1a004cd4:	6063      	str	r3, [r4, #4]
1a004cd6:	6014      	str	r4, [r2, #0]
1a004cd8:	4628      	mov	r0, r5
1a004cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004cde:	f000 ba8a 	b.w	1a0051f6 <__malloc_unlock>
1a004ce2:	42a3      	cmp	r3, r4
1a004ce4:	d90c      	bls.n	1a004d00 <_free_r+0x4c>
1a004ce6:	6821      	ldr	r1, [r4, #0]
1a004ce8:	1862      	adds	r2, r4, r1
1a004cea:	4293      	cmp	r3, r2
1a004cec:	bf04      	itt	eq
1a004cee:	681a      	ldreq	r2, [r3, #0]
1a004cf0:	685b      	ldreq	r3, [r3, #4]
1a004cf2:	6063      	str	r3, [r4, #4]
1a004cf4:	bf04      	itt	eq
1a004cf6:	1852      	addeq	r2, r2, r1
1a004cf8:	6022      	streq	r2, [r4, #0]
1a004cfa:	6004      	str	r4, [r0, #0]
1a004cfc:	e7ec      	b.n	1a004cd8 <_free_r+0x24>
1a004cfe:	4613      	mov	r3, r2
1a004d00:	685a      	ldr	r2, [r3, #4]
1a004d02:	b10a      	cbz	r2, 1a004d08 <_free_r+0x54>
1a004d04:	42a2      	cmp	r2, r4
1a004d06:	d9fa      	bls.n	1a004cfe <_free_r+0x4a>
1a004d08:	6819      	ldr	r1, [r3, #0]
1a004d0a:	1858      	adds	r0, r3, r1
1a004d0c:	42a0      	cmp	r0, r4
1a004d0e:	d10b      	bne.n	1a004d28 <_free_r+0x74>
1a004d10:	6820      	ldr	r0, [r4, #0]
1a004d12:	4401      	add	r1, r0
1a004d14:	1858      	adds	r0, r3, r1
1a004d16:	4282      	cmp	r2, r0
1a004d18:	6019      	str	r1, [r3, #0]
1a004d1a:	d1dd      	bne.n	1a004cd8 <_free_r+0x24>
1a004d1c:	6810      	ldr	r0, [r2, #0]
1a004d1e:	6852      	ldr	r2, [r2, #4]
1a004d20:	605a      	str	r2, [r3, #4]
1a004d22:	4401      	add	r1, r0
1a004d24:	6019      	str	r1, [r3, #0]
1a004d26:	e7d7      	b.n	1a004cd8 <_free_r+0x24>
1a004d28:	d902      	bls.n	1a004d30 <_free_r+0x7c>
1a004d2a:	230c      	movs	r3, #12
1a004d2c:	602b      	str	r3, [r5, #0]
1a004d2e:	e7d3      	b.n	1a004cd8 <_free_r+0x24>
1a004d30:	6820      	ldr	r0, [r4, #0]
1a004d32:	1821      	adds	r1, r4, r0
1a004d34:	428a      	cmp	r2, r1
1a004d36:	bf04      	itt	eq
1a004d38:	6811      	ldreq	r1, [r2, #0]
1a004d3a:	6852      	ldreq	r2, [r2, #4]
1a004d3c:	6062      	str	r2, [r4, #4]
1a004d3e:	bf04      	itt	eq
1a004d40:	1809      	addeq	r1, r1, r0
1a004d42:	6021      	streq	r1, [r4, #0]
1a004d44:	605c      	str	r4, [r3, #4]
1a004d46:	e7c7      	b.n	1a004cd8 <_free_r+0x24>
1a004d48:	bd38      	pop	{r3, r4, r5, pc}
1a004d4a:	bf00      	nop
1a004d4c:	10002c30 	.word	0x10002c30

1a004d50 <_malloc_r>:
1a004d50:	b570      	push	{r4, r5, r6, lr}
1a004d52:	1ccd      	adds	r5, r1, #3
1a004d54:	f025 0503 	bic.w	r5, r5, #3
1a004d58:	3508      	adds	r5, #8
1a004d5a:	2d0c      	cmp	r5, #12
1a004d5c:	bf38      	it	cc
1a004d5e:	250c      	movcc	r5, #12
1a004d60:	2d00      	cmp	r5, #0
1a004d62:	4606      	mov	r6, r0
1a004d64:	db01      	blt.n	1a004d6a <_malloc_r+0x1a>
1a004d66:	42a9      	cmp	r1, r5
1a004d68:	d903      	bls.n	1a004d72 <_malloc_r+0x22>
1a004d6a:	230c      	movs	r3, #12
1a004d6c:	6033      	str	r3, [r6, #0]
1a004d6e:	2000      	movs	r0, #0
1a004d70:	bd70      	pop	{r4, r5, r6, pc}
1a004d72:	f000 fa3f 	bl	1a0051f4 <__malloc_lock>
1a004d76:	4a21      	ldr	r2, [pc, #132]	; (1a004dfc <_malloc_r+0xac>)
1a004d78:	6814      	ldr	r4, [r2, #0]
1a004d7a:	4621      	mov	r1, r4
1a004d7c:	b991      	cbnz	r1, 1a004da4 <_malloc_r+0x54>
1a004d7e:	4c20      	ldr	r4, [pc, #128]	; (1a004e00 <_malloc_r+0xb0>)
1a004d80:	6823      	ldr	r3, [r4, #0]
1a004d82:	b91b      	cbnz	r3, 1a004d8c <_malloc_r+0x3c>
1a004d84:	4630      	mov	r0, r6
1a004d86:	f7fb ffb3 	bl	1a000cf0 <_sbrk_r>
1a004d8a:	6020      	str	r0, [r4, #0]
1a004d8c:	4629      	mov	r1, r5
1a004d8e:	4630      	mov	r0, r6
1a004d90:	f7fb ffae 	bl	1a000cf0 <_sbrk_r>
1a004d94:	1c43      	adds	r3, r0, #1
1a004d96:	d124      	bne.n	1a004de2 <_malloc_r+0x92>
1a004d98:	230c      	movs	r3, #12
1a004d9a:	6033      	str	r3, [r6, #0]
1a004d9c:	4630      	mov	r0, r6
1a004d9e:	f000 fa2a 	bl	1a0051f6 <__malloc_unlock>
1a004da2:	e7e4      	b.n	1a004d6e <_malloc_r+0x1e>
1a004da4:	680b      	ldr	r3, [r1, #0]
1a004da6:	1b5b      	subs	r3, r3, r5
1a004da8:	d418      	bmi.n	1a004ddc <_malloc_r+0x8c>
1a004daa:	2b0b      	cmp	r3, #11
1a004dac:	d90f      	bls.n	1a004dce <_malloc_r+0x7e>
1a004dae:	600b      	str	r3, [r1, #0]
1a004db0:	50cd      	str	r5, [r1, r3]
1a004db2:	18cc      	adds	r4, r1, r3
1a004db4:	4630      	mov	r0, r6
1a004db6:	f000 fa1e 	bl	1a0051f6 <__malloc_unlock>
1a004dba:	f104 000b 	add.w	r0, r4, #11
1a004dbe:	1d23      	adds	r3, r4, #4
1a004dc0:	f020 0007 	bic.w	r0, r0, #7
1a004dc4:	1ac3      	subs	r3, r0, r3
1a004dc6:	d0d3      	beq.n	1a004d70 <_malloc_r+0x20>
1a004dc8:	425a      	negs	r2, r3
1a004dca:	50e2      	str	r2, [r4, r3]
1a004dcc:	e7d0      	b.n	1a004d70 <_malloc_r+0x20>
1a004dce:	428c      	cmp	r4, r1
1a004dd0:	684b      	ldr	r3, [r1, #4]
1a004dd2:	bf16      	itet	ne
1a004dd4:	6063      	strne	r3, [r4, #4]
1a004dd6:	6013      	streq	r3, [r2, #0]
1a004dd8:	460c      	movne	r4, r1
1a004dda:	e7eb      	b.n	1a004db4 <_malloc_r+0x64>
1a004ddc:	460c      	mov	r4, r1
1a004dde:	6849      	ldr	r1, [r1, #4]
1a004de0:	e7cc      	b.n	1a004d7c <_malloc_r+0x2c>
1a004de2:	1cc4      	adds	r4, r0, #3
1a004de4:	f024 0403 	bic.w	r4, r4, #3
1a004de8:	42a0      	cmp	r0, r4
1a004dea:	d005      	beq.n	1a004df8 <_malloc_r+0xa8>
1a004dec:	1a21      	subs	r1, r4, r0
1a004dee:	4630      	mov	r0, r6
1a004df0:	f7fb ff7e 	bl	1a000cf0 <_sbrk_r>
1a004df4:	3001      	adds	r0, #1
1a004df6:	d0cf      	beq.n	1a004d98 <_malloc_r+0x48>
1a004df8:	6025      	str	r5, [r4, #0]
1a004dfa:	e7db      	b.n	1a004db4 <_malloc_r+0x64>
1a004dfc:	10002c30 	.word	0x10002c30
1a004e00:	10002c34 	.word	0x10002c34

1a004e04 <iprintf>:
1a004e04:	b40f      	push	{r0, r1, r2, r3}
1a004e06:	4b0a      	ldr	r3, [pc, #40]	; (1a004e30 <iprintf+0x2c>)
1a004e08:	b513      	push	{r0, r1, r4, lr}
1a004e0a:	681c      	ldr	r4, [r3, #0]
1a004e0c:	b124      	cbz	r4, 1a004e18 <iprintf+0x14>
1a004e0e:	69a3      	ldr	r3, [r4, #24]
1a004e10:	b913      	cbnz	r3, 1a004e18 <iprintf+0x14>
1a004e12:	4620      	mov	r0, r4
1a004e14:	f7ff fe8c 	bl	1a004b30 <__sinit>
1a004e18:	ab05      	add	r3, sp, #20
1a004e1a:	9a04      	ldr	r2, [sp, #16]
1a004e1c:	68a1      	ldr	r1, [r4, #8]
1a004e1e:	9301      	str	r3, [sp, #4]
1a004e20:	4620      	mov	r0, r4
1a004e22:	f000 fa13 	bl	1a00524c <_vfiprintf_r>
1a004e26:	b002      	add	sp, #8
1a004e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004e2c:	b004      	add	sp, #16
1a004e2e:	4770      	bx	lr
1a004e30:	1000008c 	.word	0x1000008c

1a004e34 <putchar>:
1a004e34:	b538      	push	{r3, r4, r5, lr}
1a004e36:	4b08      	ldr	r3, [pc, #32]	; (1a004e58 <putchar+0x24>)
1a004e38:	681c      	ldr	r4, [r3, #0]
1a004e3a:	4605      	mov	r5, r0
1a004e3c:	b124      	cbz	r4, 1a004e48 <putchar+0x14>
1a004e3e:	69a3      	ldr	r3, [r4, #24]
1a004e40:	b913      	cbnz	r3, 1a004e48 <putchar+0x14>
1a004e42:	4620      	mov	r0, r4
1a004e44:	f7ff fe74 	bl	1a004b30 <__sinit>
1a004e48:	68a2      	ldr	r2, [r4, #8]
1a004e4a:	4629      	mov	r1, r5
1a004e4c:	4620      	mov	r0, r4
1a004e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a004e52:	f000 bc99 	b.w	1a005788 <_putc_r>
1a004e56:	bf00      	nop
1a004e58:	1000008c 	.word	0x1000008c

1a004e5c <_puts_r>:
1a004e5c:	b570      	push	{r4, r5, r6, lr}
1a004e5e:	460e      	mov	r6, r1
1a004e60:	4605      	mov	r5, r0
1a004e62:	b118      	cbz	r0, 1a004e6c <_puts_r+0x10>
1a004e64:	6983      	ldr	r3, [r0, #24]
1a004e66:	b90b      	cbnz	r3, 1a004e6c <_puts_r+0x10>
1a004e68:	f7ff fe62 	bl	1a004b30 <__sinit>
1a004e6c:	69ab      	ldr	r3, [r5, #24]
1a004e6e:	68ac      	ldr	r4, [r5, #8]
1a004e70:	b913      	cbnz	r3, 1a004e78 <_puts_r+0x1c>
1a004e72:	4628      	mov	r0, r5
1a004e74:	f7ff fe5c 	bl	1a004b30 <__sinit>
1a004e78:	4b23      	ldr	r3, [pc, #140]	; (1a004f08 <_puts_r+0xac>)
1a004e7a:	429c      	cmp	r4, r3
1a004e7c:	d117      	bne.n	1a004eae <_puts_r+0x52>
1a004e7e:	686c      	ldr	r4, [r5, #4]
1a004e80:	89a3      	ldrh	r3, [r4, #12]
1a004e82:	071b      	lsls	r3, r3, #28
1a004e84:	d51d      	bpl.n	1a004ec2 <_puts_r+0x66>
1a004e86:	6923      	ldr	r3, [r4, #16]
1a004e88:	b1db      	cbz	r3, 1a004ec2 <_puts_r+0x66>
1a004e8a:	3e01      	subs	r6, #1
1a004e8c:	68a3      	ldr	r3, [r4, #8]
1a004e8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a004e92:	3b01      	subs	r3, #1
1a004e94:	60a3      	str	r3, [r4, #8]
1a004e96:	b9e9      	cbnz	r1, 1a004ed4 <_puts_r+0x78>
1a004e98:	2b00      	cmp	r3, #0
1a004e9a:	da2e      	bge.n	1a004efa <_puts_r+0x9e>
1a004e9c:	4622      	mov	r2, r4
1a004e9e:	210a      	movs	r1, #10
1a004ea0:	4628      	mov	r0, r5
1a004ea2:	f000 f883 	bl	1a004fac <__swbuf_r>
1a004ea6:	3001      	adds	r0, #1
1a004ea8:	d011      	beq.n	1a004ece <_puts_r+0x72>
1a004eaa:	200a      	movs	r0, #10
1a004eac:	e011      	b.n	1a004ed2 <_puts_r+0x76>
1a004eae:	4b17      	ldr	r3, [pc, #92]	; (1a004f0c <_puts_r+0xb0>)
1a004eb0:	429c      	cmp	r4, r3
1a004eb2:	d101      	bne.n	1a004eb8 <_puts_r+0x5c>
1a004eb4:	68ac      	ldr	r4, [r5, #8]
1a004eb6:	e7e3      	b.n	1a004e80 <_puts_r+0x24>
1a004eb8:	4b15      	ldr	r3, [pc, #84]	; (1a004f10 <_puts_r+0xb4>)
1a004eba:	429c      	cmp	r4, r3
1a004ebc:	bf08      	it	eq
1a004ebe:	68ec      	ldreq	r4, [r5, #12]
1a004ec0:	e7de      	b.n	1a004e80 <_puts_r+0x24>
1a004ec2:	4621      	mov	r1, r4
1a004ec4:	4628      	mov	r0, r5
1a004ec6:	f000 f8c3 	bl	1a005050 <__swsetup_r>
1a004eca:	2800      	cmp	r0, #0
1a004ecc:	d0dd      	beq.n	1a004e8a <_puts_r+0x2e>
1a004ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004ed2:	bd70      	pop	{r4, r5, r6, pc}
1a004ed4:	2b00      	cmp	r3, #0
1a004ed6:	da04      	bge.n	1a004ee2 <_puts_r+0x86>
1a004ed8:	69a2      	ldr	r2, [r4, #24]
1a004eda:	429a      	cmp	r2, r3
1a004edc:	dc06      	bgt.n	1a004eec <_puts_r+0x90>
1a004ede:	290a      	cmp	r1, #10
1a004ee0:	d004      	beq.n	1a004eec <_puts_r+0x90>
1a004ee2:	6823      	ldr	r3, [r4, #0]
1a004ee4:	1c5a      	adds	r2, r3, #1
1a004ee6:	6022      	str	r2, [r4, #0]
1a004ee8:	7019      	strb	r1, [r3, #0]
1a004eea:	e7cf      	b.n	1a004e8c <_puts_r+0x30>
1a004eec:	4622      	mov	r2, r4
1a004eee:	4628      	mov	r0, r5
1a004ef0:	f000 f85c 	bl	1a004fac <__swbuf_r>
1a004ef4:	3001      	adds	r0, #1
1a004ef6:	d1c9      	bne.n	1a004e8c <_puts_r+0x30>
1a004ef8:	e7e9      	b.n	1a004ece <_puts_r+0x72>
1a004efa:	6823      	ldr	r3, [r4, #0]
1a004efc:	200a      	movs	r0, #10
1a004efe:	1c5a      	adds	r2, r3, #1
1a004f00:	6022      	str	r2, [r4, #0]
1a004f02:	7018      	strb	r0, [r3, #0]
1a004f04:	e7e5      	b.n	1a004ed2 <_puts_r+0x76>
1a004f06:	bf00      	nop
1a004f08:	1a005d58 	.word	0x1a005d58
1a004f0c:	1a005d78 	.word	0x1a005d78
1a004f10:	1a005d38 	.word	0x1a005d38

1a004f14 <puts>:
1a004f14:	4b02      	ldr	r3, [pc, #8]	; (1a004f20 <puts+0xc>)
1a004f16:	4601      	mov	r1, r0
1a004f18:	6818      	ldr	r0, [r3, #0]
1a004f1a:	f7ff bf9f 	b.w	1a004e5c <_puts_r>
1a004f1e:	bf00      	nop
1a004f20:	1000008c 	.word	0x1000008c

1a004f24 <__sread>:
1a004f24:	b510      	push	{r4, lr}
1a004f26:	460c      	mov	r4, r1
1a004f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004f2c:	f7fb fea4 	bl	1a000c78 <_read_r>
1a004f30:	2800      	cmp	r0, #0
1a004f32:	bfab      	itete	ge
1a004f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a004f36:	89a3      	ldrhlt	r3, [r4, #12]
1a004f38:	181b      	addge	r3, r3, r0
1a004f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a004f3e:	bfac      	ite	ge
1a004f40:	6563      	strge	r3, [r4, #84]	; 0x54
1a004f42:	81a3      	strhlt	r3, [r4, #12]
1a004f44:	bd10      	pop	{r4, pc}

1a004f46 <__swrite>:
1a004f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004f4a:	461f      	mov	r7, r3
1a004f4c:	898b      	ldrh	r3, [r1, #12]
1a004f4e:	05db      	lsls	r3, r3, #23
1a004f50:	4605      	mov	r5, r0
1a004f52:	460c      	mov	r4, r1
1a004f54:	4616      	mov	r6, r2
1a004f56:	d505      	bpl.n	1a004f64 <__swrite+0x1e>
1a004f58:	2302      	movs	r3, #2
1a004f5a:	2200      	movs	r2, #0
1a004f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004f60:	f7fb fe85 	bl	1a000c6e <_lseek_r>
1a004f64:	89a3      	ldrh	r3, [r4, #12]
1a004f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a004f6e:	81a3      	strh	r3, [r4, #12]
1a004f70:	4632      	mov	r2, r6
1a004f72:	463b      	mov	r3, r7
1a004f74:	4628      	mov	r0, r5
1a004f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004f7a:	f7fb bea4 	b.w	1a000cc6 <_write_r>

1a004f7e <__sseek>:
1a004f7e:	b510      	push	{r4, lr}
1a004f80:	460c      	mov	r4, r1
1a004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004f86:	f7fb fe72 	bl	1a000c6e <_lseek_r>
1a004f8a:	1c43      	adds	r3, r0, #1
1a004f8c:	89a3      	ldrh	r3, [r4, #12]
1a004f8e:	bf15      	itete	ne
1a004f90:	6560      	strne	r0, [r4, #84]	; 0x54
1a004f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a004f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004f9a:	81a3      	strheq	r3, [r4, #12]
1a004f9c:	bf18      	it	ne
1a004f9e:	81a3      	strhne	r3, [r4, #12]
1a004fa0:	bd10      	pop	{r4, pc}

1a004fa2 <__sclose>:
1a004fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004fa6:	f7fb be4f 	b.w	1a000c48 <_close_r>
1a004faa:	Address 0x000000001a004faa is out of bounds.


1a004fac <__swbuf_r>:
1a004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004fae:	460e      	mov	r6, r1
1a004fb0:	4614      	mov	r4, r2
1a004fb2:	4605      	mov	r5, r0
1a004fb4:	b118      	cbz	r0, 1a004fbe <__swbuf_r+0x12>
1a004fb6:	6983      	ldr	r3, [r0, #24]
1a004fb8:	b90b      	cbnz	r3, 1a004fbe <__swbuf_r+0x12>
1a004fba:	f7ff fdb9 	bl	1a004b30 <__sinit>
1a004fbe:	4b21      	ldr	r3, [pc, #132]	; (1a005044 <__swbuf_r+0x98>)
1a004fc0:	429c      	cmp	r4, r3
1a004fc2:	d12a      	bne.n	1a00501a <__swbuf_r+0x6e>
1a004fc4:	686c      	ldr	r4, [r5, #4]
1a004fc6:	69a3      	ldr	r3, [r4, #24]
1a004fc8:	60a3      	str	r3, [r4, #8]
1a004fca:	89a3      	ldrh	r3, [r4, #12]
1a004fcc:	071a      	lsls	r2, r3, #28
1a004fce:	d52e      	bpl.n	1a00502e <__swbuf_r+0x82>
1a004fd0:	6923      	ldr	r3, [r4, #16]
1a004fd2:	b363      	cbz	r3, 1a00502e <__swbuf_r+0x82>
1a004fd4:	6923      	ldr	r3, [r4, #16]
1a004fd6:	6820      	ldr	r0, [r4, #0]
1a004fd8:	1ac0      	subs	r0, r0, r3
1a004fda:	6963      	ldr	r3, [r4, #20]
1a004fdc:	b2f6      	uxtb	r6, r6
1a004fde:	4283      	cmp	r3, r0
1a004fe0:	4637      	mov	r7, r6
1a004fe2:	dc04      	bgt.n	1a004fee <__swbuf_r+0x42>
1a004fe4:	4621      	mov	r1, r4
1a004fe6:	4628      	mov	r0, r5
1a004fe8:	f7ff fd26 	bl	1a004a38 <_fflush_r>
1a004fec:	bb28      	cbnz	r0, 1a00503a <__swbuf_r+0x8e>
1a004fee:	68a3      	ldr	r3, [r4, #8]
1a004ff0:	3b01      	subs	r3, #1
1a004ff2:	60a3      	str	r3, [r4, #8]
1a004ff4:	6823      	ldr	r3, [r4, #0]
1a004ff6:	1c5a      	adds	r2, r3, #1
1a004ff8:	6022      	str	r2, [r4, #0]
1a004ffa:	701e      	strb	r6, [r3, #0]
1a004ffc:	6963      	ldr	r3, [r4, #20]
1a004ffe:	3001      	adds	r0, #1
1a005000:	4283      	cmp	r3, r0
1a005002:	d004      	beq.n	1a00500e <__swbuf_r+0x62>
1a005004:	89a3      	ldrh	r3, [r4, #12]
1a005006:	07db      	lsls	r3, r3, #31
1a005008:	d519      	bpl.n	1a00503e <__swbuf_r+0x92>
1a00500a:	2e0a      	cmp	r6, #10
1a00500c:	d117      	bne.n	1a00503e <__swbuf_r+0x92>
1a00500e:	4621      	mov	r1, r4
1a005010:	4628      	mov	r0, r5
1a005012:	f7ff fd11 	bl	1a004a38 <_fflush_r>
1a005016:	b190      	cbz	r0, 1a00503e <__swbuf_r+0x92>
1a005018:	e00f      	b.n	1a00503a <__swbuf_r+0x8e>
1a00501a:	4b0b      	ldr	r3, [pc, #44]	; (1a005048 <__swbuf_r+0x9c>)
1a00501c:	429c      	cmp	r4, r3
1a00501e:	d101      	bne.n	1a005024 <__swbuf_r+0x78>
1a005020:	68ac      	ldr	r4, [r5, #8]
1a005022:	e7d0      	b.n	1a004fc6 <__swbuf_r+0x1a>
1a005024:	4b09      	ldr	r3, [pc, #36]	; (1a00504c <__swbuf_r+0xa0>)
1a005026:	429c      	cmp	r4, r3
1a005028:	bf08      	it	eq
1a00502a:	68ec      	ldreq	r4, [r5, #12]
1a00502c:	e7cb      	b.n	1a004fc6 <__swbuf_r+0x1a>
1a00502e:	4621      	mov	r1, r4
1a005030:	4628      	mov	r0, r5
1a005032:	f000 f80d 	bl	1a005050 <__swsetup_r>
1a005036:	2800      	cmp	r0, #0
1a005038:	d0cc      	beq.n	1a004fd4 <__swbuf_r+0x28>
1a00503a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00503e:	4638      	mov	r0, r7
1a005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005042:	bf00      	nop
1a005044:	1a005d58 	.word	0x1a005d58
1a005048:	1a005d78 	.word	0x1a005d78
1a00504c:	1a005d38 	.word	0x1a005d38

1a005050 <__swsetup_r>:
1a005050:	4b32      	ldr	r3, [pc, #200]	; (1a00511c <__swsetup_r+0xcc>)
1a005052:	b570      	push	{r4, r5, r6, lr}
1a005054:	681d      	ldr	r5, [r3, #0]
1a005056:	4606      	mov	r6, r0
1a005058:	460c      	mov	r4, r1
1a00505a:	b125      	cbz	r5, 1a005066 <__swsetup_r+0x16>
1a00505c:	69ab      	ldr	r3, [r5, #24]
1a00505e:	b913      	cbnz	r3, 1a005066 <__swsetup_r+0x16>
1a005060:	4628      	mov	r0, r5
1a005062:	f7ff fd65 	bl	1a004b30 <__sinit>
1a005066:	4b2e      	ldr	r3, [pc, #184]	; (1a005120 <__swsetup_r+0xd0>)
1a005068:	429c      	cmp	r4, r3
1a00506a:	d10f      	bne.n	1a00508c <__swsetup_r+0x3c>
1a00506c:	686c      	ldr	r4, [r5, #4]
1a00506e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005072:	b29a      	uxth	r2, r3
1a005074:	0715      	lsls	r5, r2, #28
1a005076:	d42c      	bmi.n	1a0050d2 <__swsetup_r+0x82>
1a005078:	06d0      	lsls	r0, r2, #27
1a00507a:	d411      	bmi.n	1a0050a0 <__swsetup_r+0x50>
1a00507c:	2209      	movs	r2, #9
1a00507e:	6032      	str	r2, [r6, #0]
1a005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a005084:	81a3      	strh	r3, [r4, #12]
1a005086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00508a:	e03e      	b.n	1a00510a <__swsetup_r+0xba>
1a00508c:	4b25      	ldr	r3, [pc, #148]	; (1a005124 <__swsetup_r+0xd4>)
1a00508e:	429c      	cmp	r4, r3
1a005090:	d101      	bne.n	1a005096 <__swsetup_r+0x46>
1a005092:	68ac      	ldr	r4, [r5, #8]
1a005094:	e7eb      	b.n	1a00506e <__swsetup_r+0x1e>
1a005096:	4b24      	ldr	r3, [pc, #144]	; (1a005128 <__swsetup_r+0xd8>)
1a005098:	429c      	cmp	r4, r3
1a00509a:	bf08      	it	eq
1a00509c:	68ec      	ldreq	r4, [r5, #12]
1a00509e:	e7e6      	b.n	1a00506e <__swsetup_r+0x1e>
1a0050a0:	0751      	lsls	r1, r2, #29
1a0050a2:	d512      	bpl.n	1a0050ca <__swsetup_r+0x7a>
1a0050a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0050a6:	b141      	cbz	r1, 1a0050ba <__swsetup_r+0x6a>
1a0050a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0050ac:	4299      	cmp	r1, r3
1a0050ae:	d002      	beq.n	1a0050b6 <__swsetup_r+0x66>
1a0050b0:	4630      	mov	r0, r6
1a0050b2:	f7ff fdff 	bl	1a004cb4 <_free_r>
1a0050b6:	2300      	movs	r3, #0
1a0050b8:	6363      	str	r3, [r4, #52]	; 0x34
1a0050ba:	89a3      	ldrh	r3, [r4, #12]
1a0050bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0050c0:	81a3      	strh	r3, [r4, #12]
1a0050c2:	2300      	movs	r3, #0
1a0050c4:	6063      	str	r3, [r4, #4]
1a0050c6:	6923      	ldr	r3, [r4, #16]
1a0050c8:	6023      	str	r3, [r4, #0]
1a0050ca:	89a3      	ldrh	r3, [r4, #12]
1a0050cc:	f043 0308 	orr.w	r3, r3, #8
1a0050d0:	81a3      	strh	r3, [r4, #12]
1a0050d2:	6923      	ldr	r3, [r4, #16]
1a0050d4:	b94b      	cbnz	r3, 1a0050ea <__swsetup_r+0x9a>
1a0050d6:	89a3      	ldrh	r3, [r4, #12]
1a0050d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0050e0:	d003      	beq.n	1a0050ea <__swsetup_r+0x9a>
1a0050e2:	4621      	mov	r1, r4
1a0050e4:	4630      	mov	r0, r6
1a0050e6:	f000 f845 	bl	1a005174 <__smakebuf_r>
1a0050ea:	89a2      	ldrh	r2, [r4, #12]
1a0050ec:	f012 0301 	ands.w	r3, r2, #1
1a0050f0:	d00c      	beq.n	1a00510c <__swsetup_r+0xbc>
1a0050f2:	2300      	movs	r3, #0
1a0050f4:	60a3      	str	r3, [r4, #8]
1a0050f6:	6963      	ldr	r3, [r4, #20]
1a0050f8:	425b      	negs	r3, r3
1a0050fa:	61a3      	str	r3, [r4, #24]
1a0050fc:	6923      	ldr	r3, [r4, #16]
1a0050fe:	b953      	cbnz	r3, 1a005116 <__swsetup_r+0xc6>
1a005100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005104:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a005108:	d1ba      	bne.n	1a005080 <__swsetup_r+0x30>
1a00510a:	bd70      	pop	{r4, r5, r6, pc}
1a00510c:	0792      	lsls	r2, r2, #30
1a00510e:	bf58      	it	pl
1a005110:	6963      	ldrpl	r3, [r4, #20]
1a005112:	60a3      	str	r3, [r4, #8]
1a005114:	e7f2      	b.n	1a0050fc <__swsetup_r+0xac>
1a005116:	2000      	movs	r0, #0
1a005118:	e7f7      	b.n	1a00510a <__swsetup_r+0xba>
1a00511a:	bf00      	nop
1a00511c:	1000008c 	.word	0x1000008c
1a005120:	1a005d58 	.word	0x1a005d58
1a005124:	1a005d78 	.word	0x1a005d78
1a005128:	1a005d38 	.word	0x1a005d38

1a00512c <__swhatbuf_r>:
1a00512c:	b570      	push	{r4, r5, r6, lr}
1a00512e:	460e      	mov	r6, r1
1a005130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a005134:	2900      	cmp	r1, #0
1a005136:	b096      	sub	sp, #88	; 0x58
1a005138:	4614      	mov	r4, r2
1a00513a:	461d      	mov	r5, r3
1a00513c:	da07      	bge.n	1a00514e <__swhatbuf_r+0x22>
1a00513e:	2300      	movs	r3, #0
1a005140:	602b      	str	r3, [r5, #0]
1a005142:	89b3      	ldrh	r3, [r6, #12]
1a005144:	061a      	lsls	r2, r3, #24
1a005146:	d410      	bmi.n	1a00516a <__swhatbuf_r+0x3e>
1a005148:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00514c:	e00e      	b.n	1a00516c <__swhatbuf_r+0x40>
1a00514e:	466a      	mov	r2, sp
1a005150:	f7fb fd7f 	bl	1a000c52 <_fstat_r>
1a005154:	2800      	cmp	r0, #0
1a005156:	dbf2      	blt.n	1a00513e <__swhatbuf_r+0x12>
1a005158:	9a01      	ldr	r2, [sp, #4]
1a00515a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a00515e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a005162:	425a      	negs	r2, r3
1a005164:	415a      	adcs	r2, r3
1a005166:	602a      	str	r2, [r5, #0]
1a005168:	e7ee      	b.n	1a005148 <__swhatbuf_r+0x1c>
1a00516a:	2340      	movs	r3, #64	; 0x40
1a00516c:	2000      	movs	r0, #0
1a00516e:	6023      	str	r3, [r4, #0]
1a005170:	b016      	add	sp, #88	; 0x58
1a005172:	bd70      	pop	{r4, r5, r6, pc}

1a005174 <__smakebuf_r>:
1a005174:	898b      	ldrh	r3, [r1, #12]
1a005176:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a005178:	079d      	lsls	r5, r3, #30
1a00517a:	4606      	mov	r6, r0
1a00517c:	460c      	mov	r4, r1
1a00517e:	d507      	bpl.n	1a005190 <__smakebuf_r+0x1c>
1a005180:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a005184:	6023      	str	r3, [r4, #0]
1a005186:	6123      	str	r3, [r4, #16]
1a005188:	2301      	movs	r3, #1
1a00518a:	6163      	str	r3, [r4, #20]
1a00518c:	b002      	add	sp, #8
1a00518e:	bd70      	pop	{r4, r5, r6, pc}
1a005190:	ab01      	add	r3, sp, #4
1a005192:	466a      	mov	r2, sp
1a005194:	f7ff ffca 	bl	1a00512c <__swhatbuf_r>
1a005198:	9900      	ldr	r1, [sp, #0]
1a00519a:	4605      	mov	r5, r0
1a00519c:	4630      	mov	r0, r6
1a00519e:	f7ff fdd7 	bl	1a004d50 <_malloc_r>
1a0051a2:	b948      	cbnz	r0, 1a0051b8 <__smakebuf_r+0x44>
1a0051a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0051a8:	059a      	lsls	r2, r3, #22
1a0051aa:	d4ef      	bmi.n	1a00518c <__smakebuf_r+0x18>
1a0051ac:	f023 0303 	bic.w	r3, r3, #3
1a0051b0:	f043 0302 	orr.w	r3, r3, #2
1a0051b4:	81a3      	strh	r3, [r4, #12]
1a0051b6:	e7e3      	b.n	1a005180 <__smakebuf_r+0xc>
1a0051b8:	4b0d      	ldr	r3, [pc, #52]	; (1a0051f0 <__smakebuf_r+0x7c>)
1a0051ba:	62b3      	str	r3, [r6, #40]	; 0x28
1a0051bc:	89a3      	ldrh	r3, [r4, #12]
1a0051be:	6020      	str	r0, [r4, #0]
1a0051c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0051c4:	81a3      	strh	r3, [r4, #12]
1a0051c6:	9b00      	ldr	r3, [sp, #0]
1a0051c8:	6163      	str	r3, [r4, #20]
1a0051ca:	9b01      	ldr	r3, [sp, #4]
1a0051cc:	6120      	str	r0, [r4, #16]
1a0051ce:	b15b      	cbz	r3, 1a0051e8 <__smakebuf_r+0x74>
1a0051d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0051d4:	4630      	mov	r0, r6
1a0051d6:	f7fb fd41 	bl	1a000c5c <_isatty_r>
1a0051da:	b128      	cbz	r0, 1a0051e8 <__smakebuf_r+0x74>
1a0051dc:	89a3      	ldrh	r3, [r4, #12]
1a0051de:	f023 0303 	bic.w	r3, r3, #3
1a0051e2:	f043 0301 	orr.w	r3, r3, #1
1a0051e6:	81a3      	strh	r3, [r4, #12]
1a0051e8:	89a3      	ldrh	r3, [r4, #12]
1a0051ea:	431d      	orrs	r5, r3
1a0051ec:	81a5      	strh	r5, [r4, #12]
1a0051ee:	e7cd      	b.n	1a00518c <__smakebuf_r+0x18>
1a0051f0:	1a004af9 	.word	0x1a004af9

1a0051f4 <__malloc_lock>:
1a0051f4:	4770      	bx	lr

1a0051f6 <__malloc_unlock>:
1a0051f6:	4770      	bx	lr

1a0051f8 <__sfputc_r>:
1a0051f8:	6893      	ldr	r3, [r2, #8]
1a0051fa:	3b01      	subs	r3, #1
1a0051fc:	2b00      	cmp	r3, #0
1a0051fe:	b410      	push	{r4}
1a005200:	6093      	str	r3, [r2, #8]
1a005202:	da08      	bge.n	1a005216 <__sfputc_r+0x1e>
1a005204:	6994      	ldr	r4, [r2, #24]
1a005206:	42a3      	cmp	r3, r4
1a005208:	db01      	blt.n	1a00520e <__sfputc_r+0x16>
1a00520a:	290a      	cmp	r1, #10
1a00520c:	d103      	bne.n	1a005216 <__sfputc_r+0x1e>
1a00520e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005212:	f7ff becb 	b.w	1a004fac <__swbuf_r>
1a005216:	6813      	ldr	r3, [r2, #0]
1a005218:	1c58      	adds	r0, r3, #1
1a00521a:	6010      	str	r0, [r2, #0]
1a00521c:	7019      	strb	r1, [r3, #0]
1a00521e:	4608      	mov	r0, r1
1a005220:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005224:	4770      	bx	lr

1a005226 <__sfputs_r>:
1a005226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005228:	4606      	mov	r6, r0
1a00522a:	460f      	mov	r7, r1
1a00522c:	4614      	mov	r4, r2
1a00522e:	18d5      	adds	r5, r2, r3
1a005230:	42ac      	cmp	r4, r5
1a005232:	d101      	bne.n	1a005238 <__sfputs_r+0x12>
1a005234:	2000      	movs	r0, #0
1a005236:	e007      	b.n	1a005248 <__sfputs_r+0x22>
1a005238:	463a      	mov	r2, r7
1a00523a:	f814 1b01 	ldrb.w	r1, [r4], #1
1a00523e:	4630      	mov	r0, r6
1a005240:	f7ff ffda 	bl	1a0051f8 <__sfputc_r>
1a005244:	1c43      	adds	r3, r0, #1
1a005246:	d1f3      	bne.n	1a005230 <__sfputs_r+0xa>
1a005248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00524a:	Address 0x000000001a00524a is out of bounds.


1a00524c <_vfiprintf_r>:
1a00524c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005250:	460c      	mov	r4, r1
1a005252:	b09d      	sub	sp, #116	; 0x74
1a005254:	4617      	mov	r7, r2
1a005256:	461d      	mov	r5, r3
1a005258:	4606      	mov	r6, r0
1a00525a:	b118      	cbz	r0, 1a005264 <_vfiprintf_r+0x18>
1a00525c:	6983      	ldr	r3, [r0, #24]
1a00525e:	b90b      	cbnz	r3, 1a005264 <_vfiprintf_r+0x18>
1a005260:	f7ff fc66 	bl	1a004b30 <__sinit>
1a005264:	4b7c      	ldr	r3, [pc, #496]	; (1a005458 <_vfiprintf_r+0x20c>)
1a005266:	429c      	cmp	r4, r3
1a005268:	d158      	bne.n	1a00531c <_vfiprintf_r+0xd0>
1a00526a:	6874      	ldr	r4, [r6, #4]
1a00526c:	89a3      	ldrh	r3, [r4, #12]
1a00526e:	0718      	lsls	r0, r3, #28
1a005270:	d55e      	bpl.n	1a005330 <_vfiprintf_r+0xe4>
1a005272:	6923      	ldr	r3, [r4, #16]
1a005274:	2b00      	cmp	r3, #0
1a005276:	d05b      	beq.n	1a005330 <_vfiprintf_r+0xe4>
1a005278:	2300      	movs	r3, #0
1a00527a:	9309      	str	r3, [sp, #36]	; 0x24
1a00527c:	2320      	movs	r3, #32
1a00527e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a005282:	2330      	movs	r3, #48	; 0x30
1a005284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a005288:	9503      	str	r5, [sp, #12]
1a00528a:	f04f 0b01 	mov.w	fp, #1
1a00528e:	46b8      	mov	r8, r7
1a005290:	4645      	mov	r5, r8
1a005292:	f815 3b01 	ldrb.w	r3, [r5], #1
1a005296:	b10b      	cbz	r3, 1a00529c <_vfiprintf_r+0x50>
1a005298:	2b25      	cmp	r3, #37	; 0x25
1a00529a:	d154      	bne.n	1a005346 <_vfiprintf_r+0xfa>
1a00529c:	ebb8 0a07 	subs.w	sl, r8, r7
1a0052a0:	d00b      	beq.n	1a0052ba <_vfiprintf_r+0x6e>
1a0052a2:	4653      	mov	r3, sl
1a0052a4:	463a      	mov	r2, r7
1a0052a6:	4621      	mov	r1, r4
1a0052a8:	4630      	mov	r0, r6
1a0052aa:	f7ff ffbc 	bl	1a005226 <__sfputs_r>
1a0052ae:	3001      	adds	r0, #1
1a0052b0:	f000 80c2 	beq.w	1a005438 <_vfiprintf_r+0x1ec>
1a0052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0052b6:	4453      	add	r3, sl
1a0052b8:	9309      	str	r3, [sp, #36]	; 0x24
1a0052ba:	f898 3000 	ldrb.w	r3, [r8]
1a0052be:	2b00      	cmp	r3, #0
1a0052c0:	f000 80ba 	beq.w	1a005438 <_vfiprintf_r+0x1ec>
1a0052c4:	2300      	movs	r3, #0
1a0052c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0052ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0052ce:	9304      	str	r3, [sp, #16]
1a0052d0:	9307      	str	r3, [sp, #28]
1a0052d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0052d6:	931a      	str	r3, [sp, #104]	; 0x68
1a0052d8:	46a8      	mov	r8, r5
1a0052da:	2205      	movs	r2, #5
1a0052dc:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0052e0:	485e      	ldr	r0, [pc, #376]	; (1a00545c <_vfiprintf_r+0x210>)
1a0052e2:	f000 fa8d 	bl	1a005800 <memchr>
1a0052e6:	9b04      	ldr	r3, [sp, #16]
1a0052e8:	bb78      	cbnz	r0, 1a00534a <_vfiprintf_r+0xfe>
1a0052ea:	06d9      	lsls	r1, r3, #27
1a0052ec:	bf44      	itt	mi
1a0052ee:	2220      	movmi	r2, #32
1a0052f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0052f4:	071a      	lsls	r2, r3, #28
1a0052f6:	bf44      	itt	mi
1a0052f8:	222b      	movmi	r2, #43	; 0x2b
1a0052fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a0052fe:	782a      	ldrb	r2, [r5, #0]
1a005300:	2a2a      	cmp	r2, #42	; 0x2a
1a005302:	d02a      	beq.n	1a00535a <_vfiprintf_r+0x10e>
1a005304:	9a07      	ldr	r2, [sp, #28]
1a005306:	46a8      	mov	r8, r5
1a005308:	2000      	movs	r0, #0
1a00530a:	250a      	movs	r5, #10
1a00530c:	4641      	mov	r1, r8
1a00530e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a005312:	3b30      	subs	r3, #48	; 0x30
1a005314:	2b09      	cmp	r3, #9
1a005316:	d969      	bls.n	1a0053ec <_vfiprintf_r+0x1a0>
1a005318:	b360      	cbz	r0, 1a005374 <_vfiprintf_r+0x128>
1a00531a:	e024      	b.n	1a005366 <_vfiprintf_r+0x11a>
1a00531c:	4b50      	ldr	r3, [pc, #320]	; (1a005460 <_vfiprintf_r+0x214>)
1a00531e:	429c      	cmp	r4, r3
1a005320:	d101      	bne.n	1a005326 <_vfiprintf_r+0xda>
1a005322:	68b4      	ldr	r4, [r6, #8]
1a005324:	e7a2      	b.n	1a00526c <_vfiprintf_r+0x20>
1a005326:	4b4f      	ldr	r3, [pc, #316]	; (1a005464 <_vfiprintf_r+0x218>)
1a005328:	429c      	cmp	r4, r3
1a00532a:	bf08      	it	eq
1a00532c:	68f4      	ldreq	r4, [r6, #12]
1a00532e:	e79d      	b.n	1a00526c <_vfiprintf_r+0x20>
1a005330:	4621      	mov	r1, r4
1a005332:	4630      	mov	r0, r6
1a005334:	f7ff fe8c 	bl	1a005050 <__swsetup_r>
1a005338:	2800      	cmp	r0, #0
1a00533a:	d09d      	beq.n	1a005278 <_vfiprintf_r+0x2c>
1a00533c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005340:	b01d      	add	sp, #116	; 0x74
1a005342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005346:	46a8      	mov	r8, r5
1a005348:	e7a2      	b.n	1a005290 <_vfiprintf_r+0x44>
1a00534a:	4a44      	ldr	r2, [pc, #272]	; (1a00545c <_vfiprintf_r+0x210>)
1a00534c:	1a80      	subs	r0, r0, r2
1a00534e:	fa0b f000 	lsl.w	r0, fp, r0
1a005352:	4318      	orrs	r0, r3
1a005354:	9004      	str	r0, [sp, #16]
1a005356:	4645      	mov	r5, r8
1a005358:	e7be      	b.n	1a0052d8 <_vfiprintf_r+0x8c>
1a00535a:	9a03      	ldr	r2, [sp, #12]
1a00535c:	1d11      	adds	r1, r2, #4
1a00535e:	6812      	ldr	r2, [r2, #0]
1a005360:	9103      	str	r1, [sp, #12]
1a005362:	2a00      	cmp	r2, #0
1a005364:	db01      	blt.n	1a00536a <_vfiprintf_r+0x11e>
1a005366:	9207      	str	r2, [sp, #28]
1a005368:	e004      	b.n	1a005374 <_vfiprintf_r+0x128>
1a00536a:	4252      	negs	r2, r2
1a00536c:	f043 0302 	orr.w	r3, r3, #2
1a005370:	9207      	str	r2, [sp, #28]
1a005372:	9304      	str	r3, [sp, #16]
1a005374:	f898 3000 	ldrb.w	r3, [r8]
1a005378:	2b2e      	cmp	r3, #46	; 0x2e
1a00537a:	d10e      	bne.n	1a00539a <_vfiprintf_r+0x14e>
1a00537c:	f898 3001 	ldrb.w	r3, [r8, #1]
1a005380:	2b2a      	cmp	r3, #42	; 0x2a
1a005382:	d138      	bne.n	1a0053f6 <_vfiprintf_r+0x1aa>
1a005384:	9b03      	ldr	r3, [sp, #12]
1a005386:	1d1a      	adds	r2, r3, #4
1a005388:	681b      	ldr	r3, [r3, #0]
1a00538a:	9203      	str	r2, [sp, #12]
1a00538c:	2b00      	cmp	r3, #0
1a00538e:	bfb8      	it	lt
1a005390:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a005394:	f108 0802 	add.w	r8, r8, #2
1a005398:	9305      	str	r3, [sp, #20]
1a00539a:	4d33      	ldr	r5, [pc, #204]	; (1a005468 <_vfiprintf_r+0x21c>)
1a00539c:	f898 1000 	ldrb.w	r1, [r8]
1a0053a0:	2203      	movs	r2, #3
1a0053a2:	4628      	mov	r0, r5
1a0053a4:	f000 fa2c 	bl	1a005800 <memchr>
1a0053a8:	b140      	cbz	r0, 1a0053bc <_vfiprintf_r+0x170>
1a0053aa:	2340      	movs	r3, #64	; 0x40
1a0053ac:	1b40      	subs	r0, r0, r5
1a0053ae:	fa03 f000 	lsl.w	r0, r3, r0
1a0053b2:	9b04      	ldr	r3, [sp, #16]
1a0053b4:	4303      	orrs	r3, r0
1a0053b6:	f108 0801 	add.w	r8, r8, #1
1a0053ba:	9304      	str	r3, [sp, #16]
1a0053bc:	f898 1000 	ldrb.w	r1, [r8]
1a0053c0:	482a      	ldr	r0, [pc, #168]	; (1a00546c <_vfiprintf_r+0x220>)
1a0053c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0053c6:	2206      	movs	r2, #6
1a0053c8:	f108 0701 	add.w	r7, r8, #1
1a0053cc:	f000 fa18 	bl	1a005800 <memchr>
1a0053d0:	2800      	cmp	r0, #0
1a0053d2:	d037      	beq.n	1a005444 <_vfiprintf_r+0x1f8>
1a0053d4:	4b26      	ldr	r3, [pc, #152]	; (1a005470 <_vfiprintf_r+0x224>)
1a0053d6:	bb1b      	cbnz	r3, 1a005420 <_vfiprintf_r+0x1d4>
1a0053d8:	9b03      	ldr	r3, [sp, #12]
1a0053da:	3307      	adds	r3, #7
1a0053dc:	f023 0307 	bic.w	r3, r3, #7
1a0053e0:	3308      	adds	r3, #8
1a0053e2:	9303      	str	r3, [sp, #12]
1a0053e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053e6:	444b      	add	r3, r9
1a0053e8:	9309      	str	r3, [sp, #36]	; 0x24
1a0053ea:	e750      	b.n	1a00528e <_vfiprintf_r+0x42>
1a0053ec:	fb05 3202 	mla	r2, r5, r2, r3
1a0053f0:	2001      	movs	r0, #1
1a0053f2:	4688      	mov	r8, r1
1a0053f4:	e78a      	b.n	1a00530c <_vfiprintf_r+0xc0>
1a0053f6:	2300      	movs	r3, #0
1a0053f8:	f108 0801 	add.w	r8, r8, #1
1a0053fc:	9305      	str	r3, [sp, #20]
1a0053fe:	4619      	mov	r1, r3
1a005400:	250a      	movs	r5, #10
1a005402:	4640      	mov	r0, r8
1a005404:	f810 2b01 	ldrb.w	r2, [r0], #1
1a005408:	3a30      	subs	r2, #48	; 0x30
1a00540a:	2a09      	cmp	r2, #9
1a00540c:	d903      	bls.n	1a005416 <_vfiprintf_r+0x1ca>
1a00540e:	2b00      	cmp	r3, #0
1a005410:	d0c3      	beq.n	1a00539a <_vfiprintf_r+0x14e>
1a005412:	9105      	str	r1, [sp, #20]
1a005414:	e7c1      	b.n	1a00539a <_vfiprintf_r+0x14e>
1a005416:	fb05 2101 	mla	r1, r5, r1, r2
1a00541a:	2301      	movs	r3, #1
1a00541c:	4680      	mov	r8, r0
1a00541e:	e7f0      	b.n	1a005402 <_vfiprintf_r+0x1b6>
1a005420:	ab03      	add	r3, sp, #12
1a005422:	9300      	str	r3, [sp, #0]
1a005424:	4622      	mov	r2, r4
1a005426:	4b13      	ldr	r3, [pc, #76]	; (1a005474 <_vfiprintf_r+0x228>)
1a005428:	a904      	add	r1, sp, #16
1a00542a:	4630      	mov	r0, r6
1a00542c:	f3af 8000 	nop.w
1a005430:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a005434:	4681      	mov	r9, r0
1a005436:	d1d5      	bne.n	1a0053e4 <_vfiprintf_r+0x198>
1a005438:	89a3      	ldrh	r3, [r4, #12]
1a00543a:	065b      	lsls	r3, r3, #25
1a00543c:	f53f af7e 	bmi.w	1a00533c <_vfiprintf_r+0xf0>
1a005440:	9809      	ldr	r0, [sp, #36]	; 0x24
1a005442:	e77d      	b.n	1a005340 <_vfiprintf_r+0xf4>
1a005444:	ab03      	add	r3, sp, #12
1a005446:	9300      	str	r3, [sp, #0]
1a005448:	4622      	mov	r2, r4
1a00544a:	4b0a      	ldr	r3, [pc, #40]	; (1a005474 <_vfiprintf_r+0x228>)
1a00544c:	a904      	add	r1, sp, #16
1a00544e:	4630      	mov	r0, r6
1a005450:	f000 f888 	bl	1a005564 <_printf_i>
1a005454:	e7ec      	b.n	1a005430 <_vfiprintf_r+0x1e4>
1a005456:	bf00      	nop
1a005458:	1a005d58 	.word	0x1a005d58
1a00545c:	1a005d9c 	.word	0x1a005d9c
1a005460:	1a005d78 	.word	0x1a005d78
1a005464:	1a005d38 	.word	0x1a005d38
1a005468:	1a005da2 	.word	0x1a005da2
1a00546c:	1a005da6 	.word	0x1a005da6
1a005470:	00000000 	.word	0x00000000
1a005474:	1a005227 	.word	0x1a005227

1a005478 <_printf_common>:
1a005478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00547c:	4691      	mov	r9, r2
1a00547e:	461f      	mov	r7, r3
1a005480:	688a      	ldr	r2, [r1, #8]
1a005482:	690b      	ldr	r3, [r1, #16]
1a005484:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a005488:	4293      	cmp	r3, r2
1a00548a:	bfb8      	it	lt
1a00548c:	4613      	movlt	r3, r2
1a00548e:	f8c9 3000 	str.w	r3, [r9]
1a005492:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a005496:	4606      	mov	r6, r0
1a005498:	460c      	mov	r4, r1
1a00549a:	b112      	cbz	r2, 1a0054a2 <_printf_common+0x2a>
1a00549c:	3301      	adds	r3, #1
1a00549e:	f8c9 3000 	str.w	r3, [r9]
1a0054a2:	6823      	ldr	r3, [r4, #0]
1a0054a4:	0699      	lsls	r1, r3, #26
1a0054a6:	bf42      	ittt	mi
1a0054a8:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0054ac:	3302      	addmi	r3, #2
1a0054ae:	f8c9 3000 	strmi.w	r3, [r9]
1a0054b2:	6825      	ldr	r5, [r4, #0]
1a0054b4:	f015 0506 	ands.w	r5, r5, #6
1a0054b8:	d107      	bne.n	1a0054ca <_printf_common+0x52>
1a0054ba:	f104 0a19 	add.w	sl, r4, #25
1a0054be:	68e3      	ldr	r3, [r4, #12]
1a0054c0:	f8d9 2000 	ldr.w	r2, [r9]
1a0054c4:	1a9b      	subs	r3, r3, r2
1a0054c6:	42ab      	cmp	r3, r5
1a0054c8:	dc28      	bgt.n	1a00551c <_printf_common+0xa4>
1a0054ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0054ce:	6822      	ldr	r2, [r4, #0]
1a0054d0:	3300      	adds	r3, #0
1a0054d2:	bf18      	it	ne
1a0054d4:	2301      	movne	r3, #1
1a0054d6:	0692      	lsls	r2, r2, #26
1a0054d8:	d42d      	bmi.n	1a005536 <_printf_common+0xbe>
1a0054da:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0054de:	4639      	mov	r1, r7
1a0054e0:	4630      	mov	r0, r6
1a0054e2:	47c0      	blx	r8
1a0054e4:	3001      	adds	r0, #1
1a0054e6:	d020      	beq.n	1a00552a <_printf_common+0xb2>
1a0054e8:	6823      	ldr	r3, [r4, #0]
1a0054ea:	68e5      	ldr	r5, [r4, #12]
1a0054ec:	f8d9 2000 	ldr.w	r2, [r9]
1a0054f0:	f003 0306 	and.w	r3, r3, #6
1a0054f4:	2b04      	cmp	r3, #4
1a0054f6:	bf08      	it	eq
1a0054f8:	1aad      	subeq	r5, r5, r2
1a0054fa:	68a3      	ldr	r3, [r4, #8]
1a0054fc:	6922      	ldr	r2, [r4, #16]
1a0054fe:	bf0c      	ite	eq
1a005500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a005504:	2500      	movne	r5, #0
1a005506:	4293      	cmp	r3, r2
1a005508:	bfc4      	itt	gt
1a00550a:	1a9b      	subgt	r3, r3, r2
1a00550c:	18ed      	addgt	r5, r5, r3
1a00550e:	f04f 0900 	mov.w	r9, #0
1a005512:	341a      	adds	r4, #26
1a005514:	454d      	cmp	r5, r9
1a005516:	d11a      	bne.n	1a00554e <_printf_common+0xd6>
1a005518:	2000      	movs	r0, #0
1a00551a:	e008      	b.n	1a00552e <_printf_common+0xb6>
1a00551c:	2301      	movs	r3, #1
1a00551e:	4652      	mov	r2, sl
1a005520:	4639      	mov	r1, r7
1a005522:	4630      	mov	r0, r6
1a005524:	47c0      	blx	r8
1a005526:	3001      	adds	r0, #1
1a005528:	d103      	bne.n	1a005532 <_printf_common+0xba>
1a00552a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00552e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a005532:	3501      	adds	r5, #1
1a005534:	e7c3      	b.n	1a0054be <_printf_common+0x46>
1a005536:	18e1      	adds	r1, r4, r3
1a005538:	1c5a      	adds	r2, r3, #1
1a00553a:	2030      	movs	r0, #48	; 0x30
1a00553c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a005540:	4422      	add	r2, r4
1a005542:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a005546:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00554a:	3302      	adds	r3, #2
1a00554c:	e7c5      	b.n	1a0054da <_printf_common+0x62>
1a00554e:	2301      	movs	r3, #1
1a005550:	4622      	mov	r2, r4
1a005552:	4639      	mov	r1, r7
1a005554:	4630      	mov	r0, r6
1a005556:	47c0      	blx	r8
1a005558:	3001      	adds	r0, #1
1a00555a:	d0e6      	beq.n	1a00552a <_printf_common+0xb2>
1a00555c:	f109 0901 	add.w	r9, r9, #1
1a005560:	e7d8      	b.n	1a005514 <_printf_common+0x9c>
1a005562:	Address 0x000000001a005562 is out of bounds.


1a005564 <_printf_i>:
1a005564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a005568:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a00556c:	460c      	mov	r4, r1
1a00556e:	7e09      	ldrb	r1, [r1, #24]
1a005570:	b085      	sub	sp, #20
1a005572:	296e      	cmp	r1, #110	; 0x6e
1a005574:	4617      	mov	r7, r2
1a005576:	4606      	mov	r6, r0
1a005578:	4698      	mov	r8, r3
1a00557a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00557c:	f000 80b3 	beq.w	1a0056e6 <_printf_i+0x182>
1a005580:	d822      	bhi.n	1a0055c8 <_printf_i+0x64>
1a005582:	2963      	cmp	r1, #99	; 0x63
1a005584:	d036      	beq.n	1a0055f4 <_printf_i+0x90>
1a005586:	d80a      	bhi.n	1a00559e <_printf_i+0x3a>
1a005588:	2900      	cmp	r1, #0
1a00558a:	f000 80b9 	beq.w	1a005700 <_printf_i+0x19c>
1a00558e:	2958      	cmp	r1, #88	; 0x58
1a005590:	f000 8083 	beq.w	1a00569a <_printf_i+0x136>
1a005594:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005598:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a00559c:	e032      	b.n	1a005604 <_printf_i+0xa0>
1a00559e:	2964      	cmp	r1, #100	; 0x64
1a0055a0:	d001      	beq.n	1a0055a6 <_printf_i+0x42>
1a0055a2:	2969      	cmp	r1, #105	; 0x69
1a0055a4:	d1f6      	bne.n	1a005594 <_printf_i+0x30>
1a0055a6:	6820      	ldr	r0, [r4, #0]
1a0055a8:	6813      	ldr	r3, [r2, #0]
1a0055aa:	0605      	lsls	r5, r0, #24
1a0055ac:	f103 0104 	add.w	r1, r3, #4
1a0055b0:	d52a      	bpl.n	1a005608 <_printf_i+0xa4>
1a0055b2:	681b      	ldr	r3, [r3, #0]
1a0055b4:	6011      	str	r1, [r2, #0]
1a0055b6:	2b00      	cmp	r3, #0
1a0055b8:	da03      	bge.n	1a0055c2 <_printf_i+0x5e>
1a0055ba:	222d      	movs	r2, #45	; 0x2d
1a0055bc:	425b      	negs	r3, r3
1a0055be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0055c2:	486f      	ldr	r0, [pc, #444]	; (1a005780 <_printf_i+0x21c>)
1a0055c4:	220a      	movs	r2, #10
1a0055c6:	e039      	b.n	1a00563c <_printf_i+0xd8>
1a0055c8:	2973      	cmp	r1, #115	; 0x73
1a0055ca:	f000 809d 	beq.w	1a005708 <_printf_i+0x1a4>
1a0055ce:	d808      	bhi.n	1a0055e2 <_printf_i+0x7e>
1a0055d0:	296f      	cmp	r1, #111	; 0x6f
1a0055d2:	d020      	beq.n	1a005616 <_printf_i+0xb2>
1a0055d4:	2970      	cmp	r1, #112	; 0x70
1a0055d6:	d1dd      	bne.n	1a005594 <_printf_i+0x30>
1a0055d8:	6823      	ldr	r3, [r4, #0]
1a0055da:	f043 0320 	orr.w	r3, r3, #32
1a0055de:	6023      	str	r3, [r4, #0]
1a0055e0:	e003      	b.n	1a0055ea <_printf_i+0x86>
1a0055e2:	2975      	cmp	r1, #117	; 0x75
1a0055e4:	d017      	beq.n	1a005616 <_printf_i+0xb2>
1a0055e6:	2978      	cmp	r1, #120	; 0x78
1a0055e8:	d1d4      	bne.n	1a005594 <_printf_i+0x30>
1a0055ea:	2378      	movs	r3, #120	; 0x78
1a0055ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0055f0:	4864      	ldr	r0, [pc, #400]	; (1a005784 <_printf_i+0x220>)
1a0055f2:	e055      	b.n	1a0056a0 <_printf_i+0x13c>
1a0055f4:	6813      	ldr	r3, [r2, #0]
1a0055f6:	1d19      	adds	r1, r3, #4
1a0055f8:	681b      	ldr	r3, [r3, #0]
1a0055fa:	6011      	str	r1, [r2, #0]
1a0055fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a005600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a005604:	2301      	movs	r3, #1
1a005606:	e08c      	b.n	1a005722 <_printf_i+0x1be>
1a005608:	681b      	ldr	r3, [r3, #0]
1a00560a:	6011      	str	r1, [r2, #0]
1a00560c:	f010 0f40 	tst.w	r0, #64	; 0x40
1a005610:	bf18      	it	ne
1a005612:	b21b      	sxthne	r3, r3
1a005614:	e7cf      	b.n	1a0055b6 <_printf_i+0x52>
1a005616:	6813      	ldr	r3, [r2, #0]
1a005618:	6825      	ldr	r5, [r4, #0]
1a00561a:	1d18      	adds	r0, r3, #4
1a00561c:	6010      	str	r0, [r2, #0]
1a00561e:	0628      	lsls	r0, r5, #24
1a005620:	d501      	bpl.n	1a005626 <_printf_i+0xc2>
1a005622:	681b      	ldr	r3, [r3, #0]
1a005624:	e002      	b.n	1a00562c <_printf_i+0xc8>
1a005626:	0668      	lsls	r0, r5, #25
1a005628:	d5fb      	bpl.n	1a005622 <_printf_i+0xbe>
1a00562a:	881b      	ldrh	r3, [r3, #0]
1a00562c:	4854      	ldr	r0, [pc, #336]	; (1a005780 <_printf_i+0x21c>)
1a00562e:	296f      	cmp	r1, #111	; 0x6f
1a005630:	bf14      	ite	ne
1a005632:	220a      	movne	r2, #10
1a005634:	2208      	moveq	r2, #8
1a005636:	2100      	movs	r1, #0
1a005638:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a00563c:	6865      	ldr	r5, [r4, #4]
1a00563e:	60a5      	str	r5, [r4, #8]
1a005640:	2d00      	cmp	r5, #0
1a005642:	f2c0 8095 	blt.w	1a005770 <_printf_i+0x20c>
1a005646:	6821      	ldr	r1, [r4, #0]
1a005648:	f021 0104 	bic.w	r1, r1, #4
1a00564c:	6021      	str	r1, [r4, #0]
1a00564e:	2b00      	cmp	r3, #0
1a005650:	d13d      	bne.n	1a0056ce <_printf_i+0x16a>
1a005652:	2d00      	cmp	r5, #0
1a005654:	f040 808e 	bne.w	1a005774 <_printf_i+0x210>
1a005658:	4665      	mov	r5, ip
1a00565a:	2a08      	cmp	r2, #8
1a00565c:	d10b      	bne.n	1a005676 <_printf_i+0x112>
1a00565e:	6823      	ldr	r3, [r4, #0]
1a005660:	07db      	lsls	r3, r3, #31
1a005662:	d508      	bpl.n	1a005676 <_printf_i+0x112>
1a005664:	6923      	ldr	r3, [r4, #16]
1a005666:	6862      	ldr	r2, [r4, #4]
1a005668:	429a      	cmp	r2, r3
1a00566a:	bfde      	ittt	le
1a00566c:	2330      	movle	r3, #48	; 0x30
1a00566e:	f805 3c01 	strble.w	r3, [r5, #-1]
1a005672:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a005676:	ebac 0305 	sub.w	r3, ip, r5
1a00567a:	6123      	str	r3, [r4, #16]
1a00567c:	f8cd 8000 	str.w	r8, [sp]
1a005680:	463b      	mov	r3, r7
1a005682:	aa03      	add	r2, sp, #12
1a005684:	4621      	mov	r1, r4
1a005686:	4630      	mov	r0, r6
1a005688:	f7ff fef6 	bl	1a005478 <_printf_common>
1a00568c:	3001      	adds	r0, #1
1a00568e:	d14d      	bne.n	1a00572c <_printf_i+0x1c8>
1a005690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005694:	b005      	add	sp, #20
1a005696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00569a:	4839      	ldr	r0, [pc, #228]	; (1a005780 <_printf_i+0x21c>)
1a00569c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0056a0:	6813      	ldr	r3, [r2, #0]
1a0056a2:	6821      	ldr	r1, [r4, #0]
1a0056a4:	1d1d      	adds	r5, r3, #4
1a0056a6:	681b      	ldr	r3, [r3, #0]
1a0056a8:	6015      	str	r5, [r2, #0]
1a0056aa:	060a      	lsls	r2, r1, #24
1a0056ac:	d50b      	bpl.n	1a0056c6 <_printf_i+0x162>
1a0056ae:	07ca      	lsls	r2, r1, #31
1a0056b0:	bf44      	itt	mi
1a0056b2:	f041 0120 	orrmi.w	r1, r1, #32
1a0056b6:	6021      	strmi	r1, [r4, #0]
1a0056b8:	b91b      	cbnz	r3, 1a0056c2 <_printf_i+0x15e>
1a0056ba:	6822      	ldr	r2, [r4, #0]
1a0056bc:	f022 0220 	bic.w	r2, r2, #32
1a0056c0:	6022      	str	r2, [r4, #0]
1a0056c2:	2210      	movs	r2, #16
1a0056c4:	e7b7      	b.n	1a005636 <_printf_i+0xd2>
1a0056c6:	064d      	lsls	r5, r1, #25
1a0056c8:	bf48      	it	mi
1a0056ca:	b29b      	uxthmi	r3, r3
1a0056cc:	e7ef      	b.n	1a0056ae <_printf_i+0x14a>
1a0056ce:	4665      	mov	r5, ip
1a0056d0:	fbb3 f1f2 	udiv	r1, r3, r2
1a0056d4:	fb02 3311 	mls	r3, r2, r1, r3
1a0056d8:	5cc3      	ldrb	r3, [r0, r3]
1a0056da:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a0056de:	460b      	mov	r3, r1
1a0056e0:	2900      	cmp	r1, #0
1a0056e2:	d1f5      	bne.n	1a0056d0 <_printf_i+0x16c>
1a0056e4:	e7b9      	b.n	1a00565a <_printf_i+0xf6>
1a0056e6:	6813      	ldr	r3, [r2, #0]
1a0056e8:	6825      	ldr	r5, [r4, #0]
1a0056ea:	6961      	ldr	r1, [r4, #20]
1a0056ec:	1d18      	adds	r0, r3, #4
1a0056ee:	6010      	str	r0, [r2, #0]
1a0056f0:	0628      	lsls	r0, r5, #24
1a0056f2:	681b      	ldr	r3, [r3, #0]
1a0056f4:	d501      	bpl.n	1a0056fa <_printf_i+0x196>
1a0056f6:	6019      	str	r1, [r3, #0]
1a0056f8:	e002      	b.n	1a005700 <_printf_i+0x19c>
1a0056fa:	066a      	lsls	r2, r5, #25
1a0056fc:	d5fb      	bpl.n	1a0056f6 <_printf_i+0x192>
1a0056fe:	8019      	strh	r1, [r3, #0]
1a005700:	2300      	movs	r3, #0
1a005702:	6123      	str	r3, [r4, #16]
1a005704:	4665      	mov	r5, ip
1a005706:	e7b9      	b.n	1a00567c <_printf_i+0x118>
1a005708:	6813      	ldr	r3, [r2, #0]
1a00570a:	1d19      	adds	r1, r3, #4
1a00570c:	6011      	str	r1, [r2, #0]
1a00570e:	681d      	ldr	r5, [r3, #0]
1a005710:	6862      	ldr	r2, [r4, #4]
1a005712:	2100      	movs	r1, #0
1a005714:	4628      	mov	r0, r5
1a005716:	f000 f873 	bl	1a005800 <memchr>
1a00571a:	b108      	cbz	r0, 1a005720 <_printf_i+0x1bc>
1a00571c:	1b40      	subs	r0, r0, r5
1a00571e:	6060      	str	r0, [r4, #4]
1a005720:	6863      	ldr	r3, [r4, #4]
1a005722:	6123      	str	r3, [r4, #16]
1a005724:	2300      	movs	r3, #0
1a005726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00572a:	e7a7      	b.n	1a00567c <_printf_i+0x118>
1a00572c:	6923      	ldr	r3, [r4, #16]
1a00572e:	462a      	mov	r2, r5
1a005730:	4639      	mov	r1, r7
1a005732:	4630      	mov	r0, r6
1a005734:	47c0      	blx	r8
1a005736:	3001      	adds	r0, #1
1a005738:	d0aa      	beq.n	1a005690 <_printf_i+0x12c>
1a00573a:	6823      	ldr	r3, [r4, #0]
1a00573c:	079b      	lsls	r3, r3, #30
1a00573e:	d413      	bmi.n	1a005768 <_printf_i+0x204>
1a005740:	68e0      	ldr	r0, [r4, #12]
1a005742:	9b03      	ldr	r3, [sp, #12]
1a005744:	4298      	cmp	r0, r3
1a005746:	bfb8      	it	lt
1a005748:	4618      	movlt	r0, r3
1a00574a:	e7a3      	b.n	1a005694 <_printf_i+0x130>
1a00574c:	2301      	movs	r3, #1
1a00574e:	464a      	mov	r2, r9
1a005750:	4639      	mov	r1, r7
1a005752:	4630      	mov	r0, r6
1a005754:	47c0      	blx	r8
1a005756:	3001      	adds	r0, #1
1a005758:	d09a      	beq.n	1a005690 <_printf_i+0x12c>
1a00575a:	3501      	adds	r5, #1
1a00575c:	68e3      	ldr	r3, [r4, #12]
1a00575e:	9a03      	ldr	r2, [sp, #12]
1a005760:	1a9b      	subs	r3, r3, r2
1a005762:	42ab      	cmp	r3, r5
1a005764:	dcf2      	bgt.n	1a00574c <_printf_i+0x1e8>
1a005766:	e7eb      	b.n	1a005740 <_printf_i+0x1dc>
1a005768:	2500      	movs	r5, #0
1a00576a:	f104 0919 	add.w	r9, r4, #25
1a00576e:	e7f5      	b.n	1a00575c <_printf_i+0x1f8>
1a005770:	2b00      	cmp	r3, #0
1a005772:	d1ac      	bne.n	1a0056ce <_printf_i+0x16a>
1a005774:	7803      	ldrb	r3, [r0, #0]
1a005776:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00577a:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a00577e:	e76c      	b.n	1a00565a <_printf_i+0xf6>
1a005780:	1a005dad 	.word	0x1a005dad
1a005784:	1a005dbe 	.word	0x1a005dbe

1a005788 <_putc_r>:
1a005788:	b570      	push	{r4, r5, r6, lr}
1a00578a:	460d      	mov	r5, r1
1a00578c:	4614      	mov	r4, r2
1a00578e:	4606      	mov	r6, r0
1a005790:	b118      	cbz	r0, 1a00579a <_putc_r+0x12>
1a005792:	6983      	ldr	r3, [r0, #24]
1a005794:	b90b      	cbnz	r3, 1a00579a <_putc_r+0x12>
1a005796:	f7ff f9cb 	bl	1a004b30 <__sinit>
1a00579a:	4b13      	ldr	r3, [pc, #76]	; (1a0057e8 <_putc_r+0x60>)
1a00579c:	429c      	cmp	r4, r3
1a00579e:	d112      	bne.n	1a0057c6 <_putc_r+0x3e>
1a0057a0:	6874      	ldr	r4, [r6, #4]
1a0057a2:	68a3      	ldr	r3, [r4, #8]
1a0057a4:	3b01      	subs	r3, #1
1a0057a6:	2b00      	cmp	r3, #0
1a0057a8:	60a3      	str	r3, [r4, #8]
1a0057aa:	da16      	bge.n	1a0057da <_putc_r+0x52>
1a0057ac:	69a2      	ldr	r2, [r4, #24]
1a0057ae:	4293      	cmp	r3, r2
1a0057b0:	db02      	blt.n	1a0057b8 <_putc_r+0x30>
1a0057b2:	b2eb      	uxtb	r3, r5
1a0057b4:	2b0a      	cmp	r3, #10
1a0057b6:	d110      	bne.n	1a0057da <_putc_r+0x52>
1a0057b8:	4622      	mov	r2, r4
1a0057ba:	4629      	mov	r1, r5
1a0057bc:	4630      	mov	r0, r6
1a0057be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1a0057c2:	f7ff bbf3 	b.w	1a004fac <__swbuf_r>
1a0057c6:	4b09      	ldr	r3, [pc, #36]	; (1a0057ec <_putc_r+0x64>)
1a0057c8:	429c      	cmp	r4, r3
1a0057ca:	d101      	bne.n	1a0057d0 <_putc_r+0x48>
1a0057cc:	68b4      	ldr	r4, [r6, #8]
1a0057ce:	e7e8      	b.n	1a0057a2 <_putc_r+0x1a>
1a0057d0:	4b07      	ldr	r3, [pc, #28]	; (1a0057f0 <_putc_r+0x68>)
1a0057d2:	429c      	cmp	r4, r3
1a0057d4:	bf08      	it	eq
1a0057d6:	68f4      	ldreq	r4, [r6, #12]
1a0057d8:	e7e3      	b.n	1a0057a2 <_putc_r+0x1a>
1a0057da:	6823      	ldr	r3, [r4, #0]
1a0057dc:	1c5a      	adds	r2, r3, #1
1a0057de:	6022      	str	r2, [r4, #0]
1a0057e0:	701d      	strb	r5, [r3, #0]
1a0057e2:	b2e8      	uxtb	r0, r5
1a0057e4:	bd70      	pop	{r4, r5, r6, pc}
1a0057e6:	bf00      	nop
1a0057e8:	1a005d58 	.word	0x1a005d58
1a0057ec:	1a005d78 	.word	0x1a005d78
1a0057f0:	1a005d38 	.word	0x1a005d38
1a0057f4:	ffffffff 	.word	0xffffffff
1a0057f8:	ffffffff 	.word	0xffffffff
1a0057fc:	ffffffff 	.word	0xffffffff

1a005800 <memchr>:
1a005800:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a005804:	2a10      	cmp	r2, #16
1a005806:	db2b      	blt.n	1a005860 <memchr+0x60>
1a005808:	f010 0f07 	tst.w	r0, #7
1a00580c:	d008      	beq.n	1a005820 <memchr+0x20>
1a00580e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005812:	3a01      	subs	r2, #1
1a005814:	428b      	cmp	r3, r1
1a005816:	d02d      	beq.n	1a005874 <memchr+0x74>
1a005818:	f010 0f07 	tst.w	r0, #7
1a00581c:	b342      	cbz	r2, 1a005870 <memchr+0x70>
1a00581e:	d1f6      	bne.n	1a00580e <memchr+0xe>
1a005820:	b4f0      	push	{r4, r5, r6, r7}
1a005822:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a005826:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00582a:	f022 0407 	bic.w	r4, r2, #7
1a00582e:	f07f 0700 	mvns.w	r7, #0
1a005832:	2300      	movs	r3, #0
1a005834:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a005838:	3c08      	subs	r4, #8
1a00583a:	ea85 0501 	eor.w	r5, r5, r1
1a00583e:	ea86 0601 	eor.w	r6, r6, r1
1a005842:	fa85 f547 	uadd8	r5, r5, r7
1a005846:	faa3 f587 	sel	r5, r3, r7
1a00584a:	fa86 f647 	uadd8	r6, r6, r7
1a00584e:	faa5 f687 	sel	r6, r5, r7
1a005852:	b98e      	cbnz	r6, 1a005878 <memchr+0x78>
1a005854:	d1ee      	bne.n	1a005834 <memchr+0x34>
1a005856:	bcf0      	pop	{r4, r5, r6, r7}
1a005858:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00585c:	f002 0207 	and.w	r2, r2, #7
1a005860:	b132      	cbz	r2, 1a005870 <memchr+0x70>
1a005862:	f810 3b01 	ldrb.w	r3, [r0], #1
1a005866:	3a01      	subs	r2, #1
1a005868:	ea83 0301 	eor.w	r3, r3, r1
1a00586c:	b113      	cbz	r3, 1a005874 <memchr+0x74>
1a00586e:	d1f8      	bne.n	1a005862 <memchr+0x62>
1a005870:	2000      	movs	r0, #0
1a005872:	4770      	bx	lr
1a005874:	3801      	subs	r0, #1
1a005876:	4770      	bx	lr
1a005878:	2d00      	cmp	r5, #0
1a00587a:	bf06      	itte	eq
1a00587c:	4635      	moveq	r5, r6
1a00587e:	3803      	subeq	r0, #3
1a005880:	3807      	subne	r0, #7
1a005882:	f015 0f01 	tst.w	r5, #1
1a005886:	d107      	bne.n	1a005898 <memchr+0x98>
1a005888:	3001      	adds	r0, #1
1a00588a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00588e:	bf02      	ittt	eq
1a005890:	3001      	addeq	r0, #1
1a005892:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a005896:	3001      	addeq	r0, #1
1a005898:	bcf0      	pop	{r4, r5, r6, r7}
1a00589a:	3801      	subs	r0, #1
1a00589c:	4770      	bx	lr
1a00589e:	bf00      	nop
1a0058a0:	6e617641 	.word	0x6e617641
1a0058a4:	646e617a 	.word	0x646e617a
1a0058a8:	25203a6f 	.word	0x25203a6f
1a0058ac:	ffff000a 	.word	0xffff000a
1a0058b0:	61726947 	.word	0x61726947
1a0058b4:	3a6f646e 	.word	0x3a6f646e
1a0058b8:	0a652520 	.word	0x0a652520
1a0058bc:	ffffff00 	.word	0xffffff00
1a0058c0:	61746f52 	.word	0x61746f52
1a0058c4:	3a6f646e 	.word	0x3a6f646e
1a0058c8:	0a662520 	.word	0x0a662520
1a0058cc:	ffffff00 	.word	0xffffff00
1a0058d0:	6172470a 	.word	0x6172470a
1a0058d4:	646e6162 	.word	0x646e6162
1a0058d8:	2079206f 	.word	0x2079206f
1a0058dc:	63656a45 	.word	0x63656a45
1a0058e0:	6e617475 	.word	0x6e617475
1a0058e4:	57206f64 	.word	0x57206f64
1a0058e8:	000a4d42 	.word	0x000a4d42
1a0058ec:	6f746f4d 	.word	0x6f746f4d
1a0058f0:	20736572 	.word	0x20736572
1a0058f4:	61726170 	.word	0x61726170
1a0058f8:	00736f64 	.word	0x00736f64
1a0058fc:	76726573 	.word	0x76726573
1a005900:	6f696369 	.word	0x6f696369
1a005904:	4f4d6544 	.word	0x4f4d6544
1a005908:	45524f54 	.word	0x45524f54
1a00590c:	42575f53 	.word	0x42575f53
1a005910:	0000004d 	.word	0x0000004d
1a005914:	6f746f6d 	.word	0x6f746f6d
1a005918:	61764172 	.word	0x61764172
1a00591c:	72617a6e 	.word	0x72617a6e
1a005920:	00000000 	.word	0x00000000
1a005924:	6f746f6d 	.word	0x6f746f6d
1a005928:	746f5272 	.word	0x746f5272
1a00592c:	00007261 	.word	0x00007261
1a005930:	6f746f6d 	.word	0x6f746f6d
1a005934:	72694772 	.word	0x72694772
1a005938:	ff007261 	.word	0xff007261
1a00593c:	63696e49 	.word	0x63696e49
1a005940:	696c6169 	.word	0x696c6169
1a005944:	646e617a 	.word	0x646e617a
1a005948:	6977206f 	.word	0x6977206f
1a00594c:	62206572 	.word	0x62206572
1a005950:	69646e65 	.word	0x69646e65
1a005954:	6920676e 	.word	0x6920676e
1a005958:	7265746e 	.word	0x7265746e
1a00595c:	207a6166 	.word	0x207a6166
1a005960:	20633269 	.word	0x20633269
1a005964:	000d6335 	.word	0x000d6335
1a005968:	65726f4c 	.word	0x65726f4c
1a00596c:	4220616e 	.word	0x4220616e
1a005970:	615a202e 	.word	0x615a202e
1a005974:	72616863 	.word	0x72616863
1a005978:	63697765 	.word	0x63697765
1a00597c:	4543207a 	.word	0x4543207a
1a005980:	38204553 	.word	0x38204553
1a005984:	43206176 	.word	0x43206176
1a005988:	726f686f 	.word	0x726f686f
1a00598c:	32206574 	.word	0x32206574
1a005990:	0d393130 	.word	0x0d393130
1a005994:	00000000 	.word	0x00000000
1a005998:	76726573 	.word	0x76726573
1a00599c:	6f696369 	.word	0x6f696369
1a0059a0:	654b6544 	.word	0x654b6544
1a0059a4:	64724279 	.word	0x64724279
1a0059a8:	00000000 	.word	0x00000000
1a0059ac:	6b736174 	.word	0x6b736174
1a0059b0:	61726150 	.word	0x61726150
1a0059b4:	65446164 	.word	0x65446164
1a0059b8:	656d4564 	.word	0x656d4564
1a0059bc:	6e656772 	.word	0x6e656772
1a0059c0:	00616963 	.word	0x00616963
1a0059c4:	61726150 	.word	0x61726150
1a0059c8:	64206164 	.word	0x64206164
1a0059cc:	6d452065 	.word	0x6d452065
1a0059d0:	65677265 	.word	0x65677265
1a0059d4:	6169636e 	.word	0x6169636e
1a0059d8:	ff002121 	.word	0xff002121
1a0059dc:	204d4257 	.word	0x204d4257
1a0059e0:	205a424c 	.word	0x205a424c
1a0059e4:	53206e45 	.word	0x53206e45
1a0059e8:	69767265 	.word	0x69767265
1a0059ec:	006f6963 	.word	0x006f6963
1a0059f0:	65704f20 	.word	0x65704f20
1a0059f4:	69636172 	.word	0x69636172
1a0059f8:	3d206e6f 	.word	0x3d206e6f
1a0059fc:	6c615620 	.word	0x6c615620
1a005a00:	0000726f 	.word	0x0000726f
1a005a04:	6e617641 	.word	0x6e617641
1a005a08:	3d72617a 	.word	0x3d72617a
1a005a0c:	00000000 	.word	0x00000000
1a005a10:	61726947 	.word	0x61726947
1a005a14:	00003d72 	.word	0x00003d72
1a005a18:	61746f52 	.word	0x61746f52
1a005a1c:	00003d72 	.word	0x00003d72
1a005a20:	62617247 	.word	0x62617247
1a005a24:	79207261 	.word	0x79207261
1a005a28:	656a4520 	.word	0x656a4520
1a005a2c:	61747563 	.word	0x61747563
1a005a30:	00000072 	.word	0x00000072
1a005a34:	7269570a 	.word	0x7269570a
1a005a38:	65422065 	.word	0x65422065
1a005a3c:	6e69646e 	.word	0x6e69646e
1a005a40:	614d2067 	.word	0x614d2067
1a005a44:	6e696863 	.word	0x6e696863
1a005a48:	00000065 	.word	0x00000065
1a005a4c:	63615a20 	.word	0x63615a20
1a005a50:	65726168 	.word	0x65726168
1a005a54:	7a636977 	.word	0x7a636977
1a005a58:	6f6f5420 	.word	0x6f6f5420
1a005a5c:	ff00736c 	.word	0xff00736c
1a005a60:	454c4449 	.word	0x454c4449
1a005a64:	ffffff00 	.word	0xffffff00
1a005a68:	51726d54 	.word	0x51726d54
1a005a6c:	ffffff00 	.word	0xffffff00
1a005a70:	20726d54 	.word	0x20726d54
1a005a74:	00637653 	.word	0x00637653

1a005a78 <ExtRateIn>:
1a005a78:	00000000                                ....

1a005a7c <GpioButtons>:
1a005a7c:	08000400 09010900                       ........

1a005a84 <GpioLeds>:
1a005a84:	01050005 0e000205 0c010b01              ............

1a005a90 <GpioPorts>:
1a005a90:	03030003 0f050403 05031005 07030603     ................
1a005aa0:	ffff0802                                ....

1a005aa4 <OscRateIn>:
1a005aa4:	00b71b00                                ....

1a005aa8 <InitClkStates>:
1a005aa8:	01010f01                                ....

1a005aac <pinmuxing>:
1a005aac:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a005abc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a005acc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a005adc:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a005aec:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a005afc:	00d50301 00d50401 00160107 00560207     ..............V.
1a005b0c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a005b1c:	00570206                                ..W.

1a005b20 <UART_BClock>:
1a005b20:	01a201c2 01620182                       ......b.

1a005b28 <UART_PClock>:
1a005b28:	00820081 00a200a1 08040201 0f0f0f03     ................
1a005b38:	ffff00ff                                ....

1a005b3c <periph_to_base>:
1a005b3c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005b4c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005b5c:	000100e0 01000100 01200003 00060120     .......... . ...
1a005b6c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005b7c:	01820013 00120182 01a201a2 01c20011     ................
1a005b8c:	001001c2 01e201e2 0202000f 000e0202     ................
1a005b9c:	02220222 0223000d 001c0223              "."...#.#...

1a005ba8 <InitClkStates>:
1a005ba8:	00010100 00010909 0001090a 01010701     ................
1a005bb8:	00010902 00010906 0101090c 0001090d     ................
1a005bc8:	0001090e 0001090f 00010910 00010911     ................
1a005bd8:	00010912 00010913 00011114 00011119     ................
1a005be8:	0001111a 0001111b 636b6974 69547265     ........tikcerTi
1a005bf8:	0072656d                                mer.

1a005bfc <gpioPinsInit>:
1a005bfc:	02000104 00050701 05010d03 04080100     ................
1a005c0c:	02020002 02000304 00000403 04070002     ................
1a005c1c:	030c0300 09050402 05040103 04030208     ................
1a005c2c:	04020305 06040504 0802000c 03000b06     ................
1a005c3c:	00090607 07060503 060f0504 03030004     ................
1a005c4c:	02000404 00050404 06040502 04060200     ................
1a005c5c:	0c050408 05040a04 0003010e 14010a00     ................
1a005c6c:	010f0000 0d000012 00001101 0010010c     ................
1a005c7c:	07070300 000f0300 01000001 00000000     ................
1a005c8c:	000a0600 08060603 06100504 04030005     ................
1a005c9c:	03000106 04090400 04010d05 010b0000     ................
1a005cac:	0200000f 00000001 00010104 02010800     ................
1a005cbc:	01090000 09010006 05040002 04010200     ................
1a005ccc:	02020105 02020504 0e00000a 01000b02     ................
1a005cdc:	000c020b 00040c01 04000200 01020001     ................
1a005cec:	02000204 00030402 03070302 070b0300     ................
1a005cfc:	0c030004 03000507 0006070d 01020e03     ................
1a005d0c:	04010504 06020006 02000504 00040405     ................
1a005d1c:	08040402 040c0504 0d050409 05040a04     ................
1a005d2c:	0005010e ffff0801                       ........

1a005d34 <ultrasonicSensorsIrqMap>:
1a005d34:	ff020100                                ....

1a005d38 <__sf_fake_stderr>:
	...

1a005d58 <__sf_fake_stdin>:
	...

1a005d78 <__sf_fake_stdout>:
	...

1a005d98 <_global_impure_ptr>:
1a005d98:	10000090 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a005da8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a005db8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a005dc8:	64636261 ff006665                       abcdef..
